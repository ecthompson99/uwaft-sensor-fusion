/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.3.0 Wed Mar 17 23:20:48 2021.
 */

#include <string.h>

#include "radar.h"

static inline uint8_t pack_left_shift_u8(uint8_t value, uint8_t shift, uint8_t mask) {
  return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(uint16_t value, uint8_t shift, uint8_t mask) {
  return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u64(uint64_t value, uint8_t shift, uint8_t mask) {
  return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u8(uint8_t value, uint8_t shift, uint8_t mask) {
  return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u16(uint16_t value, uint8_t shift, uint8_t mask) {
  return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u64(uint64_t value, uint8_t shift, uint8_t mask) {
  return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t unpack_left_shift_u8(uint8_t value, uint8_t shift, uint8_t mask) {
  return (uint8_t)((uint8_t)(value & mask) << shift);
}

static inline uint16_t unpack_left_shift_u16(uint8_t value, uint8_t shift, uint8_t mask) {
  return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint64_t unpack_left_shift_u64(uint8_t value, uint8_t shift, uint8_t mask) {
  return (uint64_t)((uint64_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(uint8_t value, uint8_t shift, uint8_t mask) {
  return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(uint8_t value, uint8_t shift, uint8_t mask) {
  return (uint16_t)((uint16_t)(value & mask) >> shift);
}

static inline uint64_t unpack_right_shift_u64(uint8_t value, uint8_t shift, uint8_t mask) {
  return (uint64_t)((uint64_t)(value & mask) >> shift);
}

int radar_diag_response_pack(uint8_t *dst_p, const struct radar_diag_response_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_right_shift_u64(src_p->r_diag_response, 56u, 0xffu);
  dst_p[1] |= pack_right_shift_u64(src_p->r_diag_response, 48u, 0xffu);
  dst_p[2] |= pack_right_shift_u64(src_p->r_diag_response, 40u, 0xffu);
  dst_p[3] |= pack_right_shift_u64(src_p->r_diag_response, 32u, 0xffu);
  dst_p[4] |= pack_right_shift_u64(src_p->r_diag_response, 24u, 0xffu);
  dst_p[5] |= pack_right_shift_u64(src_p->r_diag_response, 16u, 0xffu);
  dst_p[6] |= pack_right_shift_u64(src_p->r_diag_response, 8u, 0xffu);
  dst_p[7] |= pack_left_shift_u64(src_p->r_diag_response, 0u, 0xffu);

  return (8);
}

int radar_diag_response_unpack(struct radar_diag_response_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->r_diag_response = unpack_left_shift_u64(src_p[0], 56u, 0xffu);
  dst_p->r_diag_response |= unpack_left_shift_u64(src_p[1], 48u, 0xffu);
  dst_p->r_diag_response |= unpack_left_shift_u64(src_p[2], 40u, 0xffu);
  dst_p->r_diag_response |= unpack_left_shift_u64(src_p[3], 32u, 0xffu);
  dst_p->r_diag_response |= unpack_left_shift_u64(src_p[4], 24u, 0xffu);
  dst_p->r_diag_response |= unpack_left_shift_u64(src_p[5], 16u, 0xffu);
  dst_p->r_diag_response |= unpack_left_shift_u64(src_p[6], 8u, 0xffu);
  dst_p->r_diag_response |= unpack_right_shift_u64(src_p[7], 0u, 0xffu);

  return (0);
}

uint64_t radar_diag_response_r_diag_response_encode(double value) { return (uint64_t)(value); }

double radar_diag_response_r_diag_response_decode(uint64_t value) { return ((double)value); }

bool radar_diag_response_r_diag_response_is_in_range(uint64_t value) {
  (void)value;

  return (true);
}

int radar_diag_request_pack(uint8_t *dst_p, const struct radar_diag_request_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_right_shift_u64(src_p->r_diag_request, 56u, 0xffu);
  dst_p[1] |= pack_right_shift_u64(src_p->r_diag_request, 48u, 0xffu);
  dst_p[2] |= pack_right_shift_u64(src_p->r_diag_request, 40u, 0xffu);
  dst_p[3] |= pack_right_shift_u64(src_p->r_diag_request, 32u, 0xffu);
  dst_p[4] |= pack_right_shift_u64(src_p->r_diag_request, 24u, 0xffu);
  dst_p[5] |= pack_right_shift_u64(src_p->r_diag_request, 16u, 0xffu);
  dst_p[6] |= pack_right_shift_u64(src_p->r_diag_request, 8u, 0xffu);
  dst_p[7] |= pack_left_shift_u64(src_p->r_diag_request, 0u, 0xffu);

  return (8);
}

int radar_diag_request_unpack(struct radar_diag_request_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->r_diag_request = unpack_left_shift_u64(src_p[0], 56u, 0xffu);
  dst_p->r_diag_request |= unpack_left_shift_u64(src_p[1], 48u, 0xffu);
  dst_p->r_diag_request |= unpack_left_shift_u64(src_p[2], 40u, 0xffu);
  dst_p->r_diag_request |= unpack_left_shift_u64(src_p[3], 32u, 0xffu);
  dst_p->r_diag_request |= unpack_left_shift_u64(src_p[4], 24u, 0xffu);
  dst_p->r_diag_request |= unpack_left_shift_u64(src_p[5], 16u, 0xffu);
  dst_p->r_diag_request |= unpack_left_shift_u64(src_p[6], 8u, 0xffu);
  dst_p->r_diag_request |= unpack_right_shift_u64(src_p[7], 0u, 0xffu);

  return (0);
}

uint64_t radar_diag_request_r_diag_request_encode(double value) { return (uint64_t)(value); }

double radar_diag_request_r_diag_request_decode(uint64_t value) { return ((double)value); }

bool radar_diag_request_r_diag_request_is_in_range(uint64_t value) {
  (void)value;

  return (true);
}

int radar_obj_a_pack(uint8_t *dst_p, const struct radar_obj_a_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_right_shift_u16(src_p->radar_obj_dx, 4u, 0xffu);
  dst_p[1] |= pack_left_shift_u16(src_p->radar_obj_dx, 4u, 0xf0u);
  dst_p[1] |= pack_right_shift_u16(src_p->radar_obj_vx, 8u, 0x0fu);
  dst_p[2] |= pack_left_shift_u16(src_p->radar_obj_vx, 0u, 0xffu);
  dst_p[3] |= pack_right_shift_u16(src_p->radar_obj_dy, 3u, 0xffu);
  dst_p[4] |= pack_left_shift_u16(src_p->radar_obj_dy, 5u, 0xe0u);
  dst_p[4] |= pack_left_shift_u8(src_p->radar_obj_w_exist, 0u, 0x1fu);
  dst_p[5] |= pack_right_shift_u16(src_p->radar_obj_ax, 2u, 0xffu);
  dst_p[6] |= pack_left_shift_u16(src_p->radar_obj_ax, 6u, 0xc0u);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_obj_w_obstacle, 1u, 0x3eu);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_obj_flag_valid, 0u, 0x01u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_obj_w_non_obstacle, 3u, 0xf8u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_obj_flag_meas, 2u, 0x04u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_obj_flag_hist, 1u, 0x02u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_obj_mess_aconsist_bit, 0u, 0x01u);

  return (8);
}

int radar_obj_a_unpack(struct radar_obj_a_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->radar_obj_dx = unpack_left_shift_u16(src_p[0], 4u, 0xffu);
  dst_p->radar_obj_dx |= unpack_right_shift_u16(src_p[1], 4u, 0xf0u);
  dst_p->radar_obj_vx = unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
  dst_p->radar_obj_vx |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
  dst_p->radar_obj_dy = unpack_left_shift_u16(src_p[3], 3u, 0xffu);
  dst_p->radar_obj_dy |= unpack_right_shift_u16(src_p[4], 5u, 0xe0u);
  dst_p->radar_obj_w_exist = unpack_right_shift_u8(src_p[4], 0u, 0x1fu);
  dst_p->radar_obj_ax = unpack_left_shift_u16(src_p[5], 2u, 0xffu);
  dst_p->radar_obj_ax |= unpack_right_shift_u16(src_p[6], 6u, 0xc0u);
  dst_p->radar_obj_w_obstacle = unpack_right_shift_u8(src_p[6], 1u, 0x3eu);
  dst_p->radar_obj_flag_valid = unpack_right_shift_u8(src_p[6], 0u, 0x01u);
  dst_p->radar_obj_w_non_obstacle = unpack_right_shift_u8(src_p[7], 3u, 0xf8u);
  dst_p->radar_obj_flag_meas = unpack_right_shift_u8(src_p[7], 2u, 0x04u);
  dst_p->radar_obj_flag_hist = unpack_right_shift_u8(src_p[7], 1u, 0x02u);
  dst_p->radar_obj_mess_aconsist_bit = unpack_right_shift_u8(src_p[7], 0u, 0x01u);

  return (0);
}

uint16_t radar_obj_a_radar_obj_dx_encode(double value) { return (uint16_t)(value / 0.0625); }

double radar_obj_a_radar_obj_dx_decode(uint16_t value) { return ((double)value * 0.0625); }

bool radar_obj_a_radar_obj_dx_is_in_range(uint16_t value) { return (value <= 4095u); }

uint16_t radar_obj_a_radar_obj_vx_encode(double value) { return (uint16_t)((value - -128.0) / 0.0625); }

double radar_obj_a_radar_obj_vx_decode(uint16_t value) { return (((double)value * 0.0625) + -128.0); }

bool radar_obj_a_radar_obj_vx_is_in_range(uint16_t value) { return (value <= 4095u); }

uint16_t radar_obj_a_radar_obj_dy_encode(double value) { return (uint16_t)((value - -128.0) / 0.125); }

double radar_obj_a_radar_obj_dy_decode(uint16_t value) { return (((double)value * 0.125) + -128.0); }

bool radar_obj_a_radar_obj_dy_is_in_range(uint16_t value) { return (value <= 2047u); }

uint8_t radar_obj_a_radar_obj_w_exist_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_obj_a_radar_obj_w_exist_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_obj_a_radar_obj_w_exist_is_in_range(uint8_t value) { return (value <= 31u); }

uint16_t radar_obj_a_radar_obj_ax_encode(double value) { return (uint16_t)((value - -16.0) / 0.03125); }

double radar_obj_a_radar_obj_ax_decode(uint16_t value) { return (((double)value * 0.03125) + -16.0); }

bool radar_obj_a_radar_obj_ax_is_in_range(uint16_t value) { return (value <= 1023u); }

uint8_t radar_obj_a_radar_obj_w_obstacle_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_obj_a_radar_obj_w_obstacle_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_obj_a_radar_obj_w_obstacle_is_in_range(uint8_t value) { return (value <= 31u); }

uint8_t radar_obj_a_radar_obj_flag_valid_encode(double value) { return (uint8_t)(value); }

double radar_obj_a_radar_obj_flag_valid_decode(uint8_t value) { return ((double)value); }

bool radar_obj_a_radar_obj_flag_valid_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_obj_a_radar_obj_w_non_obstacle_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_obj_a_radar_obj_w_non_obstacle_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_obj_a_radar_obj_w_non_obstacle_is_in_range(uint8_t value) { return (value <= 31u); }

uint8_t radar_obj_a_radar_obj_flag_meas_encode(double value) { return (uint8_t)(value); }

double radar_obj_a_radar_obj_flag_meas_decode(uint8_t value) { return ((double)value); }

bool radar_obj_a_radar_obj_flag_meas_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_obj_a_radar_obj_flag_hist_encode(double value) { return (uint8_t)(value); }

double radar_obj_a_radar_obj_flag_hist_decode(uint8_t value) { return ((double)value); }

bool radar_obj_a_radar_obj_flag_hist_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_obj_a_radar_obj_mess_aconsist_bit_encode(double value) { return (uint8_t)(value); }

double radar_obj_a_radar_obj_mess_aconsist_bit_decode(uint8_t value) { return ((double)value); }

bool radar_obj_a_radar_obj_mess_aconsist_bit_is_in_range(uint8_t value) { return (value <= 1u); }

int radar_obj_b_pack(uint8_t *dst_p, const struct radar_obj_b_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_right_shift_u16(src_p->radar_obj_vy, 2u, 0xffu);
  dst_p[1] |= pack_left_shift_u16(src_p->radar_obj_vy, 6u, 0xc0u);
  dst_p[1] |= pack_left_shift_u8(src_p->radar_obj_d_length, 0u, 0x3fu);
  dst_p[2] |= pack_left_shift_u8(src_p->radar_obj_dz, 2u, 0xfcu);
  dst_p[2] |= pack_left_shift_u8(src_p->radar_obj_moving_state, 0u, 0x03u);
  dst_p[3] |= pack_left_shift_u8(src_p->radar_obj_dx_sigma, 2u, 0xfcu);
  dst_p[3] |= pack_right_shift_u8(src_p->radar_obj_vx_sigma, 4u, 0x03u);
  dst_p[4] |= pack_left_shift_u8(src_p->radar_obj_vx_sigma, 4u, 0xf0u);
  dst_p[4] |= pack_right_shift_u8(src_p->radar_obj_ax_sigma, 2u, 0x0fu);
  dst_p[5] |= pack_left_shift_u8(src_p->radar_obj_ax_sigma, 6u, 0xc0u);
  dst_p[5] |= pack_left_shift_u8(src_p->radar_obj_dy_sigma, 0u, 0x3fu);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_obj_w_class, 3u, 0xf8u);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_obj_class, 0u, 0x07u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_obj_dx_rear_end_loss, 2u, 0xfcu);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_obj_mess_bconsist_bit, 0u, 0x01u);

  return (8);
}

int radar_obj_b_unpack(struct radar_obj_b_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->radar_obj_vy = unpack_left_shift_u16(src_p[0], 2u, 0xffu);
  dst_p->radar_obj_vy |= unpack_right_shift_u16(src_p[1], 6u, 0xc0u);
  dst_p->radar_obj_d_length = unpack_right_shift_u8(src_p[1], 0u, 0x3fu);
  dst_p->radar_obj_dz = unpack_right_shift_u8(src_p[2], 2u, 0xfcu);
  dst_p->radar_obj_moving_state = unpack_right_shift_u8(src_p[2], 0u, 0x03u);
  dst_p->radar_obj_dx_sigma = unpack_right_shift_u8(src_p[3], 2u, 0xfcu);
  dst_p->radar_obj_vx_sigma = unpack_left_shift_u8(src_p[3], 4u, 0x03u);
  dst_p->radar_obj_vx_sigma |= unpack_right_shift_u8(src_p[4], 4u, 0xf0u);
  dst_p->radar_obj_ax_sigma = unpack_left_shift_u8(src_p[4], 2u, 0x0fu);
  dst_p->radar_obj_ax_sigma |= unpack_right_shift_u8(src_p[5], 6u, 0xc0u);
  dst_p->radar_obj_dy_sigma = unpack_right_shift_u8(src_p[5], 0u, 0x3fu);
  dst_p->radar_obj_w_class = unpack_right_shift_u8(src_p[6], 3u, 0xf8u);
  dst_p->radar_obj_class = unpack_right_shift_u8(src_p[6], 0u, 0x07u);
  dst_p->radar_obj_dx_rear_end_loss = unpack_right_shift_u8(src_p[7], 2u, 0xfcu);
  dst_p->radar_obj_mess_bconsist_bit = unpack_right_shift_u8(src_p[7], 0u, 0x01u);

  return (0);
}

uint16_t radar_obj_b_radar_obj_vy_encode(double value) { return (uint16_t)((value - -64.0) / 0.125); }

double radar_obj_b_radar_obj_vy_decode(uint16_t value) { return (((double)value * 0.125) + -64.0); }

bool radar_obj_b_radar_obj_vy_is_in_range(uint16_t value) { return (value <= 1023u); }

uint8_t radar_obj_b_radar_obj_d_length_encode(double value) { return (uint8_t)(value / 0.125); }

double radar_obj_b_radar_obj_d_length_decode(uint8_t value) { return ((double)value * 0.125); }

bool radar_obj_b_radar_obj_d_length_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_obj_b_radar_obj_dz_encode(double value) { return (uint8_t)((value - -5.0) / 0.25); }

double radar_obj_b_radar_obj_dz_decode(uint8_t value) { return (((double)value * 0.25) + -5.0); }

bool radar_obj_b_radar_obj_dz_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_obj_b_radar_obj_moving_state_encode(double value) { return (uint8_t)(value); }

double radar_obj_b_radar_obj_moving_state_decode(uint8_t value) { return ((double)value); }

bool radar_obj_b_radar_obj_moving_state_is_in_range(uint8_t value) { return (value <= 3u); }

uint8_t radar_obj_b_radar_obj_dx_sigma_encode(double value) { return (uint8_t)(value / 0.0625); }

double radar_obj_b_radar_obj_dx_sigma_decode(uint8_t value) { return ((double)value * 0.0625); }

bool radar_obj_b_radar_obj_dx_sigma_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_obj_b_radar_obj_vx_sigma_encode(double value) { return (uint8_t)(value / 0.0625); }

double radar_obj_b_radar_obj_vx_sigma_decode(uint8_t value) { return ((double)value * 0.0625); }

bool radar_obj_b_radar_obj_vx_sigma_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_obj_b_radar_obj_ax_sigma_encode(double value) { return (uint8_t)(value / 0.0625); }

double radar_obj_b_radar_obj_ax_sigma_decode(uint8_t value) { return ((double)value * 0.0625); }

bool radar_obj_b_radar_obj_ax_sigma_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_obj_b_radar_obj_dy_sigma_encode(double value) { return (uint8_t)(value / 0.0625); }

double radar_obj_b_radar_obj_dy_sigma_decode(uint8_t value) { return ((double)value * 0.0625); }

bool radar_obj_b_radar_obj_dy_sigma_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_obj_b_radar_obj_w_class_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_obj_b_radar_obj_w_class_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_obj_b_radar_obj_w_class_is_in_range(uint8_t value) { return (value <= 31u); }

uint8_t radar_obj_b_radar_obj_class_encode(double value) { return (uint8_t)(value); }

double radar_obj_b_radar_obj_class_decode(uint8_t value) { return ((double)value); }

bool radar_obj_b_radar_obj_class_is_in_range(uint8_t value) { return (value <= 7u); }

uint8_t radar_obj_b_radar_obj_dx_rear_end_loss_encode(double value) { return (uint8_t)(value / 0.125); }

double radar_obj_b_radar_obj_dx_rear_end_loss_decode(uint8_t value) { return ((double)value * 0.125); }

bool radar_obj_b_radar_obj_dx_rear_end_loss_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_obj_b_radar_obj_mess_bconsist_bit_encode(double value) { return (uint8_t)(value); }

double radar_obj_b_radar_obj_mess_bconsist_bit_decode(uint8_t value) { return ((double)value); }

bool radar_obj_b_radar_obj_mess_bconsist_bit_is_in_range(uint8_t value) { return (value <= 1u); }

int radar_target_a_pack(uint8_t *dst_p, const struct radar_target_a_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_right_shift_u16(src_p->radar_target_dx, 4u, 0xffu);
  dst_p[1] |= pack_left_shift_u16(src_p->radar_target_dx, 4u, 0xf0u);
  dst_p[1] |= pack_right_shift_u16(src_p->radar_target_vx, 8u, 0x0fu);
  dst_p[2] |= pack_left_shift_u16(src_p->radar_target_vx, 0u, 0xffu);
  dst_p[3] |= pack_right_shift_u16(src_p->radar_target_dy, 3u, 0xffu);
  dst_p[4] |= pack_left_shift_u16(src_p->radar_target_dy, 5u, 0xe0u);
  dst_p[4] |= pack_left_shift_u8(src_p->radar_target_w_exist, 0u, 0x1fu);
  dst_p[5] |= pack_right_shift_u16(src_p->radar_target_ax, 2u, 0xffu);
  dst_p[6] |= pack_left_shift_u16(src_p->radar_target_ax, 6u, 0xc0u);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_target_w_obstacle, 1u, 0x3eu);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_target_flag_valid, 0u, 0x01u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_target_w_non_obstacle, 3u, 0xf8u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_target_flag_meas, 2u, 0x04u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_target_flag_hist, 1u, 0x02u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_target_mess_aconsist_bit, 0u, 0x01u);

  return (8);
}

int radar_target_a_unpack(struct radar_target_a_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->radar_target_dx = unpack_left_shift_u16(src_p[0], 4u, 0xffu);
  dst_p->radar_target_dx |= unpack_right_shift_u16(src_p[1], 4u, 0xf0u);
  dst_p->radar_target_vx = unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
  dst_p->radar_target_vx |= unpack_right_shift_u16(src_p[2], 0u, 0xffu);
  dst_p->radar_target_dy = unpack_left_shift_u16(src_p[3], 3u, 0xffu);
  dst_p->radar_target_dy |= unpack_right_shift_u16(src_p[4], 5u, 0xe0u);
  dst_p->radar_target_w_exist = unpack_right_shift_u8(src_p[4], 0u, 0x1fu);
  dst_p->radar_target_ax = unpack_left_shift_u16(src_p[5], 2u, 0xffu);
  dst_p->radar_target_ax |= unpack_right_shift_u16(src_p[6], 6u, 0xc0u);
  dst_p->radar_target_w_obstacle = unpack_right_shift_u8(src_p[6], 1u, 0x3eu);
  dst_p->radar_target_flag_valid = unpack_right_shift_u8(src_p[6], 0u, 0x01u);
  dst_p->radar_target_w_non_obstacle = unpack_right_shift_u8(src_p[7], 3u, 0xf8u);
  dst_p->radar_target_flag_meas = unpack_right_shift_u8(src_p[7], 2u, 0x04u);
  dst_p->radar_target_flag_hist = unpack_right_shift_u8(src_p[7], 1u, 0x02u);
  dst_p->radar_target_mess_aconsist_bit = unpack_right_shift_u8(src_p[7], 0u, 0x01u);

  return (0);
}

uint16_t radar_target_a_radar_target_dx_encode(double value) { return (uint16_t)(value / 0.0625); }

double radar_target_a_radar_target_dx_decode(uint16_t value) { return ((double)value * 0.0625); }

bool radar_target_a_radar_target_dx_is_in_range(uint16_t value) { return (value <= 4095u); }

uint16_t radar_target_a_radar_target_vx_encode(double value) { return (uint16_t)((value - -128.0) / 0.0625); }

double radar_target_a_radar_target_vx_decode(uint16_t value) { return (((double)value * 0.0625) + -128.0); }

bool radar_target_a_radar_target_vx_is_in_range(uint16_t value) { return (value <= 4095u); }

uint16_t radar_target_a_radar_target_dy_encode(double value) { return (uint16_t)((value - -128.0) / 0.125); }

double radar_target_a_radar_target_dy_decode(uint16_t value) { return (((double)value * 0.125) + -128.0); }

bool radar_target_a_radar_target_dy_is_in_range(uint16_t value) { return (value <= 2047u); }

uint8_t radar_target_a_radar_target_w_exist_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_target_a_radar_target_w_exist_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_target_a_radar_target_w_exist_is_in_range(uint8_t value) { return (value <= 31u); }

uint16_t radar_target_a_radar_target_ax_encode(double value) { return (uint16_t)((value - -16.0) / 0.03125); }

double radar_target_a_radar_target_ax_decode(uint16_t value) { return (((double)value * 0.03125) + -16.0); }

bool radar_target_a_radar_target_ax_is_in_range(uint16_t value) { return (value <= 1023u); }

uint8_t radar_target_a_radar_target_w_obstacle_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_target_a_radar_target_w_obstacle_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_target_a_radar_target_w_obstacle_is_in_range(uint8_t value) { return (value <= 31u); }

uint8_t radar_target_a_radar_target_flag_valid_encode(double value) { return (uint8_t)(value); }

double radar_target_a_radar_target_flag_valid_decode(uint8_t value) { return ((double)value); }

bool radar_target_a_radar_target_flag_valid_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_target_a_radar_target_w_non_obstacle_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_target_a_radar_target_w_non_obstacle_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_target_a_radar_target_w_non_obstacle_is_in_range(uint8_t value) { return (value <= 31u); }

uint8_t radar_target_a_radar_target_flag_meas_encode(double value) { return (uint8_t)(value); }

double radar_target_a_radar_target_flag_meas_decode(uint8_t value) { return ((double)value); }

bool radar_target_a_radar_target_flag_meas_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_target_a_radar_target_flag_hist_encode(double value) { return (uint8_t)(value); }

double radar_target_a_radar_target_flag_hist_decode(uint8_t value) { return ((double)value); }

bool radar_target_a_radar_target_flag_hist_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_target_a_radar_target_mess_aconsist_bit_encode(double value) { return (uint8_t)(value); }

double radar_target_a_radar_target_mess_aconsist_bit_decode(uint8_t value) { return ((double)value); }

bool radar_target_a_radar_target_mess_aconsist_bit_is_in_range(uint8_t value) { return (value <= 1u); }

int radar_target_b_pack(uint8_t *dst_p, const struct radar_target_b_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_right_shift_u16(src_p->radar_target_vy, 2u, 0xffu);
  dst_p[1] |= pack_left_shift_u16(src_p->radar_target_vy, 6u, 0xc0u);
  dst_p[1] |= pack_left_shift_u8(src_p->radar_target_d_length, 0u, 0x3fu);
  dst_p[2] |= pack_left_shift_u8(src_p->radar_target_dz, 2u, 0xfcu);
  dst_p[2] |= pack_left_shift_u8(src_p->radar_target_moving_state, 0u, 0x03u);
  dst_p[3] |= pack_left_shift_u8(src_p->radar_target_dx_sigma, 2u, 0xfcu);
  dst_p[3] |= pack_right_shift_u8(src_p->radar_target_vx_sigma, 4u, 0x03u);
  dst_p[4] |= pack_left_shift_u8(src_p->radar_target_vx_sigma, 4u, 0xf0u);
  dst_p[4] |= pack_right_shift_u8(src_p->radar_target_ax_sigma, 2u, 0x0fu);
  dst_p[5] |= pack_left_shift_u8(src_p->radar_target_ax_sigma, 6u, 0xc0u);
  dst_p[5] |= pack_left_shift_u8(src_p->radar_target_dy_sigma, 0u, 0x3fu);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_target_w_class, 3u, 0xf8u);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_target_class, 0u, 0x07u);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_target_dx_rear_end_loss, 2u, 0xfcu);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_target_mess_bconsist_bit, 0u, 0x01u);

  return (8);
}

int radar_target_b_unpack(struct radar_target_b_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->radar_target_vy = unpack_left_shift_u16(src_p[0], 2u, 0xffu);
  dst_p->radar_target_vy |= unpack_right_shift_u16(src_p[1], 6u, 0xc0u);
  dst_p->radar_target_d_length = unpack_right_shift_u8(src_p[1], 0u, 0x3fu);
  dst_p->radar_target_dz = unpack_right_shift_u8(src_p[2], 2u, 0xfcu);
  dst_p->radar_target_moving_state = unpack_right_shift_u8(src_p[2], 0u, 0x03u);
  dst_p->radar_target_dx_sigma = unpack_right_shift_u8(src_p[3], 2u, 0xfcu);
  dst_p->radar_target_vx_sigma = unpack_left_shift_u8(src_p[3], 4u, 0x03u);
  dst_p->radar_target_vx_sigma |= unpack_right_shift_u8(src_p[4], 4u, 0xf0u);
  dst_p->radar_target_ax_sigma = unpack_left_shift_u8(src_p[4], 2u, 0x0fu);
  dst_p->radar_target_ax_sigma |= unpack_right_shift_u8(src_p[5], 6u, 0xc0u);
  dst_p->radar_target_dy_sigma = unpack_right_shift_u8(src_p[5], 0u, 0x3fu);
  dst_p->radar_target_w_class = unpack_right_shift_u8(src_p[6], 3u, 0xf8u);
  dst_p->radar_target_class = unpack_right_shift_u8(src_p[6], 0u, 0x07u);
  dst_p->radar_target_dx_rear_end_loss = unpack_right_shift_u8(src_p[7], 2u, 0xfcu);
  dst_p->radar_target_mess_bconsist_bit = unpack_right_shift_u8(src_p[7], 0u, 0x01u);

  return (0);
}

uint16_t radar_target_b_radar_target_vy_encode(double value) { return (uint16_t)((value - -64.0) / 0.125); }

double radar_target_b_radar_target_vy_decode(uint16_t value) { return (((double)value * 0.125) + -64.0); }

bool radar_target_b_radar_target_vy_is_in_range(uint16_t value) { return (value <= 1023u); }

uint8_t radar_target_b_radar_target_d_length_encode(double value) { return (uint8_t)(value / 0.125); }

double radar_target_b_radar_target_d_length_decode(uint8_t value) { return ((double)value * 0.125); }

bool radar_target_b_radar_target_d_length_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_target_b_radar_target_dz_encode(double value) { return (uint8_t)((value - -5.0) / 0.25); }

double radar_target_b_radar_target_dz_decode(uint8_t value) { return (((double)value * 0.25) + -5.0); }

bool radar_target_b_radar_target_dz_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_target_b_radar_target_moving_state_encode(double value) { return (uint8_t)(value); }

double radar_target_b_radar_target_moving_state_decode(uint8_t value) { return ((double)value); }

bool radar_target_b_radar_target_moving_state_is_in_range(uint8_t value) { return (value <= 3u); }

uint8_t radar_target_b_radar_target_dx_sigma_encode(double value) { return (uint8_t)(value / 0.0625); }

double radar_target_b_radar_target_dx_sigma_decode(uint8_t value) { return ((double)value * 0.0625); }

bool radar_target_b_radar_target_dx_sigma_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_target_b_radar_target_vx_sigma_encode(double value) { return (uint8_t)(value / 0.0625); }

double radar_target_b_radar_target_vx_sigma_decode(uint8_t value) { return ((double)value * 0.0625); }

bool radar_target_b_radar_target_vx_sigma_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_target_b_radar_target_ax_sigma_encode(double value) { return (uint8_t)(value / 0.0625); }

double radar_target_b_radar_target_ax_sigma_decode(uint8_t value) { return ((double)value * 0.0625); }

bool radar_target_b_radar_target_ax_sigma_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_target_b_radar_target_dy_sigma_encode(double value) { return (uint8_t)(value / 0.0625); }

double radar_target_b_radar_target_dy_sigma_decode(uint8_t value) { return ((double)value * 0.0625); }

bool radar_target_b_radar_target_dy_sigma_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_target_b_radar_target_w_class_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_target_b_radar_target_w_class_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_target_b_radar_target_w_class_is_in_range(uint8_t value) { return (value <= 31u); }

uint8_t radar_target_b_radar_target_class_encode(double value) { return (uint8_t)(value); }

double radar_target_b_radar_target_class_decode(uint8_t value) { return ((double)value); }

bool radar_target_b_radar_target_class_is_in_range(uint8_t value) { return (value <= 7u); }

uint8_t radar_target_b_radar_target_dx_rear_end_loss_encode(double value) { return (uint8_t)(value / 0.125); }

double radar_target_b_radar_target_dx_rear_end_loss_decode(uint8_t value) { return ((double)value * 0.125); }

bool radar_target_b_radar_target_dx_rear_end_loss_is_in_range(uint8_t value) { return (value <= 63u); }

uint8_t radar_target_b_radar_target_mess_bconsist_bit_encode(double value) { return (uint8_t)(value); }

double radar_target_b_radar_target_mess_bconsist_bit_decode(uint8_t value) { return ((double)value); }

bool radar_target_b_radar_target_mess_bconsist_bit_is_in_range(uint8_t value) { return (value <= 1u); }

int radar_object_ender_pack(uint8_t *dst_p, const struct radar_object_ender_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_left_shift_u8(src_p->radar_timestamp, 0u, 0xffu);
  dst_p[1] |= pack_left_shift_u8(src_p->radar_packet_checksum, 0u, 0xffu);
  dst_p[3] |= pack_left_shift_u8(src_p->radar_tc_counter, 0u, 0xffu);
  dst_p[6] |= pack_left_shift_u8(src_p->radar_mess_ender_consist_bit, 0u, 0x01u);

  return (8);
}

int radar_object_ender_unpack(struct radar_object_ender_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->radar_timestamp = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
  dst_p->radar_packet_checksum = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
  dst_p->radar_tc_counter = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
  dst_p->radar_mess_ender_consist_bit = unpack_right_shift_u8(src_p[6], 0u, 0x01u);

  return (0);
}

uint8_t radar_object_ender_radar_timestamp_encode(double value) { return (uint8_t)(value / 0.0009765625); }

double radar_object_ender_radar_timestamp_decode(uint8_t value) { return ((double)value * 0.0009765625); }

bool radar_object_ender_radar_timestamp_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_object_ender_radar_packet_checksum_encode(double value) { return (uint8_t)(value); }

double radar_object_ender_radar_packet_checksum_decode(uint8_t value) { return ((double)value); }

bool radar_object_ender_radar_packet_checksum_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_object_ender_radar_tc_counter_encode(double value) { return (uint8_t)(value); }

double radar_object_ender_radar_tc_counter_decode(uint8_t value) { return ((double)value); }

bool radar_object_ender_radar_tc_counter_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_object_ender_radar_mess_ender_consist_bit_encode(double value) { return (uint8_t)(value); }

double radar_object_ender_radar_mess_ender_consist_bit_decode(uint8_t value) { return ((double)value); }

bool radar_object_ender_radar_mess_ender_consist_bit_is_in_range(uint8_t value) { return (value <= 1u); }

int radar_object_starter_pack(uint8_t *dst_p, const struct radar_object_starter_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_right_shift_u16(src_p->radar_veh_psi_dt, 8u, 0xffu);
  dst_p[1] |= pack_left_shift_u16(src_p->radar_veh_psi_dt, 0u, 0xffu);
  dst_p[2] |= pack_right_shift_u16(src_p->radar_veh_v_ego, 4u, 0xffu);
  dst_p[3] |= pack_left_shift_u16(src_p->radar_veh_v_ego, 4u, 0xf0u);
  dst_p[3] |= pack_right_shift_u16(src_p->radar_veh_a_ego, 6u, 0x0fu);
  dst_p[4] |= pack_left_shift_u16(src_p->radar_veh_a_ego, 2u, 0xfcu);
  dst_p[5] |= pack_right_shift_u16(src_p->radar_veh_slip_angle, 8u, 0x3fu);
  dst_p[6] |= pack_left_shift_u16(src_p->radar_veh_slip_angle, 0u, 0xffu);
  dst_p[7] |= pack_left_shift_u8(src_p->radar_mess_starter_consist_bit, 0u, 0x01u);

  return (8);
}

int radar_object_starter_unpack(struct radar_object_starter_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->radar_veh_psi_dt = unpack_left_shift_u16(src_p[0], 8u, 0xffu);
  dst_p->radar_veh_psi_dt |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
  dst_p->radar_veh_v_ego = unpack_left_shift_u16(src_p[2], 4u, 0xffu);
  dst_p->radar_veh_v_ego |= unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
  dst_p->radar_veh_a_ego = unpack_left_shift_u16(src_p[3], 6u, 0x0fu);
  dst_p->radar_veh_a_ego |= unpack_right_shift_u16(src_p[4], 2u, 0xfcu);
  dst_p->radar_veh_slip_angle = unpack_left_shift_u16(src_p[5], 8u, 0x3fu);
  dst_p->radar_veh_slip_angle |= unpack_right_shift_u16(src_p[6], 0u, 0xffu);
  dst_p->radar_mess_starter_consist_bit = unpack_right_shift_u8(src_p[7], 0u, 0x01u);

  return (0);
}

uint16_t radar_object_starter_radar_veh_psi_dt_encode(double value) {
  return (uint16_t)((value - -2.0) / 0.00006103515625);
}

double radar_object_starter_radar_veh_psi_dt_decode(uint16_t value) {
  return (((double)value * 0.00006103515625) + -2.0);
}

bool radar_object_starter_radar_veh_psi_dt_is_in_range(uint16_t value) {
  (void)value;

  return (true);
}

uint16_t radar_object_starter_radar_veh_v_ego_encode(double value) { return (uint16_t)((value - -128.0) / 0.0625); }

double radar_object_starter_radar_veh_v_ego_decode(uint16_t value) { return (((double)value * 0.0625) + -128.0); }

bool radar_object_starter_radar_veh_v_ego_is_in_range(uint16_t value) { return (value <= 4095u); }

uint16_t radar_object_starter_radar_veh_a_ego_encode(double value) { return (uint16_t)((value - -16.0) / 0.03125); }

double radar_object_starter_radar_veh_a_ego_decode(uint16_t value) { return (((double)value * 0.03125) + -16.0); }

bool radar_object_starter_radar_veh_a_ego_is_in_range(uint16_t value) { return (value <= 1023u); }

uint16_t radar_object_starter_radar_veh_slip_angle_encode(double value) {
  return (uint16_t)((value - -0.5) / 0.00006103515625);
}

double radar_object_starter_radar_veh_slip_angle_decode(uint16_t value) {
  return (((double)value * 0.00006103515625) + -0.5);
}

bool radar_object_starter_radar_veh_slip_angle_is_in_range(uint16_t value) { return (value <= 16383u); }

uint8_t radar_object_starter_radar_mess_starter_consist_bit_encode(double value) { return (uint8_t)(value); }

double radar_object_starter_radar_mess_starter_consist_bit_decode(uint8_t value) { return ((double)value); }

bool radar_object_starter_radar_mess_starter_consist_bit_is_in_range(uint8_t value) { return (value <= 1u); }

int radar_status_pack(uint8_t *dst_p, const struct radar_status_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_right_shift_u16(src_p->r_stat_itc_info, 8u, 0xffu);
  dst_p[1] |= pack_left_shift_u16(src_p->r_stat_itc_info, 0u, 0xffu);
  dst_p[2] |= pack_left_shift_u8(src_p->r_stat_sgu_fail, 5u, 0x20u);
  dst_p[2] |= pack_left_shift_u8(src_p->r_stat_hw_fail, 4u, 0x10u);
  dst_p[2] |= pack_right_shift_u16(src_p->r_stat_horizontal_misalignment, 8u, 0x0fu);
  dst_p[3] |= pack_left_shift_u16(src_p->r_stat_horizontal_misalignment, 0u, 0xffu);
  dst_p[4] |= pack_left_shift_u8(src_p->r_stat_absorption_blindness, 0u, 0xffu);
  dst_p[5] |= pack_left_shift_u8(src_p->r_stat_distortion_blindness, 0u, 0xffu);
  dst_p[6] |= pack_left_shift_u8(src_p->r_stat_mc, 0u, 0x0fu);
  dst_p[7] |= pack_left_shift_u8(src_p->r_stat_crc, 0u, 0xffu);

  return (8);
}

int radar_status_unpack(struct radar_status_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->r_stat_itc_info = unpack_left_shift_u16(src_p[0], 8u, 0xffu);
  dst_p->r_stat_itc_info |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
  dst_p->r_stat_sgu_fail = unpack_right_shift_u8(src_p[2], 5u, 0x20u);
  dst_p->r_stat_hw_fail = unpack_right_shift_u8(src_p[2], 4u, 0x10u);
  dst_p->r_stat_horizontal_misalignment = unpack_left_shift_u16(src_p[2], 8u, 0x0fu);
  dst_p->r_stat_horizontal_misalignment |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
  dst_p->r_stat_absorption_blindness = unpack_right_shift_u8(src_p[4], 0u, 0xffu);
  dst_p->r_stat_distortion_blindness = unpack_right_shift_u8(src_p[5], 0u, 0xffu);
  dst_p->r_stat_mc = unpack_right_shift_u8(src_p[6], 0u, 0x0fu);
  dst_p->r_stat_crc = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

  return (0);
}

uint16_t radar_status_r_stat_itc_info_encode(double value) { return (uint16_t)(value); }

double radar_status_r_stat_itc_info_decode(uint16_t value) { return ((double)value); }

bool radar_status_r_stat_itc_info_is_in_range(uint16_t value) {
  (void)value;

  return (true);
}

uint8_t radar_status_r_stat_sgu_fail_encode(double value) { return (uint8_t)(value); }

double radar_status_r_stat_sgu_fail_decode(uint8_t value) { return ((double)value); }

bool radar_status_r_stat_sgu_fail_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_status_r_stat_hw_fail_encode(double value) { return (uint8_t)(value); }

double radar_status_r_stat_hw_fail_decode(uint8_t value) { return ((double)value); }

bool radar_status_r_stat_hw_fail_is_in_range(uint8_t value) { return (value <= 1u); }

uint16_t radar_status_r_stat_horizontal_misalignment_encode(double value) {
  return (uint16_t)((value - -0.2048) / 0.0001);
}

double radar_status_r_stat_horizontal_misalignment_decode(uint16_t value) {
  return (((double)value * 0.0001) + -0.2048);
}

bool radar_status_r_stat_horizontal_misalignment_is_in_range(uint16_t value) { return (value <= 4095u); }

uint8_t radar_status_r_stat_absorption_blindness_encode(double value) { return (uint8_t)(value / 0.00390625); }

double radar_status_r_stat_absorption_blindness_decode(uint8_t value) { return ((double)value * 0.00390625); }

bool radar_status_r_stat_absorption_blindness_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_status_r_stat_distortion_blindness_encode(double value) { return (uint8_t)(value / 0.00390625); }

double radar_status_r_stat_distortion_blindness_decode(uint8_t value) { return ((double)value * 0.00390625); }

bool radar_status_r_stat_distortion_blindness_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_status_r_stat_mc_encode(double value) { return (uint8_t)(value); }

double radar_status_r_stat_mc_decode(uint8_t value) { return ((double)value); }

bool radar_status_r_stat_mc_is_in_range(uint8_t value) { return (value <= 15u); }

uint8_t radar_status_r_stat_crc_encode(double value) { return (uint8_t)(value); }

double radar_status_r_stat_crc_decode(uint8_t value) { return ((double)value); }

bool radar_status_r_stat_crc_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

int radar_input_veh_dyn_data_pack(uint8_t *dst_p, const struct radar_input_veh_dyn_data_t *src_p, size_t size) {
  uint16_t ri_veh_steer_angle;
  uint16_t ri_veh_velocity;
  uint16_t ri_veh_yaw_rate;

  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  ri_veh_steer_angle = (uint16_t)src_p->ri_veh_steer_angle;
  dst_p[0] |= pack_right_shift_u16(ri_veh_steer_angle, 8u, 0xffu);
  dst_p[1] |= pack_left_shift_u16(ri_veh_steer_angle, 0u, 0xffu);
  ri_veh_velocity = (uint16_t)src_p->ri_veh_velocity;
  dst_p[2] |= pack_right_shift_u16(ri_veh_velocity, 8u, 0xffu);
  dst_p[3] |= pack_left_shift_u16(ri_veh_velocity, 0u, 0xffu);
  dst_p[4] |= pack_left_shift_u8(src_p->ri_veh_use_steer_angle, 7u, 0x80u);
  dst_p[4] |= pack_left_shift_u8(src_p->ri_veh_standstill, 6u, 0x40u);
  ri_veh_yaw_rate = (uint16_t)src_p->ri_veh_yaw_rate;
  dst_p[4] |= pack_right_shift_u16(ri_veh_yaw_rate, 8u, 0x3fu);
  dst_p[5] |= pack_left_shift_u16(ri_veh_yaw_rate, 0u, 0xffu);
  dst_p[6] |= pack_left_shift_u8(src_p->ri_veh_mc, 4u, 0xf0u);
  dst_p[6] |= pack_left_shift_u8(src_p->ri_veh_any_wheel_slip_event, 3u, 0x08u);
  dst_p[6] |= pack_left_shift_u8(src_p->ri_veh_prndstat, 0u, 0x07u);
  dst_p[7] |= pack_left_shift_u8(src_p->ri_veh_crc, 0u, 0xffu);

  return (8);
}

int radar_input_veh_dyn_data_unpack(struct radar_input_veh_dyn_data_t *dst_p, const uint8_t *src_p, size_t size) {
  uint16_t ri_veh_steer_angle;
  uint16_t ri_veh_velocity;
  uint16_t ri_veh_yaw_rate;

  if (size < 8u) {
    return (-EINVAL);
  }

  ri_veh_steer_angle = unpack_left_shift_u16(src_p[0], 8u, 0xffu);
  ri_veh_steer_angle |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);
  dst_p->ri_veh_steer_angle = (int16_t)ri_veh_steer_angle;
  ri_veh_velocity = unpack_left_shift_u16(src_p[2], 8u, 0xffu);
  ri_veh_velocity |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);
  dst_p->ri_veh_velocity = (int16_t)ri_veh_velocity;
  dst_p->ri_veh_use_steer_angle = unpack_right_shift_u8(src_p[4], 7u, 0x80u);
  dst_p->ri_veh_standstill = unpack_right_shift_u8(src_p[4], 6u, 0x40u);
  ri_veh_yaw_rate = unpack_left_shift_u16(src_p[4], 8u, 0x3fu);
  ri_veh_yaw_rate |= unpack_right_shift_u16(src_p[5], 0u, 0xffu);

  if ((ri_veh_yaw_rate & (1u << 13)) != 0u) {
    ri_veh_yaw_rate |= 0xc000u;
  }

  dst_p->ri_veh_yaw_rate = (int16_t)ri_veh_yaw_rate;
  dst_p->ri_veh_mc = unpack_right_shift_u8(src_p[6], 4u, 0xf0u);
  dst_p->ri_veh_any_wheel_slip_event = unpack_right_shift_u8(src_p[6], 3u, 0x08u);
  dst_p->ri_veh_prndstat = unpack_right_shift_u8(src_p[6], 0u, 0x07u);
  dst_p->ri_veh_crc = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

  return (0);
}

int16_t radar_input_veh_dyn_data_ri_veh_steer_angle_encode(double value) { return (int16_t)(value / 0.03125); }

double radar_input_veh_dyn_data_ri_veh_steer_angle_decode(int16_t value) { return ((double)value * 0.03125); }

bool radar_input_veh_dyn_data_ri_veh_steer_angle_is_in_range(int16_t value) {
  (void)value;

  return (true);
}

int16_t radar_input_veh_dyn_data_ri_veh_velocity_encode(double value) { return (int16_t)(value / 0.0625); }

double radar_input_veh_dyn_data_ri_veh_velocity_decode(int16_t value) { return ((double)value * 0.0625); }

bool radar_input_veh_dyn_data_ri_veh_velocity_is_in_range(int16_t value) {
  (void)value;

  return (true);
}

uint8_t radar_input_veh_dyn_data_ri_veh_use_steer_angle_encode(double value) { return (uint8_t)(value); }

double radar_input_veh_dyn_data_ri_veh_use_steer_angle_decode(uint8_t value) { return ((double)value); }

bool radar_input_veh_dyn_data_ri_veh_use_steer_angle_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_input_veh_dyn_data_ri_veh_standstill_encode(double value) { return (uint8_t)(value); }

double radar_input_veh_dyn_data_ri_veh_standstill_decode(uint8_t value) { return ((double)value); }

bool radar_input_veh_dyn_data_ri_veh_standstill_is_in_range(uint8_t value) { return (value <= 1u); }

int16_t radar_input_veh_dyn_data_ri_veh_yaw_rate_encode(double value) { return (int16_t)(value / 0.05); }

double radar_input_veh_dyn_data_ri_veh_yaw_rate_decode(int16_t value) { return ((double)value * 0.05); }

bool radar_input_veh_dyn_data_ri_veh_yaw_rate_is_in_range(int16_t value) {
  return ((value >= -8192) && (value <= 8191));
}

uint8_t radar_input_veh_dyn_data_ri_veh_mc_encode(double value) { return (uint8_t)(value); }

double radar_input_veh_dyn_data_ri_veh_mc_decode(uint8_t value) { return ((double)value); }

bool radar_input_veh_dyn_data_ri_veh_mc_is_in_range(uint8_t value) { return (value <= 15u); }

uint8_t radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_encode(double value) { return (uint8_t)(value); }

double radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_decode(uint8_t value) { return ((double)value); }

bool radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_is_in_range(uint8_t value) { return (value <= 1u); }

uint8_t radar_input_veh_dyn_data_ri_veh_prndstat_encode(double value) { return (uint8_t)(value); }

double radar_input_veh_dyn_data_ri_veh_prndstat_decode(uint8_t value) { return ((double)value); }

bool radar_input_veh_dyn_data_ri_veh_prndstat_is_in_range(uint8_t value) { return (value <= 7u); }

uint8_t radar_input_veh_dyn_data_ri_veh_crc_encode(double value) { return (uint8_t)(value); }

double radar_input_veh_dyn_data_ri_veh_crc_decode(uint8_t value) { return ((double)value); }

bool radar_input_veh_dyn_data_ri_veh_crc_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

int radar_input_veh_dim_pack(uint8_t *dst_p, const struct radar_input_veh_dim_t *src_p, size_t size) {
  uint16_t ri_vd_long_front_bumper_pos;
  uint16_t ri_vd_long_rear_bumper_pos;

  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  dst_p[0] |= pack_left_shift_u8(src_p->ri_vd_max_width, 0u, 0xffu);
  dst_p[1] |= pack_left_shift_u8(src_p->ri_vd_min_width, 0u, 0xffu);
  ri_vd_long_front_bumper_pos = (uint16_t)src_p->ri_vd_long_front_bumper_pos;
  dst_p[2] |= pack_right_shift_u16(ri_vd_long_front_bumper_pos, 8u, 0x01u);
  dst_p[3] |= pack_left_shift_u16(ri_vd_long_front_bumper_pos, 0u, 0xffu);
  ri_vd_long_rear_bumper_pos = (uint16_t)src_p->ri_vd_long_rear_bumper_pos;
  dst_p[4] |= pack_right_shift_u16(ri_vd_long_rear_bumper_pos, 8u, 0x01u);
  dst_p[5] |= pack_left_shift_u16(ri_vd_long_rear_bumper_pos, 0u, 0xffu);
  dst_p[6] |= pack_left_shift_u8(src_p->ri_vd_mc, 0u, 0x0fu);
  dst_p[7] |= pack_left_shift_u8(src_p->ri_vd_crc, 0u, 0xffu);

  return (8);
}

int radar_input_veh_dim_unpack(struct radar_input_veh_dim_t *dst_p, const uint8_t *src_p, size_t size) {
  uint16_t ri_vd_long_front_bumper_pos;
  uint16_t ri_vd_long_rear_bumper_pos;

  if (size < 8u) {
    return (-EINVAL);
  }

  dst_p->ri_vd_max_width = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
  dst_p->ri_vd_min_width = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
  ri_vd_long_front_bumper_pos = unpack_left_shift_u16(src_p[2], 8u, 0x01u);
  ri_vd_long_front_bumper_pos |= unpack_right_shift_u16(src_p[3], 0u, 0xffu);

  if ((ri_vd_long_front_bumper_pos & (1u << 8)) != 0u) {
    ri_vd_long_front_bumper_pos |= 0xfe00u;
  }

  dst_p->ri_vd_long_front_bumper_pos = (int16_t)ri_vd_long_front_bumper_pos;
  ri_vd_long_rear_bumper_pos = unpack_left_shift_u16(src_p[4], 8u, 0x01u);
  ri_vd_long_rear_bumper_pos |= unpack_right_shift_u16(src_p[5], 0u, 0xffu);

  if ((ri_vd_long_rear_bumper_pos & (1u << 8)) != 0u) {
    ri_vd_long_rear_bumper_pos |= 0xfe00u;
  }

  dst_p->ri_vd_long_rear_bumper_pos = (int16_t)ri_vd_long_rear_bumper_pos;
  dst_p->ri_vd_mc = unpack_right_shift_u8(src_p[6], 0u, 0x0fu);
  dst_p->ri_vd_crc = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

  return (0);
}

uint8_t radar_input_veh_dim_ri_vd_max_width_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_input_veh_dim_ri_vd_max_width_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_input_veh_dim_ri_vd_max_width_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_input_veh_dim_ri_vd_min_width_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_input_veh_dim_ri_vd_min_width_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_input_veh_dim_ri_vd_min_width_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

int16_t radar_input_veh_dim_ri_vd_long_front_bumper_pos_encode(double value) { return (int16_t)(value / 0.03125); }

double radar_input_veh_dim_ri_vd_long_front_bumper_pos_decode(int16_t value) { return ((double)value * 0.03125); }

bool radar_input_veh_dim_ri_vd_long_front_bumper_pos_is_in_range(int16_t value) {
  return ((value >= -256) && (value <= 255));
}

int16_t radar_input_veh_dim_ri_vd_long_rear_bumper_pos_encode(double value) { return (int16_t)(value / 0.03125); }

double radar_input_veh_dim_ri_vd_long_rear_bumper_pos_decode(int16_t value) { return ((double)value * 0.03125); }

bool radar_input_veh_dim_ri_vd_long_rear_bumper_pos_is_in_range(int16_t value) {
  return ((value >= -256) && (value <= 255));
}

uint8_t radar_input_veh_dim_ri_vd_mc_encode(double value) { return (uint8_t)(value); }

double radar_input_veh_dim_ri_vd_mc_decode(uint8_t value) { return ((double)value); }

bool radar_input_veh_dim_ri_vd_mc_is_in_range(uint8_t value) { return (value <= 15u); }

uint8_t radar_input_veh_dim_ri_vd_crc_encode(double value) { return (uint8_t)(value); }

double radar_input_veh_dim_ri_vd_crc_decode(uint8_t value) { return ((double)value); }

bool radar_input_veh_dim_ri_vd_crc_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

int radar_input_wheel_info_pack(uint8_t *dst_p, const struct radar_input_wheel_info_t *src_p, size_t size) {
  if (size < 5u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 5);

  dst_p[0] |= pack_left_shift_u8(src_p->ri_wi_wheel_base, 0u, 0xffu);
  dst_p[1] |= pack_left_shift_u8(src_p->ri_wi_track_width, 0u, 0xffu);
  dst_p[2] |= pack_left_shift_u8(src_p->ri_wi_steering_angle_ratio, 0u, 0xffu);
  dst_p[3] |= pack_left_shift_u8(src_p->ri_wi_mc, 0u, 0x0fu);
  dst_p[4] |= pack_left_shift_u8(src_p->ri_wi_crc, 0u, 0xffu);

  return (5);
}

int radar_input_wheel_info_unpack(struct radar_input_wheel_info_t *dst_p, const uint8_t *src_p, size_t size) {
  if (size < 5u) {
    return (-EINVAL);
  }

  dst_p->ri_wi_wheel_base = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
  dst_p->ri_wi_track_width = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
  dst_p->ri_wi_steering_angle_ratio = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
  dst_p->ri_wi_mc = unpack_right_shift_u8(src_p[3], 0u, 0x0fu);
  dst_p->ri_wi_crc = unpack_right_shift_u8(src_p[4], 0u, 0xffu);

  return (0);
}

uint8_t radar_input_wheel_info_ri_wi_wheel_base_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_input_wheel_info_ri_wi_wheel_base_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_input_wheel_info_ri_wi_wheel_base_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_input_wheel_info_ri_wi_track_width_encode(double value) { return (uint8_t)(value / 0.03125); }

double radar_input_wheel_info_ri_wi_track_width_decode(uint8_t value) { return ((double)value * 0.03125); }

bool radar_input_wheel_info_ri_wi_track_width_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_input_wheel_info_ri_wi_steering_angle_ratio_encode(double value) { return (uint8_t)(value / 0.125); }

double radar_input_wheel_info_ri_wi_steering_angle_ratio_decode(uint8_t value) { return ((double)value * 0.125); }

bool radar_input_wheel_info_ri_wi_steering_angle_ratio_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_input_wheel_info_ri_wi_mc_encode(double value) { return (uint8_t)(value); }

double radar_input_wheel_info_ri_wi_mc_decode(uint8_t value) { return ((double)value); }

bool radar_input_wheel_info_ri_wi_mc_is_in_range(uint8_t value) { return (value <= 15u); }

uint8_t radar_input_wheel_info_ri_wi_crc_encode(double value) { return (uint8_t)(value); }

double radar_input_wheel_info_ri_wi_crc_decode(uint8_t value) { return ((double)value); }

bool radar_input_wheel_info_ri_wi_crc_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

int radar_input_mount_info_pack(uint8_t *dst_p, const struct radar_input_mount_info_t *src_p, size_t size) {
  uint16_t ri_mi_long_sensor_mount_to_rear_axle;
  uint16_t ri_mi_sensor_mount_angle;
  uint8_t ri_mi_lat_sensor_mount_to_center;

  if (size < 8u) {
    return (-EINVAL);
  }

  memset(&dst_p[0], 0, 8);

  ri_mi_lat_sensor_mount_to_center = (uint8_t)src_p->ri_mi_lat_sensor_mount_to_center;
  dst_p[0] |= pack_left_shift_u8(ri_mi_lat_sensor_mount_to_center, 1u, 0xfeu);
  ri_mi_long_sensor_mount_to_rear_axle = (uint16_t)src_p->ri_mi_long_sensor_mount_to_rear_axle;
  dst_p[0] |= pack_right_shift_u16(ri_mi_long_sensor_mount_to_rear_axle, 8u, 0x01u);
  dst_p[1] |= pack_left_shift_u16(ri_mi_long_sensor_mount_to_rear_axle, 0u, 0xffu);
  dst_p[2] |= pack_left_shift_u8(src_p->ri_mi_sensor_height, 0u, 0xffu);
  dst_p[3] |= pack_left_shift_u8(src_p->ri_mi_sensor_orientation, 7u, 0x80u);
  ri_mi_sensor_mount_angle = (uint16_t)src_p->ri_mi_sensor_mount_angle;
  dst_p[3] |= pack_right_shift_u16(ri_mi_sensor_mount_angle, 8u, 0x7fu);
  dst_p[4] |= pack_left_shift_u16(ri_mi_sensor_mount_angle, 0u, 0xffu);
  dst_p[6] |= pack_left_shift_u8(src_p->ri_mi_mc, 0u, 0x0fu);
  dst_p[7] |= pack_left_shift_u8(src_p->ri_mi_crc, 0u, 0xffu);

  return (8);
}

int radar_input_mount_info_unpack(struct radar_input_mount_info_t *dst_p, const uint8_t *src_p, size_t size) {
  uint16_t ri_mi_long_sensor_mount_to_rear_axle;
  uint16_t ri_mi_sensor_mount_angle;
  uint8_t ri_mi_lat_sensor_mount_to_center;

  if (size < 8u) {
    return (-EINVAL);
  }

  ri_mi_lat_sensor_mount_to_center = unpack_right_shift_u8(src_p[0], 1u, 0xfeu);

  if ((ri_mi_lat_sensor_mount_to_center & (1u << 6)) != 0u) {
    ri_mi_lat_sensor_mount_to_center |= 0x80u;
  }

  dst_p->ri_mi_lat_sensor_mount_to_center = (int8_t)ri_mi_lat_sensor_mount_to_center;
  ri_mi_long_sensor_mount_to_rear_axle = unpack_left_shift_u16(src_p[0], 8u, 0x01u);
  ri_mi_long_sensor_mount_to_rear_axle |= unpack_right_shift_u16(src_p[1], 0u, 0xffu);

  if ((ri_mi_long_sensor_mount_to_rear_axle & (1u << 8)) != 0u) {
    ri_mi_long_sensor_mount_to_rear_axle |= 0xfe00u;
  }

  dst_p->ri_mi_long_sensor_mount_to_rear_axle = (int16_t)ri_mi_long_sensor_mount_to_rear_axle;
  dst_p->ri_mi_sensor_height = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
  dst_p->ri_mi_sensor_orientation = unpack_right_shift_u8(src_p[3], 7u, 0x80u);
  ri_mi_sensor_mount_angle = unpack_left_shift_u16(src_p[3], 8u, 0x7fu);
  ri_mi_sensor_mount_angle |= unpack_right_shift_u16(src_p[4], 0u, 0xffu);

  if ((ri_mi_sensor_mount_angle & (1u << 14)) != 0u) {
    ri_mi_sensor_mount_angle |= 0x8000u;
  }

  dst_p->ri_mi_sensor_mount_angle = (int16_t)ri_mi_sensor_mount_angle;
  dst_p->ri_mi_mc = unpack_right_shift_u8(src_p[6], 0u, 0x0fu);
  dst_p->ri_mi_crc = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

  return (0);
}

int8_t radar_input_mount_info_ri_mi_lat_sensor_mount_to_center_encode(double value) {
  return (int8_t)(value / 0.03125);
}

double radar_input_mount_info_ri_mi_lat_sensor_mount_to_center_decode(int8_t value) {
  return ((double)value * 0.03125);
}

bool radar_input_mount_info_ri_mi_lat_sensor_mount_to_center_is_in_range(int8_t value) {
  return ((value >= -64) && (value <= 63));
}

int16_t radar_input_mount_info_ri_mi_long_sensor_mount_to_rear_axle_encode(double value) {
  return (int16_t)(value / 0.03125);
}

double radar_input_mount_info_ri_mi_long_sensor_mount_to_rear_axle_decode(int16_t value) {
  return ((double)value * 0.03125);
}

bool radar_input_mount_info_ri_mi_long_sensor_mount_to_rear_axle_is_in_range(int16_t value) {
  return ((value >= -256) && (value <= 255));
}

uint8_t radar_input_mount_info_ri_mi_sensor_height_encode(double value) { return (uint8_t)(value / 0.005); }

double radar_input_mount_info_ri_mi_sensor_height_decode(uint8_t value) { return ((double)value * 0.005); }

bool radar_input_mount_info_ri_mi_sensor_height_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}

uint8_t radar_input_mount_info_ri_mi_sensor_orientation_encode(double value) { return (uint8_t)(value); }

double radar_input_mount_info_ri_mi_sensor_orientation_decode(uint8_t value) { return ((double)value); }

bool radar_input_mount_info_ri_mi_sensor_orientation_is_in_range(uint8_t value) { return (value <= 1u); }

int16_t radar_input_mount_info_ri_mi_sensor_mount_angle_encode(double value) { return (int16_t)(value / 0.0002); }

double radar_input_mount_info_ri_mi_sensor_mount_angle_decode(int16_t value) { return ((double)value * 0.0002); }

bool radar_input_mount_info_ri_mi_sensor_mount_angle_is_in_range(int16_t value) {
  return ((value >= -16384) && (value <= 16383));
}

uint8_t radar_input_mount_info_ri_mi_mc_encode(double value) { return (uint8_t)(value); }

double radar_input_mount_info_ri_mi_mc_decode(uint8_t value) { return ((double)value); }

bool radar_input_mount_info_ri_mi_mc_is_in_range(uint8_t value) { return (value <= 15u); }

uint8_t radar_input_mount_info_ri_mi_crc_encode(double value) { return (uint8_t)(value); }

double radar_input_mount_info_ri_mi_crc_decode(uint8_t value) { return ((double)value); }

bool radar_input_mount_info_ri_mi_crc_is_in_range(uint8_t value) {
  (void)value;

  return (true);
}
