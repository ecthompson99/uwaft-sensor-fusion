/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.2.0 Thu May 27 01:56:36 2021.
 */

#include <string.h>

#include "cav_pcm_csw.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) >> shift);
}

int emc_pcm_cav_interface_cav_long_ctrl_pack(
    uint8_t *dst_p,
    const struct emc_pcm_cav_interface_cav_long_ctrl_t *src_p,
    size_t size)
{
    uint8_t cav_long_accel;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->cav_to_pcm_long_rc, 6u, 0xc0u);
    dst_p[0] |= pack_left_shift_u8(src_p->cav_aeb_valid, 5u, 0x20u);
    dst_p[0] |= pack_left_shift_u8(src_p->cav_acc_valid, 4u, 0x10u);
    cav_long_accel = (uint8_t)src_p->cav_long_accel;
    dst_p[1] |= pack_left_shift_u8(cav_long_accel, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u32(src_p->cav_to_pcm_long_pv, 23u, 0xffu);
    dst_p[3] |= pack_right_shift_u32(src_p->cav_to_pcm_long_pv, 15u, 0xffu);
    dst_p[4] |= pack_right_shift_u32(src_p->cav_to_pcm_long_pv, 7u, 0xffu);
    dst_p[5] |= pack_left_shift_u32(src_p->cav_to_pcm_long_pv, 1u, 0xfeu);

    return (8);
}

int emc_pcm_cav_interface_cav_long_ctrl_unpack(
    struct emc_pcm_cav_interface_cav_long_ctrl_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint8_t cav_long_accel;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->cav_to_pcm_long_rc = unpack_right_shift_u8(src_p[0], 6u, 0xc0u);
    dst_p->cav_aeb_valid = unpack_right_shift_u8(src_p[0], 5u, 0x20u);
    dst_p->cav_acc_valid = unpack_right_shift_u8(src_p[0], 4u, 0x10u);
    cav_long_accel = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->cav_long_accel = (int8_t)cav_long_accel;
    dst_p->cav_to_pcm_long_pv = unpack_left_shift_u32(src_p[2], 23u, 0xffu);
    dst_p->cav_to_pcm_long_pv |= unpack_left_shift_u32(src_p[3], 15u, 0xffu);
    dst_p->cav_to_pcm_long_pv |= unpack_left_shift_u32(src_p[4], 7u, 0xffu);
    dst_p->cav_to_pcm_long_pv |= unpack_right_shift_u32(src_p[5], 1u, 0xfeu);

    return (0);
}

uint8_t emc_pcm_cav_interface_cav_long_ctrl_cav_to_pcm_long_rc_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_cav_long_ctrl_cav_to_pcm_long_rc_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_cav_long_ctrl_cav_to_pcm_long_rc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t emc_pcm_cav_interface_cav_long_ctrl_cav_aeb_valid_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_cav_long_ctrl_cav_aeb_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_cav_long_ctrl_cav_aeb_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t emc_pcm_cav_interface_cav_long_ctrl_cav_acc_valid_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_cav_long_ctrl_cav_acc_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_cav_long_ctrl_cav_acc_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int8_t emc_pcm_cav_interface_cav_long_ctrl_cav_long_accel_encode(double value)
{
    return (int8_t)(value / 0.16);
}

double emc_pcm_cav_interface_cav_long_ctrl_cav_long_accel_decode(int8_t value)
{
    return ((double)value * 0.16);
}

bool emc_pcm_cav_interface_cav_long_ctrl_cav_long_accel_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

uint32_t emc_pcm_cav_interface_cav_long_ctrl_cav_to_pcm_long_pv_encode(double value)
{
    return (uint32_t)(value);
}

double emc_pcm_cav_interface_cav_long_ctrl_cav_to_pcm_long_pv_decode(uint32_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_cav_long_ctrl_cav_to_pcm_long_pv_is_in_range(uint32_t value)
{
    return (value <= 2147483647u);
}

int emc_pcm_cav_interface_cav_lateral_ctrl_pack(
    uint8_t *dst_p,
    const struct emc_pcm_cav_interface_cav_lateral_ctrl_t *src_p,
    size_t size)
{
    uint16_t cav_lcc_str_ang;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_right_shift_u32(src_p->cav_to_pcm_lat_pv, 23u, 0xffu);
    dst_p[1] |= pack_right_shift_u32(src_p->cav_to_pcm_lat_pv, 15u, 0xffu);
    dst_p[2] |= pack_right_shift_u32(src_p->cav_to_pcm_lat_pv, 7u, 0xffu);
    dst_p[3] |= pack_left_shift_u32(src_p->cav_to_pcm_lat_pv, 1u, 0xfeu);
    dst_p[3] |= pack_left_shift_u8(src_p->cav_lcc_valid, 0u, 0x01u);
    cav_lcc_str_ang = (uint16_t)src_p->cav_lcc_str_ang;
    dst_p[4] |= pack_right_shift_u16(cav_lcc_str_ang, 4u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(cav_lcc_str_ang, 4u, 0xf0u);
    dst_p[5] |= pack_left_shift_u8(src_p->cav_cav_sys_alive, 0u, 0x0fu);
    dst_p[6] |= pack_left_shift_u8(src_p->cav_to_pcm_lat_rc, 6u, 0xc0u);

    return (8);
}

int emc_pcm_cav_interface_cav_lateral_ctrl_unpack(
    struct emc_pcm_cav_interface_cav_lateral_ctrl_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t cav_lcc_str_ang;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->cav_to_pcm_lat_pv = unpack_left_shift_u32(src_p[0], 23u, 0xffu);
    dst_p->cav_to_pcm_lat_pv |= unpack_left_shift_u32(src_p[1], 15u, 0xffu);
    dst_p->cav_to_pcm_lat_pv |= unpack_left_shift_u32(src_p[2], 7u, 0xffu);
    dst_p->cav_to_pcm_lat_pv |= unpack_right_shift_u32(src_p[3], 1u, 0xfeu);
    dst_p->cav_lcc_valid = unpack_right_shift_u8(src_p[3], 0u, 0x01u);
    cav_lcc_str_ang = unpack_left_shift_u16(src_p[4], 4u, 0xffu);
    cav_lcc_str_ang |= unpack_right_shift_u16(src_p[5], 4u, 0xf0u);

    if ((cav_lcc_str_ang & (1u << 11)) != 0u) {
        cav_lcc_str_ang |= 0xf000u;
    }

    dst_p->cav_lcc_str_ang = (int16_t)cav_lcc_str_ang;
    dst_p->cav_cav_sys_alive = unpack_right_shift_u8(src_p[5], 0u, 0x0fu);
    dst_p->cav_to_pcm_lat_rc = unpack_right_shift_u8(src_p[6], 6u, 0xc0u);

    return (0);
}

uint32_t emc_pcm_cav_interface_cav_lateral_ctrl_cav_to_pcm_lat_pv_encode(double value)
{
    return (uint32_t)(value);
}

double emc_pcm_cav_interface_cav_lateral_ctrl_cav_to_pcm_lat_pv_decode(uint32_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_cav_lateral_ctrl_cav_to_pcm_lat_pv_is_in_range(uint32_t value)
{
    return (value <= 2147483647u);
}

uint8_t emc_pcm_cav_interface_cav_lateral_ctrl_cav_lcc_valid_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_cav_lateral_ctrl_cav_lcc_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_cav_lateral_ctrl_cav_lcc_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int16_t emc_pcm_cav_interface_cav_lateral_ctrl_cav_lcc_str_ang_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_pcm_cav_interface_cav_lateral_ctrl_cav_lcc_str_ang_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_pcm_cav_interface_cav_lateral_ctrl_cav_lcc_str_ang_is_in_range(int16_t value)
{
    return ((value >= -2048) && (value <= 2047));
}

uint8_t emc_pcm_cav_interface_cav_lateral_ctrl_cav_cav_sys_alive_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_cav_lateral_ctrl_cav_cav_sys_alive_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_cav_lateral_ctrl_cav_cav_sys_alive_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t emc_pcm_cav_interface_cav_lateral_ctrl_cav_to_pcm_lat_rc_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_cav_lateral_ctrl_cav_to_pcm_lat_rc_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_cav_lateral_ctrl_cav_to_pcm_lat_rc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int emc_pcm_cav_interface_pcm_to_cav_3_pack(
    uint8_t *dst_p,
    const struct emc_pcm_cav_interface_pcm_to_cav_3_t *src_p,
    size_t size)
{
    uint16_t yaw_rate;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    yaw_rate = (uint16_t)src_p->yaw_rate;
    dst_p[0] |= pack_right_shift_u16(yaw_rate, 4u, 0xffu);
    dst_p[1] |= pack_left_shift_u16(yaw_rate, 4u, 0xf0u);
    dst_p[7] |= pack_left_shift_u8(src_p->pcm_to_cav3_rc, 0u, 0x03u);

    return (8);
}

int emc_pcm_cav_interface_pcm_to_cav_3_unpack(
    struct emc_pcm_cav_interface_pcm_to_cav_3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t yaw_rate;

    if (size < 8u) {
        return (-EINVAL);
    }

    yaw_rate = unpack_left_shift_u16(src_p[0], 4u, 0xffu);
    yaw_rate |= unpack_right_shift_u16(src_p[1], 4u, 0xf0u);

    if ((yaw_rate & (1u << 11)) != 0u) {
        yaw_rate |= 0xf000u;
    }

    dst_p->yaw_rate = (int16_t)yaw_rate;
    dst_p->pcm_to_cav3_rc = unpack_right_shift_u8(src_p[7], 0u, 0x03u);

    return (0);
}

int16_t emc_pcm_cav_interface_pcm_to_cav_3_yaw_rate_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double emc_pcm_cav_interface_pcm_to_cav_3_yaw_rate_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool emc_pcm_cav_interface_pcm_to_cav_3_yaw_rate_is_in_range(int16_t value)
{
    return ((value >= -2016) && (value <= 2032));
}

uint8_t emc_pcm_cav_interface_pcm_to_cav_3_pcm_to_cav3_rc_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_3_pcm_to_cav3_rc_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_3_pcm_to_cav3_rc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int emc_pcm_cav_interface_pcm_to_cav_2_pack(
    uint8_t *dst_p,
    const struct emc_pcm_cav_interface_pcm_to_cav_2_t *src_p,
    size_t size)
{
    uint8_t acc_st_spd;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->acc_active, 0u, 0x03u);
    acc_st_spd = (uint8_t)src_p->acc_st_spd;
    dst_p[1] |= pack_left_shift_u8(acc_st_spd, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->pcm_to_cav2_rc, 0u, 0x03u);

    return (8);
}

int emc_pcm_cav_interface_pcm_to_cav_2_unpack(
    struct emc_pcm_cav_interface_pcm_to_cav_2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint8_t acc_st_spd;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->acc_active = unpack_right_shift_u8(src_p[0], 0u, 0x03u);
    acc_st_spd = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->acc_st_spd = (int8_t)acc_st_spd;
    dst_p->pcm_to_cav2_rc = unpack_right_shift_u8(src_p[7], 0u, 0x03u);

    return (0);
}

uint8_t emc_pcm_cav_interface_pcm_to_cav_2_acc_active_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_2_acc_active_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_2_acc_active_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int8_t emc_pcm_cav_interface_pcm_to_cav_2_acc_st_spd_encode(double value)
{
    return (int8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_2_acc_st_spd_decode(int8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_2_acc_st_spd_is_in_range(int8_t value)
{
    return ((value >= -64) && (value <= 63));
}

uint8_t emc_pcm_cav_interface_pcm_to_cav_2_pcm_to_cav2_rc_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_2_pcm_to_cav2_rc_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_2_pcm_to_cav2_rc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int emc_pcm_cav_interface_pcm_to_cav_1_pack(
    uint8_t *dst_p,
    const struct emc_pcm_cav_interface_pcm_to_cav_1_t *src_p,
    size_t size)
{
    uint16_t pcm_str_ang;
    uint8_t pcm_veh_spd;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->pcm_to_cav1_rc, 6u, 0xc0u);
    dst_p[0] |= pack_left_shift_u8(src_p->pcm_lcc_allowed, 5u, 0x20u);
    dst_p[0] |= pack_left_shift_u8(src_p->pcm_acc_allowed, 4u, 0x10u);
    dst_p[0] |= pack_left_shift_u8(src_p->pcm_aeb_allowed, 3u, 0x08u);
    pcm_veh_spd = (uint8_t)src_p->pcm_veh_spd;
    dst_p[1] |= pack_left_shift_u8(pcm_veh_spd, 0u, 0xffu);
    pcm_str_ang = (uint16_t)src_p->pcm_str_ang;
    dst_p[2] |= pack_right_shift_u16(pcm_str_ang, 4u, 0xffu);
    dst_p[3] |= pack_left_shift_u16(pcm_str_ang, 4u, 0xf0u);
    dst_p[3] |= pack_left_shift_u8(src_p->pcm_hsc_alive, 0u, 0x0fu);

    return (8);
}

int emc_pcm_cav_interface_pcm_to_cav_1_unpack(
    struct emc_pcm_cav_interface_pcm_to_cav_1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t pcm_str_ang;
    uint8_t pcm_veh_spd;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->pcm_to_cav1_rc = unpack_right_shift_u8(src_p[0], 6u, 0xc0u);
    dst_p->pcm_lcc_allowed = unpack_right_shift_u8(src_p[0], 5u, 0x20u);
    dst_p->pcm_acc_allowed = unpack_right_shift_u8(src_p[0], 4u, 0x10u);
    dst_p->pcm_aeb_allowed = unpack_right_shift_u8(src_p[0], 3u, 0x08u);
    pcm_veh_spd = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->pcm_veh_spd = (int8_t)pcm_veh_spd;
    pcm_str_ang = unpack_left_shift_u16(src_p[2], 4u, 0xffu);
    pcm_str_ang |= unpack_right_shift_u16(src_p[3], 4u, 0xf0u);

    if ((pcm_str_ang & (1u << 11)) != 0u) {
        pcm_str_ang |= 0xf000u;
    }

    dst_p->pcm_str_ang = (int16_t)pcm_str_ang;
    dst_p->pcm_hsc_alive = unpack_right_shift_u8(src_p[3], 0u, 0x0fu);

    return (0);
}

uint8_t emc_pcm_cav_interface_pcm_to_cav_1_pcm_to_cav1_rc_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_1_pcm_to_cav1_rc_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_1_pcm_to_cav1_rc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t emc_pcm_cav_interface_pcm_to_cav_1_pcm_lcc_allowed_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_1_pcm_lcc_allowed_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_1_pcm_lcc_allowed_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t emc_pcm_cav_interface_pcm_to_cav_1_pcm_acc_allowed_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_1_pcm_acc_allowed_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_1_pcm_acc_allowed_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t emc_pcm_cav_interface_pcm_to_cav_1_pcm_aeb_allowed_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_1_pcm_aeb_allowed_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_1_pcm_aeb_allowed_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int8_t emc_pcm_cav_interface_pcm_to_cav_1_pcm_veh_spd_encode(double value)
{
    return (int8_t)(value / 0.5);
}

double emc_pcm_cav_interface_pcm_to_cav_1_pcm_veh_spd_decode(int8_t value)
{
    return ((double)value * 0.5);
}

bool emc_pcm_cav_interface_pcm_to_cav_1_pcm_veh_spd_is_in_range(int8_t value)
{
    (void)value;

    return (true);
}

int16_t emc_pcm_cav_interface_pcm_to_cav_1_pcm_str_ang_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_pcm_cav_interface_pcm_to_cav_1_pcm_str_ang_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_pcm_cav_interface_pcm_to_cav_1_pcm_str_ang_is_in_range(int16_t value)
{
    return ((value >= -2048) && (value <= 2047));
}

uint8_t emc_pcm_cav_interface_pcm_to_cav_1_pcm_hsc_alive_encode(double value)
{
    return (uint8_t)(value);
}

double emc_pcm_cav_interface_pcm_to_cav_1_pcm_hsc_alive_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_pcm_cav_interface_pcm_to_cav_1_pcm_hsc_alive_is_in_range(uint8_t value)
{
    return (value <= 15u);
}
