/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.3.0 Tue Oct 27 19:40:04 2020.
 */

#include <string.h>

#include "ext_log_data.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

int ext_log_data_aws_display_pack(
    uint8_t *dst_p,
    const struct ext_log_data_aws_display_t *src_p,
    size_t size)
{
    uint8_t ped_fcw;
    uint8_t ped_in_dz;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->sound_type, 0u, 0x07u);
    dst_p[0] |= pack_left_shift_u8(src_p->dusk_time_indicator, 3u, 0x08u);
    dst_p[0] |= pack_left_shift_u8(src_p->night_time_indicator, 4u, 0x10u);
    dst_p[0] |= pack_left_shift_u8(src_p->suppress, 7u, 0x80u);
    dst_p[2] |= pack_left_shift_u8(src_p->headway_valid, 0u, 0x01u);
    dst_p[2] |= pack_left_shift_u8(src_p->headway_measurement, 1u, 0xfeu);
    dst_p[4] |= pack_left_shift_u8(src_p->lanes_on, 0u, 0x01u);
    dst_p[4] |= pack_left_shift_u8(src_p->left_ldw_on, 1u, 0x02u);
    dst_p[4] |= pack_left_shift_u8(src_p->right_ldw_on, 2u, 0x04u);
    dst_p[4] |= pack_left_shift_u8(src_p->fcw_on, 3u, 0x08u);
    dst_p[4] |= pack_left_shift_u8(src_p->left_crossing, 4u, 0x10u);
    dst_p[4] |= pack_left_shift_u8(src_p->right_crossing, 5u, 0x20u);
    dst_p[4] |= pack_left_shift_u8(src_p->maintenance, 6u, 0x40u);
    dst_p[4] |= pack_left_shift_u8(src_p->failsafe, 7u, 0x80u);
    ped_fcw = (uint8_t)src_p->ped_fcw;
    dst_p[5] |= pack_left_shift_u8(ped_fcw, 1u, 0x02u);
    ped_in_dz = (uint8_t)src_p->ped_in_dz;
    dst_p[5] |= pack_left_shift_u8(ped_in_dz, 2u, 0x04u);
    dst_p[7] |= pack_left_shift_u8(src_p->headway_warning_level, 0u, 0x03u);

    return (8);
}

int ext_log_data_aws_display_unpack(
    struct ext_log_data_aws_display_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint8_t ped_fcw;
    uint8_t ped_in_dz;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->sound_type = unpack_right_shift_u8(src_p[0], 0u, 0x07u);
    dst_p->dusk_time_indicator = unpack_right_shift_u8(src_p[0], 3u, 0x08u);
    dst_p->night_time_indicator = unpack_right_shift_u8(src_p[0], 4u, 0x10u);
    dst_p->suppress = unpack_right_shift_u8(src_p[0], 7u, 0x80u);
    dst_p->headway_valid = unpack_right_shift_u8(src_p[2], 0u, 0x01u);
    dst_p->headway_measurement = unpack_right_shift_u8(src_p[2], 1u, 0xfeu);
    dst_p->lanes_on = unpack_right_shift_u8(src_p[4], 0u, 0x01u);
    dst_p->left_ldw_on = unpack_right_shift_u8(src_p[4], 1u, 0x02u);
    dst_p->right_ldw_on = unpack_right_shift_u8(src_p[4], 2u, 0x04u);
    dst_p->fcw_on = unpack_right_shift_u8(src_p[4], 3u, 0x08u);
    dst_p->left_crossing = unpack_right_shift_u8(src_p[4], 4u, 0x10u);
    dst_p->right_crossing = unpack_right_shift_u8(src_p[4], 5u, 0x20u);
    dst_p->maintenance = unpack_right_shift_u8(src_p[4], 6u, 0x40u);
    dst_p->failsafe = unpack_right_shift_u8(src_p[4], 7u, 0x80u);
    ped_fcw = unpack_right_shift_u8(src_p[5], 1u, 0x02u);

    if ((ped_fcw & (1u << 0)) != 0u) {
        ped_fcw |= 0xfeu;
    }

    dst_p->ped_fcw = (int8_t)ped_fcw;
    ped_in_dz = unpack_right_shift_u8(src_p[5], 2u, 0x04u);

    if ((ped_in_dz & (1u << 0)) != 0u) {
        ped_in_dz |= 0xfeu;
    }

    dst_p->ped_in_dz = (int8_t)ped_in_dz;
    dst_p->headway_warning_level = unpack_right_shift_u8(src_p[7], 0u, 0x03u);

    return (0);
}

uint8_t ext_log_data_aws_display_sound_type_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_sound_type_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_sound_type_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ext_log_data_aws_display_dusk_time_indicator_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_dusk_time_indicator_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_dusk_time_indicator_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_night_time_indicator_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_night_time_indicator_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_night_time_indicator_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_suppress_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_suppress_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_suppress_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_headway_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_headway_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_headway_valid_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_headway_measurement_encode(double value)
{
    return (uint8_t)(value / 0.1);
}

double ext_log_data_aws_display_headway_measurement_decode(uint8_t value)
{
    return ((double)value * 0.1);
}

bool ext_log_data_aws_display_headway_measurement_is_in_range(uint8_t value)
{
    return (value <= 99u);
}

uint8_t ext_log_data_aws_display_lanes_on_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_lanes_on_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_lanes_on_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_left_ldw_on_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_left_ldw_on_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_left_ldw_on_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_right_ldw_on_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_right_ldw_on_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_right_ldw_on_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_fcw_on_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_fcw_on_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_fcw_on_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_left_crossing_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_left_crossing_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_left_crossing_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_right_crossing_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_right_crossing_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_right_crossing_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_maintenance_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_maintenance_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_maintenance_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_aws_display_failsafe_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_failsafe_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_failsafe_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int8_t ext_log_data_aws_display_ped_fcw_encode(double value)
{
    return (int8_t)(value);
}

double ext_log_data_aws_display_ped_fcw_decode(int8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_ped_fcw_is_in_range(int8_t value)
{
    return ((value >= -1) && (value <= 0));
}

int8_t ext_log_data_aws_display_ped_in_dz_encode(double value)
{
    return (int8_t)(value);
}

double ext_log_data_aws_display_ped_in_dz_decode(int8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_ped_in_dz_is_in_range(int8_t value)
{
    return ((value >= -1) && (value <= 0));
}

uint8_t ext_log_data_aws_display_headway_warning_level_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_aws_display_headway_warning_level_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_aws_display_headway_warning_level_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int ext_log_data_lka_right_lane_b_pack(
    uint8_t *dst_p,
    const struct ext_log_data_lka_right_lane_b_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(src_p->heading_angle, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(src_p->heading_angle, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->view_range, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(src_p->view_range, 8u, 0x7fu);
    dst_p[3] |= pack_left_shift_u8(src_p->view_range_availability, 7u, 0x80u);

    return (8);
}

int ext_log_data_lka_right_lane_b_unpack(
    struct ext_log_data_lka_right_lane_b_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->heading_angle = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    dst_p->heading_angle |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->view_range = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    dst_p->view_range |= unpack_left_shift_u16(src_p[3], 8u, 0x7fu);
    dst_p->view_range_availability = unpack_right_shift_u8(src_p[3], 7u, 0x80u);

    return (0);
}

uint16_t ext_log_data_lka_right_lane_b_heading_angle_encode(double value)
{
    return (uint16_t)((value - -31.9990234375) / 0.0009765625);
}

double ext_log_data_lka_right_lane_b_heading_angle_decode(uint16_t value)
{
    return (((double)value * 0.0009765625) + -31.9990234375);
}

bool ext_log_data_lka_right_lane_b_heading_angle_is_in_range(uint16_t value)
{
    return ((value >= 32401u) && (value <= 33132u));
}

uint16_t ext_log_data_lka_right_lane_b_view_range_encode(double value)
{
    return (uint16_t)(value / 0.00390625);
}

double ext_log_data_lka_right_lane_b_view_range_decode(uint16_t value)
{
    return ((double)value * 0.00390625);
}

bool ext_log_data_lka_right_lane_b_view_range_is_in_range(uint16_t value)
{
    return (value <= 32767u);
}

uint8_t ext_log_data_lka_right_lane_b_view_range_availability_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lka_right_lane_b_view_range_availability_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lka_right_lane_b_view_range_availability_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int ext_log_data_lka_left_lane_b_pack(
    uint8_t *dst_p,
    const struct ext_log_data_lka_left_lane_b_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(src_p->heading_angle, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(src_p->heading_angle, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->view_range, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(src_p->view_range, 8u, 0x7fu);
    dst_p[3] |= pack_left_shift_u8(src_p->view_range_availability, 7u, 0x80u);

    return (8);
}

int ext_log_data_lka_left_lane_b_unpack(
    struct ext_log_data_lka_left_lane_b_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->heading_angle = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    dst_p->heading_angle |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->view_range = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    dst_p->view_range |= unpack_left_shift_u16(src_p[3], 8u, 0x7fu);
    dst_p->view_range_availability = unpack_right_shift_u8(src_p[3], 7u, 0x80u);

    return (0);
}

uint16_t ext_log_data_lka_left_lane_b_heading_angle_encode(double value)
{
    return (uint16_t)((value - -31.9990234375) / 0.0009765625);
}

double ext_log_data_lka_left_lane_b_heading_angle_decode(uint16_t value)
{
    return (((double)value * 0.0009765625) + -31.9990234375);
}

bool ext_log_data_lka_left_lane_b_heading_angle_is_in_range(uint16_t value)
{
    return ((value >= 32401u) && (value <= 33132u));
}

uint16_t ext_log_data_lka_left_lane_b_view_range_encode(double value)
{
    return (uint16_t)(value / 0.00390625);
}

double ext_log_data_lka_left_lane_b_view_range_decode(uint16_t value)
{
    return ((double)value * 0.00390625);
}

bool ext_log_data_lka_left_lane_b_view_range_is_in_range(uint16_t value)
{
    return (value <= 32767u);
}

uint8_t ext_log_data_lka_left_lane_b_view_range_availability_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lka_left_lane_b_view_range_availability_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lka_left_lane_b_view_range_availability_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int ext_log_data_lka_right_lane_a_pack(
    uint8_t *dst_p,
    const struct ext_log_data_lka_right_lane_a_t *src_p,
    size_t size)
{
    uint16_t position;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->lane_type, 0u, 0x0fu);
    dst_p[0] |= pack_left_shift_u8(src_p->quality, 4u, 0x30u);
    dst_p[0] |= pack_left_shift_u8(src_p->model_degree, 6u, 0xc0u);
    position = (uint16_t)src_p->position;
    dst_p[1] |= pack_left_shift_u16(position, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(position, 8u, 0xffu);
    dst_p[3] |= pack_left_shift_u16(src_p->curvature, 0u, 0xffu);
    dst_p[4] |= pack_right_shift_u16(src_p->curvature, 8u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(src_p->curvature_derivative, 0u, 0xffu);
    dst_p[6] |= pack_right_shift_u16(src_p->curvature_derivative, 8u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->width_right_marking, 0u, 0xffu);

    return (8);
}

int ext_log_data_lka_right_lane_a_unpack(
    struct ext_log_data_lka_right_lane_a_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t position;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->lane_type = unpack_right_shift_u8(src_p[0], 0u, 0x0fu);
    dst_p->quality = unpack_right_shift_u8(src_p[0], 4u, 0x30u);
    dst_p->model_degree = unpack_right_shift_u8(src_p[0], 6u, 0xc0u);
    position = unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    position |= unpack_left_shift_u16(src_p[2], 8u, 0xffu);
    dst_p->position = (int16_t)position;
    dst_p->curvature = unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    dst_p->curvature |= unpack_left_shift_u16(src_p[4], 8u, 0xffu);
    dst_p->curvature_derivative = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
    dst_p->curvature_derivative |= unpack_left_shift_u16(src_p[6], 8u, 0xffu);
    dst_p->width_right_marking = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t ext_log_data_lka_right_lane_a_lane_type_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lka_right_lane_a_lane_type_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lka_right_lane_a_lane_type_is_in_range(uint8_t value)
{
    return (value <= 6u);
}

uint8_t ext_log_data_lka_right_lane_a_quality_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lka_right_lane_a_quality_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lka_right_lane_a_quality_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t ext_log_data_lka_right_lane_a_model_degree_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lka_right_lane_a_model_degree_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lka_right_lane_a_model_degree_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int16_t ext_log_data_lka_right_lane_a_position_encode(double value)
{
    return (int16_t)(value / 0.00390625);
}

double ext_log_data_lka_right_lane_a_position_decode(int16_t value)
{
    return ((double)value * 0.00390625);
}

bool ext_log_data_lka_right_lane_a_position_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint16_t ext_log_data_lka_right_lane_a_curvature_encode(double value)
{
    return (uint16_t)((value - -0.031999023438) / 9.76563E-7);
}

double ext_log_data_lka_right_lane_a_curvature_decode(uint16_t value)
{
    return (((double)value * 9.76563E-7) + -0.031999023438);
}

bool ext_log_data_lka_right_lane_a_curvature_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t ext_log_data_lka_right_lane_a_curvature_derivative_encode(double value)
{
    return (uint16_t)((value - -0.00012206658721) / 3.7252902985E-9);
}

double ext_log_data_lka_right_lane_a_curvature_derivative_decode(uint16_t value)
{
    return (((double)value * 3.7252902985E-9) + -0.00012206658721);
}

bool ext_log_data_lka_right_lane_a_curvature_derivative_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t ext_log_data_lka_right_lane_a_width_right_marking_encode(double value)
{
    return (uint8_t)(value / 0.01);
}

double ext_log_data_lka_right_lane_a_width_right_marking_decode(uint8_t value)
{
    return ((double)value * 0.01);
}

bool ext_log_data_lka_right_lane_a_width_right_marking_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ext_log_data_lka_left_lane_a_pack(
    uint8_t *dst_p,
    const struct ext_log_data_lka_left_lane_a_t *src_p,
    size_t size)
{
    uint16_t position;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->lane_type, 0u, 0x0fu);
    dst_p[0] |= pack_left_shift_u8(src_p->quality, 4u, 0x30u);
    dst_p[0] |= pack_left_shift_u8(src_p->model_degree, 6u, 0xc0u);
    position = (uint16_t)src_p->position;
    dst_p[1] |= pack_left_shift_u16(position, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(position, 8u, 0xffu);
    dst_p[3] |= pack_left_shift_u16(src_p->curvature, 0u, 0xffu);
    dst_p[4] |= pack_right_shift_u16(src_p->curvature, 8u, 0xffu);
    dst_p[5] |= pack_left_shift_u16(src_p->curvature_derivative, 0u, 0xffu);
    dst_p[6] |= pack_right_shift_u16(src_p->curvature_derivative, 8u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->width_right_marking, 0u, 0xffu);

    return (8);
}

int ext_log_data_lka_left_lane_a_unpack(
    struct ext_log_data_lka_left_lane_a_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t position;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->lane_type = unpack_right_shift_u8(src_p[0], 0u, 0x0fu);
    dst_p->quality = unpack_right_shift_u8(src_p[0], 4u, 0x30u);
    dst_p->model_degree = unpack_right_shift_u8(src_p[0], 6u, 0xc0u);
    position = unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    position |= unpack_left_shift_u16(src_p[2], 8u, 0xffu);
    dst_p->position = (int16_t)position;
    dst_p->curvature = unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    dst_p->curvature |= unpack_left_shift_u16(src_p[4], 8u, 0xffu);
    dst_p->curvature_derivative = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
    dst_p->curvature_derivative |= unpack_left_shift_u16(src_p[6], 8u, 0xffu);
    dst_p->width_right_marking = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t ext_log_data_lka_left_lane_a_lane_type_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lka_left_lane_a_lane_type_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lka_left_lane_a_lane_type_is_in_range(uint8_t value)
{
    return (value <= 6u);
}

uint8_t ext_log_data_lka_left_lane_a_quality_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lka_left_lane_a_quality_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lka_left_lane_a_quality_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t ext_log_data_lka_left_lane_a_model_degree_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lka_left_lane_a_model_degree_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lka_left_lane_a_model_degree_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int16_t ext_log_data_lka_left_lane_a_position_encode(double value)
{
    return (int16_t)(value / 0.00390625);
}

double ext_log_data_lka_left_lane_a_position_decode(int16_t value)
{
    return ((double)value * 0.00390625);
}

bool ext_log_data_lka_left_lane_a_position_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint16_t ext_log_data_lka_left_lane_a_curvature_encode(double value)
{
    return (uint16_t)((value - -0.031999023438) / 9.76563E-7);
}

double ext_log_data_lka_left_lane_a_curvature_decode(uint16_t value)
{
    return (((double)value * 9.76563E-7) + -0.031999023438);
}

bool ext_log_data_lka_left_lane_a_curvature_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t ext_log_data_lka_left_lane_a_curvature_derivative_encode(double value)
{
    return (uint16_t)((value - -0.00012206658721) / 3.7252902985E-9);
}

double ext_log_data_lka_left_lane_a_curvature_derivative_decode(uint16_t value)
{
    return (((double)value * 3.7252902985E-9) + -0.00012206658721);
}

bool ext_log_data_lka_left_lane_a_curvature_derivative_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t ext_log_data_lka_left_lane_a_width_right_marking_encode(double value)
{
    return (uint8_t)(value / 0.01);
}

double ext_log_data_lka_left_lane_a_width_right_marking_decode(uint8_t value)
{
    return ((double)value * 0.01);
}

bool ext_log_data_lka_left_lane_a_width_right_marking_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ext_log_data_lane_details_pack(
    uint8_t *dst_p,
    const struct ext_log_data_lane_details_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->position_in_lanes, 4u, 0xf0u);
    dst_p[0] |= pack_left_shift_u8(src_p->number_of_lanes, 0u, 0x0fu);
    dst_p[3] |= pack_left_shift_u8(src_p->left_guard_rail, 2u, 0x04u);
    dst_p[3] |= pack_left_shift_u8(src_p->right_guard_rail, 3u, 0x08u);
    dst_p[3] |= pack_left_shift_u8(src_p->construction_area, 4u, 0x10u);
    dst_p[3] |= pack_left_shift_u8(src_p->right_ldw_availability, 5u, 0x20u);
    dst_p[3] |= pack_left_shift_u8(src_p->left_ldw_availability, 6u, 0x40u);
    dst_p[4] |= pack_left_shift_u16(src_p->yaw_angle, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(src_p->yaw_angle, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(src_p->pitch_angle, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(src_p->pitch_angle, 8u, 0xffu);

    return (8);
}

int ext_log_data_lane_details_unpack(
    struct ext_log_data_lane_details_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->position_in_lanes = unpack_right_shift_u8(src_p[0], 4u, 0xf0u);
    dst_p->number_of_lanes = unpack_right_shift_u8(src_p[0], 0u, 0x0fu);
    dst_p->left_guard_rail = unpack_right_shift_u8(src_p[3], 2u, 0x04u);
    dst_p->right_guard_rail = unpack_right_shift_u8(src_p[3], 3u, 0x08u);
    dst_p->construction_area = unpack_right_shift_u8(src_p[3], 4u, 0x10u);
    dst_p->right_ldw_availability = unpack_right_shift_u8(src_p[3], 5u, 0x20u);
    dst_p->left_ldw_availability = unpack_right_shift_u8(src_p[3], 6u, 0x40u);
    dst_p->yaw_angle = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    dst_p->yaw_angle |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->pitch_angle = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    dst_p->pitch_angle |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

uint8_t ext_log_data_lane_details_position_in_lanes_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lane_details_position_in_lanes_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lane_details_position_in_lanes_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t ext_log_data_lane_details_number_of_lanes_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lane_details_number_of_lanes_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lane_details_number_of_lanes_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t ext_log_data_lane_details_left_guard_rail_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lane_details_left_guard_rail_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lane_details_left_guard_rail_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_lane_details_right_guard_rail_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lane_details_right_guard_rail_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lane_details_right_guard_rail_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_lane_details_construction_area_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lane_details_construction_area_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lane_details_construction_area_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_lane_details_right_ldw_availability_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lane_details_right_ldw_availability_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lane_details_right_ldw_availability_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_lane_details_left_ldw_availability_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_lane_details_left_ldw_availability_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_lane_details_left_ldw_availability_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t ext_log_data_lane_details_yaw_angle_encode(double value)
{
    return (uint16_t)((value - -31.999) / 0.000976563);
}

double ext_log_data_lane_details_yaw_angle_decode(uint16_t value)
{
    return (((double)value * 0.000976563) + -31.999);
}

bool ext_log_data_lane_details_yaw_angle_is_in_range(uint16_t value)
{
    return (value <= 65534u);
}

uint16_t ext_log_data_lane_details_pitch_angle_encode(double value)
{
    return (uint16_t)((value - -0.05) / 0.0000015259);
}

double ext_log_data_lane_details_pitch_angle_decode(uint16_t value)
{
    return (((double)value * 0.0000015259) + -0.05);
}

bool ext_log_data_lane_details_pitch_angle_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int ext_log_data_obstacle_data_c_pack(
    uint8_t *dst_p,
    const struct ext_log_data_obstacle_data_c_t *src_p,
    size_t size)
{
    uint16_t object_accel_x;
    uint16_t obstacle_angle;
    uint16_t obstacle_angle_rate;
    uint16_t obstacle_scale_change;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    obstacle_angle_rate = (uint16_t)src_p->obstacle_angle_rate;
    dst_p[0] |= pack_left_shift_u16(obstacle_angle_rate, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(obstacle_angle_rate, 8u, 0xffu);
    obstacle_scale_change = (uint16_t)src_p->obstacle_scale_change;
    dst_p[2] |= pack_left_shift_u16(obstacle_scale_change, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(obstacle_scale_change, 8u, 0xffu);
    object_accel_x = (uint16_t)src_p->object_accel_x;
    dst_p[4] |= pack_left_shift_u16(object_accel_x, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(object_accel_x, 8u, 0x03u);
    dst_p[5] |= pack_left_shift_u8(src_p->obstacle_replaced, 4u, 0x10u);
    obstacle_angle = (uint16_t)src_p->obstacle_angle;
    dst_p[6] |= pack_left_shift_u16(obstacle_angle, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(obstacle_angle, 8u, 0xffu);

    return (8);
}

int ext_log_data_obstacle_data_c_unpack(
    struct ext_log_data_obstacle_data_c_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t object_accel_x;
    uint16_t obstacle_angle;
    uint16_t obstacle_angle_rate;
    uint16_t obstacle_scale_change;

    if (size < 8u) {
        return (-EINVAL);
    }

    obstacle_angle_rate = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    obstacle_angle_rate |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->obstacle_angle_rate = (int16_t)obstacle_angle_rate;
    obstacle_scale_change = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    obstacle_scale_change |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->obstacle_scale_change = (int16_t)obstacle_scale_change;
    object_accel_x = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    object_accel_x |= unpack_left_shift_u16(src_p[5], 8u, 0x03u);

    if ((object_accel_x & (1u << 9)) != 0u) {
        object_accel_x |= 0xfc00u;
    }

    dst_p->object_accel_x = (int16_t)object_accel_x;
    dst_p->obstacle_replaced = unpack_right_shift_u8(src_p[5], 4u, 0x10u);
    obstacle_angle = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    obstacle_angle |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
    dst_p->obstacle_angle = (int16_t)obstacle_angle;

    return (0);
}

int16_t ext_log_data_obstacle_data_c_obstacle_angle_rate_encode(double value)
{
    return (int16_t)(value / 0.01);
}

double ext_log_data_obstacle_data_c_obstacle_angle_rate_decode(int16_t value)
{
    return ((double)value * 0.01);
}

bool ext_log_data_obstacle_data_c_obstacle_angle_rate_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t ext_log_data_obstacle_data_c_obstacle_scale_change_encode(double value)
{
    return (int16_t)(value / 0.0002);
}

double ext_log_data_obstacle_data_c_obstacle_scale_change_decode(int16_t value)
{
    return ((double)value * 0.0002);
}

bool ext_log_data_obstacle_data_c_obstacle_scale_change_is_in_range(int16_t value)
{
    return (value >= -32767);
}

int16_t ext_log_data_obstacle_data_c_object_accel_x_encode(double value)
{
    return (int16_t)(value / 0.03);
}

double ext_log_data_obstacle_data_c_object_accel_x_decode(int16_t value)
{
    return ((double)value * 0.03);
}

bool ext_log_data_obstacle_data_c_object_accel_x_is_in_range(int16_t value)
{
    return ((value >= -499) && (value <= 499));
}

uint8_t ext_log_data_obstacle_data_c_obstacle_replaced_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_c_obstacle_replaced_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_c_obstacle_replaced_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int16_t ext_log_data_obstacle_data_c_obstacle_angle_encode(double value)
{
    return (int16_t)(value / 0.01);
}

double ext_log_data_obstacle_data_c_obstacle_angle_decode(int16_t value)
{
    return ((double)value * 0.01);
}

bool ext_log_data_obstacle_data_c_obstacle_angle_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int ext_log_data_obstacle_data_b_pack(
    uint8_t *dst_p,
    const struct ext_log_data_obstacle_data_b_t *src_p,
    size_t size)
{
    uint16_t radar_vel_x;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->obstacle_lenght, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u8(src_p->obstacle_width, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u8(src_p->obstacle_age, 0u, 0xffu);
    dst_p[3] |= pack_left_shift_u8(src_p->obstacle_lane, 0u, 0x03u);
    dst_p[3] |= pack_left_shift_u8(src_p->cipv_flag, 2u, 0x04u);
    dst_p[3] |= pack_left_shift_u16(src_p->radar_pos_x, 4u, 0xf0u);
    dst_p[4] |= pack_right_shift_u16(src_p->radar_pos_x, 4u, 0xffu);
    radar_vel_x = (uint16_t)src_p->radar_vel_x;
    dst_p[5] |= pack_left_shift_u16(radar_vel_x, 0u, 0xffu);
    dst_p[6] |= pack_right_shift_u16(radar_vel_x, 8u, 0x0fu);
    dst_p[6] |= pack_left_shift_u8(src_p->radar_match_confidence, 4u, 0x70u);
    dst_p[7] |= pack_left_shift_u8(src_p->matched_radar_id, 0u, 0x7fu);

    return (8);
}

int ext_log_data_obstacle_data_b_unpack(
    struct ext_log_data_obstacle_data_b_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t radar_vel_x;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->obstacle_lenght = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->obstacle_width = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->obstacle_age = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
    dst_p->obstacle_lane = unpack_right_shift_u8(src_p[3], 0u, 0x03u);
    dst_p->cipv_flag = unpack_right_shift_u8(src_p[3], 2u, 0x04u);
    dst_p->radar_pos_x = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
    dst_p->radar_pos_x |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
    radar_vel_x = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
    radar_vel_x |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);

    if ((radar_vel_x & (1u << 11)) != 0u) {
        radar_vel_x |= 0xf000u;
    }

    dst_p->radar_vel_x = (int16_t)radar_vel_x;
    dst_p->radar_match_confidence = unpack_right_shift_u8(src_p[6], 4u, 0x70u);
    dst_p->matched_radar_id = unpack_right_shift_u8(src_p[7], 0u, 0x7fu);

    return (0);
}

uint8_t ext_log_data_obstacle_data_b_obstacle_lenght_encode(double value)
{
    return (uint8_t)(value / 0.5);
}

double ext_log_data_obstacle_data_b_obstacle_lenght_decode(uint8_t value)
{
    return ((double)value * 0.5);
}

bool ext_log_data_obstacle_data_b_obstacle_lenght_is_in_range(uint8_t value)
{
    return (value <= 63u);
}

uint8_t ext_log_data_obstacle_data_b_obstacle_width_encode(double value)
{
    return (uint8_t)(value / 0.05);
}

double ext_log_data_obstacle_data_b_obstacle_width_decode(uint8_t value)
{
    return ((double)value * 0.05);
}

bool ext_log_data_obstacle_data_b_obstacle_width_is_in_range(uint8_t value)
{
    return (value <= 250u);
}

uint8_t ext_log_data_obstacle_data_b_obstacle_age_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_b_obstacle_age_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_b_obstacle_age_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t ext_log_data_obstacle_data_b_obstacle_lane_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_b_obstacle_lane_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_b_obstacle_lane_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t ext_log_data_obstacle_data_b_cipv_flag_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_b_cipv_flag_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_b_cipv_flag_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint16_t ext_log_data_obstacle_data_b_radar_pos_x_encode(double value)
{
    return (uint16_t)(value / 0.0625);
}

double ext_log_data_obstacle_data_b_radar_pos_x_decode(uint16_t value)
{
    return ((double)value * 0.0625);
}

bool ext_log_data_obstacle_data_b_radar_pos_x_is_in_range(uint16_t value)
{
    return (value <= 4095u);
}

int16_t ext_log_data_obstacle_data_b_radar_vel_x_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double ext_log_data_obstacle_data_b_radar_vel_x_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool ext_log_data_obstacle_data_b_radar_vel_x_is_in_range(int16_t value)
{
    return ((value >= -2048) && (value <= 2048));
}

uint8_t ext_log_data_obstacle_data_b_radar_match_confidence_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_b_radar_match_confidence_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_b_radar_match_confidence_is_in_range(uint8_t value)
{
    return (value <= 5u);
}

uint8_t ext_log_data_obstacle_data_b_matched_radar_id_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_b_matched_radar_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_b_matched_radar_id_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int ext_log_data_obstacle_data_a_pack(
    uint8_t *dst_p,
    const struct ext_log_data_obstacle_data_a_t *src_p,
    size_t size)
{
    uint16_t obstacle_pos_y;
    uint16_t obstacle_vel_x;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->obstacle_id, 0u, 0xffu);
    dst_p[1] |= pack_left_shift_u16(src_p->obstacle_pos_x, 0u, 0xffu);
    dst_p[2] |= pack_right_shift_u16(src_p->obstacle_pos_x, 8u, 0x0fu);
    obstacle_pos_y = (uint16_t)src_p->obstacle_pos_y;
    dst_p[3] |= pack_left_shift_u16(obstacle_pos_y, 0u, 0xffu);
    dst_p[4] |= pack_right_shift_u16(obstacle_pos_y, 8u, 0x03u);
    dst_p[4] |= pack_left_shift_u8(src_p->blinker_info, 2u, 0x1cu);
    dst_p[4] |= pack_left_shift_u8(src_p->cut_in_and_out, 5u, 0xe0u);
    obstacle_vel_x = (uint16_t)src_p->obstacle_vel_x;
    dst_p[5] |= pack_left_shift_u16(obstacle_vel_x, 0u, 0xffu);
    dst_p[6] |= pack_right_shift_u16(obstacle_vel_x, 8u, 0x0fu);
    dst_p[6] |= pack_left_shift_u8(src_p->obstacle_type, 4u, 0x70u);
    dst_p[7] |= pack_left_shift_u8(src_p->obstacle_status, 0u, 0x07u);
    dst_p[7] |= pack_left_shift_u8(src_p->obstacle_brake_lights, 3u, 0x08u);
    dst_p[7] |= pack_left_shift_u8(src_p->obstacle_valid, 6u, 0xc0u);

    return (8);
}

int ext_log_data_obstacle_data_a_unpack(
    struct ext_log_data_obstacle_data_a_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t obstacle_pos_y;
    uint16_t obstacle_vel_x;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->obstacle_id = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->obstacle_pos_x = unpack_right_shift_u16(src_p[1], 0u, 0xffu);
    dst_p->obstacle_pos_x |= unpack_left_shift_u16(src_p[2], 8u, 0x0fu);
    obstacle_pos_y = unpack_right_shift_u16(src_p[3], 0u, 0xffu);
    obstacle_pos_y |= unpack_left_shift_u16(src_p[4], 8u, 0x03u);

    if ((obstacle_pos_y & (1u << 9)) != 0u) {
        obstacle_pos_y |= 0xfc00u;
    }

    dst_p->obstacle_pos_y = (int16_t)obstacle_pos_y;
    dst_p->blinker_info = unpack_right_shift_u8(src_p[4], 2u, 0x1cu);
    dst_p->cut_in_and_out = unpack_right_shift_u8(src_p[4], 5u, 0xe0u);
    obstacle_vel_x = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
    obstacle_vel_x |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);

    if ((obstacle_vel_x & (1u << 11)) != 0u) {
        obstacle_vel_x |= 0xf000u;
    }

    dst_p->obstacle_vel_x = (int16_t)obstacle_vel_x;
    dst_p->obstacle_type = unpack_right_shift_u8(src_p[6], 4u, 0x70u);
    dst_p->obstacle_status = unpack_right_shift_u8(src_p[7], 0u, 0x07u);
    dst_p->obstacle_brake_lights = unpack_right_shift_u8(src_p[7], 3u, 0x08u);
    dst_p->obstacle_valid = unpack_right_shift_u8(src_p[7], 6u, 0xc0u);

    return (0);
}

uint8_t ext_log_data_obstacle_data_a_obstacle_id_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_a_obstacle_id_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_a_obstacle_id_is_in_range(uint8_t value)
{
    return (value <= 63u);
}

uint16_t ext_log_data_obstacle_data_a_obstacle_pos_x_encode(double value)
{
    return (uint16_t)(value / 0.0625);
}

double ext_log_data_obstacle_data_a_obstacle_pos_x_decode(uint16_t value)
{
    return ((double)value * 0.0625);
}

bool ext_log_data_obstacle_data_a_obstacle_pos_x_is_in_range(uint16_t value)
{
    return (value <= 4000u);
}

int16_t ext_log_data_obstacle_data_a_obstacle_pos_y_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double ext_log_data_obstacle_data_a_obstacle_pos_y_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool ext_log_data_obstacle_data_a_obstacle_pos_y_is_in_range(int16_t value)
{
    return ((value >= -512) && (value <= 511));
}

uint8_t ext_log_data_obstacle_data_a_blinker_info_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_a_blinker_info_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_a_blinker_info_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ext_log_data_obstacle_data_a_cut_in_and_out_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_a_cut_in_and_out_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_a_cut_in_and_out_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

int16_t ext_log_data_obstacle_data_a_obstacle_vel_x_encode(double value)
{
    return (int16_t)(value / 0.0625);
}

double ext_log_data_obstacle_data_a_obstacle_vel_x_decode(int16_t value)
{
    return ((double)value * 0.0625);
}

bool ext_log_data_obstacle_data_a_obstacle_vel_x_is_in_range(int16_t value)
{
    return ((value >= -2046) && (value <= 2046));
}

uint8_t ext_log_data_obstacle_data_a_obstacle_type_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_a_obstacle_type_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_a_obstacle_type_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ext_log_data_obstacle_data_a_obstacle_status_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_a_obstacle_status_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_a_obstacle_status_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

uint8_t ext_log_data_obstacle_data_a_obstacle_brake_lights_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_a_obstacle_brake_lights_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_a_obstacle_brake_lights_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

uint8_t ext_log_data_obstacle_data_a_obstacle_valid_encode(double value)
{
    return (uint8_t)(value);
}

double ext_log_data_obstacle_data_a_obstacle_valid_decode(uint8_t value)
{
    return ((double)value);
}

bool ext_log_data_obstacle_data_a_obstacle_valid_is_in_range(uint8_t value)
{
    return (value <= 3u);
}
