/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.3.0 Tue Apr 20 21:49:08 2021.
 */

#include <string.h>

#include "emc_fusion_object.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

int emc_fusion_object_obj_track3_pack(
    uint8_t *dst_p,
    const struct emc_fusion_object_obj_track3_t *src_p,
    size_t size)
{
    uint16_t obj_trk3_lat_range;
    uint16_t obj_trk3_long_range;
    uint16_t obj_trk3_rel_lat_velocity;
    uint16_t obj_trk3_rel_long_accel;
    uint16_t obj_trk3_rel_long_vel;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk3_id, 3u, 0xf8u);
    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk3_lane, 1u, 0x06u);
    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk3_path, 0u, 0x01u);
    obj_trk3_lat_range = (uint16_t)src_p->obj_trk3_lat_range;
    dst_p[1] |= pack_right_shift_u16(obj_trk3_lat_range, 3u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(obj_trk3_lat_range, 5u, 0xe0u);
    dst_p[2] |= pack_left_shift_u8(src_p->obj_trk3_rc, 3u, 0x18u);
    obj_trk3_long_range = (uint16_t)src_p->obj_trk3_long_range;
    dst_p[2] |= pack_right_shift_u16(obj_trk3_long_range, 9u, 0x07u);
    dst_p[3] |= pack_right_shift_u16(obj_trk3_long_range, 1u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(obj_trk3_long_range, 7u, 0x80u);
    obj_trk3_rel_lat_velocity = (uint16_t)src_p->obj_trk3_rel_lat_velocity;
    dst_p[4] |= pack_right_shift_u16(obj_trk3_rel_lat_velocity, 4u, 0x7fu);
    dst_p[5] |= pack_left_shift_u16(obj_trk3_rel_lat_velocity, 4u, 0xf0u);
    obj_trk3_rel_long_accel = (uint16_t)src_p->obj_trk3_rel_long_accel;
    dst_p[5] |= pack_right_shift_u16(obj_trk3_rel_long_accel, 5u, 0x0fu);
    dst_p[6] |= pack_left_shift_u16(obj_trk3_rel_long_accel, 3u, 0xf8u);
    obj_trk3_rel_long_vel = (uint16_t)src_p->obj_trk3_rel_long_vel;
    dst_p[6] |= pack_right_shift_u16(obj_trk3_rel_long_vel, 8u, 0x07u);
    dst_p[7] |= pack_left_shift_u16(obj_trk3_rel_long_vel, 0u, 0xffu);

    return (8);
}

int emc_fusion_object_obj_track3_unpack(
    struct emc_fusion_object_obj_track3_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t obj_trk3_lat_range;
    uint16_t obj_trk3_long_range;
    uint16_t obj_trk3_rel_lat_velocity;
    uint16_t obj_trk3_rel_long_accel;
    uint16_t obj_trk3_rel_long_vel;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->obj_trk3_id = unpack_right_shift_u8(src_p[0], 3u, 0xf8u);
    dst_p->obj_trk3_lane = unpack_right_shift_u8(src_p[0], 1u, 0x06u);
    dst_p->obj_trk3_path = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
    obj_trk3_lat_range = unpack_left_shift_u16(src_p[1], 3u, 0xffu);
    obj_trk3_lat_range |= unpack_right_shift_u16(src_p[2], 5u, 0xe0u);

    if ((obj_trk3_lat_range & (1u << 10)) != 0u) {
        obj_trk3_lat_range |= 0xf800u;
    }

    dst_p->obj_trk3_lat_range = (int16_t)obj_trk3_lat_range;
    dst_p->obj_trk3_rc = unpack_right_shift_u8(src_p[2], 3u, 0x18u);
    obj_trk3_long_range = unpack_left_shift_u16(src_p[2], 9u, 0x07u);
    obj_trk3_long_range |= unpack_left_shift_u16(src_p[3], 1u, 0xffu);
    obj_trk3_long_range |= unpack_right_shift_u16(src_p[4], 7u, 0x80u);

    if ((obj_trk3_long_range & (1u << 11)) != 0u) {
        obj_trk3_long_range |= 0xf000u;
    }

    dst_p->obj_trk3_long_range = (int16_t)obj_trk3_long_range;
    obj_trk3_rel_lat_velocity = unpack_left_shift_u16(src_p[4], 4u, 0x7fu);
    obj_trk3_rel_lat_velocity |= unpack_right_shift_u16(src_p[5], 4u, 0xf0u);

    if ((obj_trk3_rel_lat_velocity & (1u << 10)) != 0u) {
        obj_trk3_rel_lat_velocity |= 0xf800u;
    }

    dst_p->obj_trk3_rel_lat_velocity = (int16_t)obj_trk3_rel_lat_velocity;
    obj_trk3_rel_long_accel = unpack_left_shift_u16(src_p[5], 5u, 0x0fu);
    obj_trk3_rel_long_accel |= unpack_right_shift_u16(src_p[6], 3u, 0xf8u);

    if ((obj_trk3_rel_long_accel & (1u << 8)) != 0u) {
        obj_trk3_rel_long_accel |= 0xfe00u;
    }

    dst_p->obj_trk3_rel_long_accel = (int16_t)obj_trk3_rel_long_accel;
    obj_trk3_rel_long_vel = unpack_left_shift_u16(src_p[6], 8u, 0x07u);
    obj_trk3_rel_long_vel |= unpack_right_shift_u16(src_p[7], 0u, 0xffu);

    if ((obj_trk3_rel_long_vel & (1u << 10)) != 0u) {
        obj_trk3_rel_long_vel |= 0xf800u;
    }

    dst_p->obj_trk3_rel_long_vel = (int16_t)obj_trk3_rel_long_vel;

    return (0);
}

uint8_t emc_fusion_object_obj_track3_obj_trk3_id_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track3_obj_trk3_id_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track3_obj_trk3_id_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t emc_fusion_object_obj_track3_obj_trk3_lane_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track3_obj_trk3_lane_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track3_obj_trk3_lane_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t emc_fusion_object_obj_track3_obj_trk3_path_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track3_obj_trk3_path_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track3_obj_trk3_path_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int16_t emc_fusion_object_obj_track3_obj_trk3_lat_range_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track3_obj_trk3_lat_range_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track3_obj_trk3_lat_range_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}

uint8_t emc_fusion_object_obj_track3_obj_trk3_rc_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track3_obj_trk3_rc_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track3_obj_trk3_rc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int16_t emc_fusion_object_obj_track3_obj_trk3_long_range_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track3_obj_trk3_long_range_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track3_obj_trk3_long_range_is_in_range(int16_t value)
{
    return ((value >= -2048) && (value <= 2047));
}

int16_t emc_fusion_object_obj_track3_obj_trk3_rel_lat_velocity_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track3_obj_trk3_rel_lat_velocity_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track3_obj_trk3_rel_lat_velocity_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}

int16_t emc_fusion_object_obj_track3_obj_trk3_rel_long_accel_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track3_obj_trk3_rel_long_accel_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track3_obj_trk3_rel_long_accel_is_in_range(int16_t value)
{
    return ((value >= -256) && (value <= 255));
}

int16_t emc_fusion_object_obj_track3_obj_trk3_rel_long_vel_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track3_obj_trk3_rel_long_vel_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track3_obj_trk3_rel_long_vel_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}

int emc_fusion_object_obj_track2_pack(
    uint8_t *dst_p,
    const struct emc_fusion_object_obj_track2_t *src_p,
    size_t size)
{
    uint16_t obj_trk2_lat_range;
    uint16_t obj_trk2_long_range;
    uint16_t obj_trk2_rel_lat_velocity;
    uint16_t obj_trk2_rel_long_accel;
    uint16_t obj_trk2_rel_long_vel;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk2_id, 3u, 0xf8u);
    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk2_lane, 1u, 0x06u);
    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk2_path, 0u, 0x01u);
    obj_trk2_lat_range = (uint16_t)src_p->obj_trk2_lat_range;
    dst_p[1] |= pack_right_shift_u16(obj_trk2_lat_range, 3u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(obj_trk2_lat_range, 5u, 0xe0u);
    dst_p[2] |= pack_left_shift_u8(src_p->obj_trk2_rc, 3u, 0x18u);
    obj_trk2_long_range = (uint16_t)src_p->obj_trk2_long_range;
    dst_p[2] |= pack_right_shift_u16(obj_trk2_long_range, 9u, 0x07u);
    dst_p[3] |= pack_right_shift_u16(obj_trk2_long_range, 1u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(obj_trk2_long_range, 7u, 0x80u);
    obj_trk2_rel_lat_velocity = (uint16_t)src_p->obj_trk2_rel_lat_velocity;
    dst_p[4] |= pack_right_shift_u16(obj_trk2_rel_lat_velocity, 4u, 0x7fu);
    dst_p[5] |= pack_left_shift_u16(obj_trk2_rel_lat_velocity, 4u, 0xf0u);
    obj_trk2_rel_long_accel = (uint16_t)src_p->obj_trk2_rel_long_accel;
    dst_p[5] |= pack_right_shift_u16(obj_trk2_rel_long_accel, 5u, 0x0fu);
    dst_p[6] |= pack_left_shift_u16(obj_trk2_rel_long_accel, 3u, 0xf8u);
    obj_trk2_rel_long_vel = (uint16_t)src_p->obj_trk2_rel_long_vel;
    dst_p[6] |= pack_right_shift_u16(obj_trk2_rel_long_vel, 8u, 0x07u);
    dst_p[7] |= pack_left_shift_u16(obj_trk2_rel_long_vel, 0u, 0xffu);

    return (8);
}

int emc_fusion_object_obj_track2_unpack(
    struct emc_fusion_object_obj_track2_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t obj_trk2_lat_range;
    uint16_t obj_trk2_long_range;
    uint16_t obj_trk2_rel_lat_velocity;
    uint16_t obj_trk2_rel_long_accel;
    uint16_t obj_trk2_rel_long_vel;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->obj_trk2_id = unpack_right_shift_u8(src_p[0], 3u, 0xf8u);
    dst_p->obj_trk2_lane = unpack_right_shift_u8(src_p[0], 1u, 0x06u);
    dst_p->obj_trk2_path = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
    obj_trk2_lat_range = unpack_left_shift_u16(src_p[1], 3u, 0xffu);
    obj_trk2_lat_range |= unpack_right_shift_u16(src_p[2], 5u, 0xe0u);

    if ((obj_trk2_lat_range & (1u << 10)) != 0u) {
        obj_trk2_lat_range |= 0xf800u;
    }

    dst_p->obj_trk2_lat_range = (int16_t)obj_trk2_lat_range;
    dst_p->obj_trk2_rc = unpack_right_shift_u8(src_p[2], 3u, 0x18u);
    obj_trk2_long_range = unpack_left_shift_u16(src_p[2], 9u, 0x07u);
    obj_trk2_long_range |= unpack_left_shift_u16(src_p[3], 1u, 0xffu);
    obj_trk2_long_range |= unpack_right_shift_u16(src_p[4], 7u, 0x80u);

    if ((obj_trk2_long_range & (1u << 11)) != 0u) {
        obj_trk2_long_range |= 0xf000u;
    }

    dst_p->obj_trk2_long_range = (int16_t)obj_trk2_long_range;
    obj_trk2_rel_lat_velocity = unpack_left_shift_u16(src_p[4], 4u, 0x7fu);
    obj_trk2_rel_lat_velocity |= unpack_right_shift_u16(src_p[5], 4u, 0xf0u);

    if ((obj_trk2_rel_lat_velocity & (1u << 10)) != 0u) {
        obj_trk2_rel_lat_velocity |= 0xf800u;
    }

    dst_p->obj_trk2_rel_lat_velocity = (int16_t)obj_trk2_rel_lat_velocity;
    obj_trk2_rel_long_accel = unpack_left_shift_u16(src_p[5], 5u, 0x0fu);
    obj_trk2_rel_long_accel |= unpack_right_shift_u16(src_p[6], 3u, 0xf8u);

    if ((obj_trk2_rel_long_accel & (1u << 8)) != 0u) {
        obj_trk2_rel_long_accel |= 0xfe00u;
    }

    dst_p->obj_trk2_rel_long_accel = (int16_t)obj_trk2_rel_long_accel;
    obj_trk2_rel_long_vel = unpack_left_shift_u16(src_p[6], 8u, 0x07u);
    obj_trk2_rel_long_vel |= unpack_right_shift_u16(src_p[7], 0u, 0xffu);

    if ((obj_trk2_rel_long_vel & (1u << 10)) != 0u) {
        obj_trk2_rel_long_vel |= 0xf800u;
    }

    dst_p->obj_trk2_rel_long_vel = (int16_t)obj_trk2_rel_long_vel;

    return (0);
}

uint8_t emc_fusion_object_obj_track2_obj_trk2_id_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track2_obj_trk2_id_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track2_obj_trk2_id_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t emc_fusion_object_obj_track2_obj_trk2_lane_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track2_obj_trk2_lane_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track2_obj_trk2_lane_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t emc_fusion_object_obj_track2_obj_trk2_path_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track2_obj_trk2_path_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track2_obj_trk2_path_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int16_t emc_fusion_object_obj_track2_obj_trk2_lat_range_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track2_obj_trk2_lat_range_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track2_obj_trk2_lat_range_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}

uint8_t emc_fusion_object_obj_track2_obj_trk2_rc_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track2_obj_trk2_rc_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track2_obj_trk2_rc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int16_t emc_fusion_object_obj_track2_obj_trk2_long_range_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track2_obj_trk2_long_range_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track2_obj_trk2_long_range_is_in_range(int16_t value)
{
    return ((value >= -2048) && (value <= 2047));
}

int16_t emc_fusion_object_obj_track2_obj_trk2_rel_lat_velocity_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track2_obj_trk2_rel_lat_velocity_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track2_obj_trk2_rel_lat_velocity_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}

int16_t emc_fusion_object_obj_track2_obj_trk2_rel_long_accel_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track2_obj_trk2_rel_long_accel_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track2_obj_trk2_rel_long_accel_is_in_range(int16_t value)
{
    return ((value >= -256) && (value <= 255));
}

int16_t emc_fusion_object_obj_track2_obj_trk2_rel_long_vel_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track2_obj_trk2_rel_long_vel_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track2_obj_trk2_rel_long_vel_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}

int emc_fusion_object_obj_track1_pack(
    uint8_t *dst_p,
    const struct emc_fusion_object_obj_track1_t *src_p,
    size_t size)
{
    uint16_t obj_trk1_lat_range;
    uint16_t obj_trk1_long_range;
    uint16_t obj_trk1_rel_lat_velocity;
    uint16_t obj_trk1_rel_long_accel;
    uint16_t obj_trk1_rel_long_vel;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk1_id, 3u, 0xf8u);
    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk1_lane, 1u, 0x06u);
    dst_p[0] |= pack_left_shift_u8(src_p->obj_trk1_path, 0u, 0x01u);
    obj_trk1_lat_range = (uint16_t)src_p->obj_trk1_lat_range;
    dst_p[1] |= pack_right_shift_u16(obj_trk1_lat_range, 3u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(obj_trk1_lat_range, 5u, 0xe0u);
    dst_p[2] |= pack_left_shift_u8(src_p->obj_trk1_rc, 3u, 0x18u);
    obj_trk1_long_range = (uint16_t)src_p->obj_trk1_long_range;
    dst_p[2] |= pack_right_shift_u16(obj_trk1_long_range, 9u, 0x07u);
    dst_p[3] |= pack_right_shift_u16(obj_trk1_long_range, 1u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(obj_trk1_long_range, 7u, 0x80u);
    obj_trk1_rel_lat_velocity = (uint16_t)src_p->obj_trk1_rel_lat_velocity;
    dst_p[4] |= pack_right_shift_u16(obj_trk1_rel_lat_velocity, 4u, 0x7fu);
    dst_p[5] |= pack_left_shift_u16(obj_trk1_rel_lat_velocity, 4u, 0xf0u);
    obj_trk1_rel_long_accel = (uint16_t)src_p->obj_trk1_rel_long_accel;
    dst_p[5] |= pack_right_shift_u16(obj_trk1_rel_long_accel, 5u, 0x0fu);
    dst_p[6] |= pack_left_shift_u16(obj_trk1_rel_long_accel, 3u, 0xf8u);
    obj_trk1_rel_long_vel = (uint16_t)src_p->obj_trk1_rel_long_vel;
    dst_p[6] |= pack_right_shift_u16(obj_trk1_rel_long_vel, 8u, 0x07u);
    dst_p[7] |= pack_left_shift_u16(obj_trk1_rel_long_vel, 0u, 0xffu);

    return (8);
}

int emc_fusion_object_obj_track1_unpack(
    struct emc_fusion_object_obj_track1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t obj_trk1_lat_range;
    uint16_t obj_trk1_long_range;
    uint16_t obj_trk1_rel_lat_velocity;
    uint16_t obj_trk1_rel_long_accel;
    uint16_t obj_trk1_rel_long_vel;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->obj_trk1_id = unpack_right_shift_u8(src_p[0], 3u, 0xf8u);
    dst_p->obj_trk1_lane = unpack_right_shift_u8(src_p[0], 1u, 0x06u);
    dst_p->obj_trk1_path = unpack_right_shift_u8(src_p[0], 0u, 0x01u);
    obj_trk1_lat_range = unpack_left_shift_u16(src_p[1], 3u, 0xffu);
    obj_trk1_lat_range |= unpack_right_shift_u16(src_p[2], 5u, 0xe0u);

    if ((obj_trk1_lat_range & (1u << 10)) != 0u) {
        obj_trk1_lat_range |= 0xf800u;
    }

    dst_p->obj_trk1_lat_range = (int16_t)obj_trk1_lat_range;
    dst_p->obj_trk1_rc = unpack_right_shift_u8(src_p[2], 3u, 0x18u);
    obj_trk1_long_range = unpack_left_shift_u16(src_p[2], 9u, 0x07u);
    obj_trk1_long_range |= unpack_left_shift_u16(src_p[3], 1u, 0xffu);
    obj_trk1_long_range |= unpack_right_shift_u16(src_p[4], 7u, 0x80u);

    if ((obj_trk1_long_range & (1u << 11)) != 0u) {
        obj_trk1_long_range |= 0xf000u;
    }

    dst_p->obj_trk1_long_range = (int16_t)obj_trk1_long_range;
    obj_trk1_rel_lat_velocity = unpack_left_shift_u16(src_p[4], 4u, 0x7fu);
    obj_trk1_rel_lat_velocity |= unpack_right_shift_u16(src_p[5], 4u, 0xf0u);

    if ((obj_trk1_rel_lat_velocity & (1u << 10)) != 0u) {
        obj_trk1_rel_lat_velocity |= 0xf800u;
    }

    dst_p->obj_trk1_rel_lat_velocity = (int16_t)obj_trk1_rel_lat_velocity;
    obj_trk1_rel_long_accel = unpack_left_shift_u16(src_p[5], 5u, 0x0fu);
    obj_trk1_rel_long_accel |= unpack_right_shift_u16(src_p[6], 3u, 0xf8u);

    if ((obj_trk1_rel_long_accel & (1u << 8)) != 0u) {
        obj_trk1_rel_long_accel |= 0xfe00u;
    }

    dst_p->obj_trk1_rel_long_accel = (int16_t)obj_trk1_rel_long_accel;
    obj_trk1_rel_long_vel = unpack_left_shift_u16(src_p[6], 8u, 0x07u);
    obj_trk1_rel_long_vel |= unpack_right_shift_u16(src_p[7], 0u, 0xffu);

    if ((obj_trk1_rel_long_vel & (1u << 10)) != 0u) {
        obj_trk1_rel_long_vel |= 0xf800u;
    }

    dst_p->obj_trk1_rel_long_vel = (int16_t)obj_trk1_rel_long_vel;

    return (0);
}

uint8_t emc_fusion_object_obj_track1_obj_trk1_id_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track1_obj_trk1_id_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track1_obj_trk1_id_is_in_range(uint8_t value)
{
    return (value <= 31u);
}

uint8_t emc_fusion_object_obj_track1_obj_trk1_lane_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track1_obj_trk1_lane_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track1_obj_trk1_lane_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

uint8_t emc_fusion_object_obj_track1_obj_trk1_path_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track1_obj_trk1_path_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track1_obj_trk1_path_is_in_range(uint8_t value)
{
    return (value <= 1u);
}

int16_t emc_fusion_object_obj_track1_obj_trk1_lat_range_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track1_obj_trk1_lat_range_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track1_obj_trk1_lat_range_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}

uint8_t emc_fusion_object_obj_track1_obj_trk1_rc_encode(double value)
{
    return (uint8_t)(value);
}

double emc_fusion_object_obj_track1_obj_trk1_rc_decode(uint8_t value)
{
    return ((double)value);
}

bool emc_fusion_object_obj_track1_obj_trk1_rc_is_in_range(uint8_t value)
{
    return (value <= 3u);
}

int16_t emc_fusion_object_obj_track1_obj_trk1_long_range_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track1_obj_trk1_long_range_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track1_obj_trk1_long_range_is_in_range(int16_t value)
{
    return ((value >= -2048) && (value <= 2047));
}

int16_t emc_fusion_object_obj_track1_obj_trk1_rel_lat_velocity_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track1_obj_trk1_rel_lat_velocity_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track1_obj_trk1_rel_lat_velocity_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}

int16_t emc_fusion_object_obj_track1_obj_trk1_rel_long_accel_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track1_obj_trk1_rel_long_accel_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track1_obj_trk1_rel_long_accel_is_in_range(int16_t value)
{
    return ((value >= -256) && (value <= 255));
}

int16_t emc_fusion_object_obj_track1_obj_trk1_rel_long_vel_encode(double value)
{
    return (int16_t)(value / 0.125);
}

double emc_fusion_object_obj_track1_obj_trk1_rel_long_vel_decode(int16_t value)
{
    return ((double)value * 0.125);
}

bool emc_fusion_object_obj_track1_obj_trk1_rel_long_vel_is_in_range(int16_t value)
{
    return ((value >= -1024) && (value <= 1023));
}
