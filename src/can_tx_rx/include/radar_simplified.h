/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.1.0 Sun Oct 25 11:48:20 2020.
 */

#ifndef RADAR_H
#define RADAR_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#ifndef EINVAL
#define EINVAL 22
#endif

/* Frame ids. */
#define RADAR_DIAG_RESPONSE_FRAME_ID (0x7c1u)
#define RADAR_DIAG_REQUEST_FRAME_ID (0x757u)
#define RADAR_OBJ_A_FRAME_ID (0x505u)
#define RADAR_OBJ_B_FRAME_ID (0x506u)
#define RADAR_TARGET_A_FRAME_ID (0x645u)
#define RADAR_TARGET_B_FRAME_ID (0x646u)
#define RADAR_OBJECT_ENDER_FRAME_ID (0x681u)
#define RADAR_OBJECT_STARTER_FRAME_ID (0x500u)
#define RADAR_STATUS_FRAME_ID (0x686u)
#define RADAR_INPUT_VEH_DYN_DATA_FRAME_ID (0xc8u)
#define RADAR_INPUT_VEH_DIM_FRAME_ID (0xc9u)
#define RADAR_INPUT_WHEEL_INFO_FRAME_ID (0xcau)
#define RADAR_INPUT_MOUNT_INFO_FRAME_ID (0x1eau)

/* Frame lengths in bytes. */
#define RADAR_DIAG_RESPONSE_LENGTH (8u)
#define RADAR_DIAG_REQUEST_LENGTH (8u)
#define RADAR_OBJ_A_LENGTH (8u)
#define RADAR_OBJ_B_LENGTH (8u)
#define RADAR_TARGET_A_LENGTH (8u)
#define RADAR_TARGET_B_LENGTH (8u)
#define RADAR_OBJECT_ENDER_LENGTH (8u)
#define RADAR_OBJECT_STARTER_LENGTH (8u)
#define RADAR_STATUS_LENGTH (8u)
#define RADAR_INPUT_VEH_DYN_DATA_LENGTH (8u)
#define RADAR_INPUT_VEH_DIM_LENGTH (8u)
#define RADAR_INPUT_WHEEL_INFO_LENGTH (5u)
#define RADAR_INPUT_MOUNT_INFO_LENGTH (8u)

/* Extended or standard frame types. */
#define RADAR_DIAG_RESPONSE_IS_EXTENDED (0)
#define RADAR_DIAG_REQUEST_IS_EXTENDED (0)
#define RADAR_OBJ_A_IS_EXTENDED (0)
#define RADAR_OBJ_B_IS_EXTENDED (0)
#define RADAR_TARGET_A_IS_EXTENDED (0)
#define RADAR_TARGET_B_IS_EXTENDED (0)
#define RADAR_OBJECT_ENDER_IS_EXTENDED (0)
#define RADAR_OBJECT_STARTER_IS_EXTENDED (0)
#define RADAR_STATUS_IS_EXTENDED (0)
#define RADAR_INPUT_VEH_DYN_DATA_IS_EXTENDED (0)
#define RADAR_INPUT_VEH_DIM_IS_EXTENDED (0)
#define RADAR_INPUT_WHEEL_INFO_IS_EXTENDED (0)
#define RADAR_INPUT_MOUNT_INFO_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define RADAR_DIAG_RESPONSE_CYCLE_TIME_MS (0u)
#define RADAR_DIAG_REQUEST_CYCLE_TIME_MS (0u)
#define RADAR_OBJ_A_CYCLE_TIME_MS (0u)
#define RADAR_OBJ_B_CYCLE_TIME_MS (0u)
#define RADAR_TARGET_A_CYCLE_TIME_MS (0u)
#define RADAR_TARGET_B_CYCLE_TIME_MS (0u)
#define RADAR_OBJECT_ENDER_CYCLE_TIME_MS (0u)
#define RADAR_OBJECT_STARTER_CYCLE_TIME_MS (0u)
#define RADAR_STATUS_CYCLE_TIME_MS (0u)
#define RADAR_INPUT_VEH_DYN_DATA_CYCLE_TIME_MS (20u)
#define RADAR_INPUT_VEH_DIM_CYCLE_TIME_MS (1000u)
#define RADAR_INPUT_WHEEL_INFO_CYCLE_TIME_MS (1000u)
#define RADAR_INPUT_MOUNT_INFO_CYCLE_TIME_MS (1000u)

/* Signal choices. */
#define RADAR_OBJ_A_RADAR_OBJ_FLAG_VALID_RADAR1_OBJECT_INVALID_CHOICE (0u)
#define RADAR_OBJ_A_RADAR_OBJ_FLAG_VALID_RADAR1_OBJECT_VALID_CHOICE (1u)

#define RADAR_OBJ_A_RADAR_OBJ_FLAG_MEAS_RADAR1_OBJECT_NOT_MEASURED_CHOICE (0u)
#define RADAR_OBJ_A_RADAR_OBJ_FLAG_MEAS_RADAR1_OBJECT_MEASURED_CHOICE (1u)

#define RADAR_OBJ_A_RADAR_OBJ_FLAG_HIST_RADAR1_NEW_OBJECT_CHOICE (0u)
#define RADAR_OBJ_A_RADAR_OBJ_FLAG_HIST_RADAR1_OBJECT_PREV_PRESENT_CHOICE (1u)

#define RADAR_OBJ_B_RADAR_OBJ_MOVING_STATE_UNKNOWN__UNCLASSIFIED_CHOICE (0u)
#define RADAR_OBJ_B_RADAR_OBJ_MOVING_STATE_MOVING_CHOICE (1u)
#define RADAR_OBJ_B_RADAR_OBJ_MOVING_STATE_STOPPED_CHOICE (2u)
#define RADAR_OBJ_B_RADAR_OBJ_MOVING_STATE_STANDING_CHOICE (3u)

#define RADAR_OBJ_B_RADAR_OBJ_CLASS_UNKNOWN_CHOICE (0u)
#define RADAR_OBJ_B_RADAR_OBJ_CLASS_MOVING_FOUR_WHEEL_VEH_CHOICE (1u)
#define RADAR_OBJ_B_RADAR_OBJ_CLASS_MOVING_TWO_WHEEL_VEH_CHOICE (2u)
#define RADAR_OBJ_B_RADAR_OBJ_CLASS_MOVING_PEDESTRIAN_CHOICE (3u)
#define RADAR_OBJ_B_RADAR_OBJ_CLASS_CONST_ELEM_CHOICE (4u)

#define RADAR_INPUT_VEH_DYN_DATA_RI_VEH_PRNDSTAT_PARK_CHOICE (0u)
#define RADAR_INPUT_VEH_DYN_DATA_RI_VEH_PRNDSTAT_REVERSE_CHOICE (1u)
#define RADAR_INPUT_VEH_DYN_DATA_RI_VEH_PRNDSTAT_NEUTRAL_CHOICE (2u)
#define RADAR_INPUT_VEH_DYN_DATA_RI_VEH_PRNDSTAT_DRIVE_CHOICE (3u)

/**
 * Signals in message Radar_Diag_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_diag_response_t {
  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint64_t r_diag_response;
};

/**
 * Signals in message Radar_Diag_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_diag_request_t {
  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint64_t r_diag_request;
};

/**
 * Signals in message Radar_Obj_A.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_obj_a_t {
  /**
   * Range: 0..4095 (0..255.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint16_t radar_obj_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar_obj_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar_obj_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar_obj_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar_obj_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar_obj_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_obj_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar_obj_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_obj_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_obj_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_obj_mess_aconsist_bit;
};

/**
 * Signals in message Radar_Obj_B.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_obj_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar_obj_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar_obj_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar_obj_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_obj_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar_obj_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar_obj_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar_obj_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar_obj_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar_obj_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_obj_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar_obj_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_obj_mess_bconsist_bit;
};

/**
 * Signals in message Radar_Target_A.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_target_a_t {
  /**
   * Range: 0..4095 (0..255.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint16_t radar_target_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar_target_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar_target_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar_target_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar_target_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar_target_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_target_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar_target_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_target_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_target_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_target_mess_aconsist_bit;
};

/**
 * Signals in message Radar_Target_B.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_target_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar_target_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar_target_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar_target_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_target_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar_target_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar_target_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar_target_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar_target_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar_target_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_target_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar_target_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_target_mess_bconsist_bit;
};

/**
 * Signals in message Radar_Object_Ender.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_object_ender_t {
  /**
   * Range: 0..255 (0..0.2490234375 s)
   * Scale: 0.0009765625
   * Offset: 0
   */
  uint8_t radar_timestamp;

  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_packet_checksum;

  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_tc_counter;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_mess_ender_consist_bit;
};

/**
 * Signals in message Radar_Object_Starter.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_object_starter_t {
  /**
   * Range: 0..65535 (-2..1.99993896484375 rad/s)
   * Scale: 6.103515625e-05
   * Offset: -2
   */
  uint16_t radar_veh_psi_dt;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar_veh_v_ego;

  /**
   * Range: 0..1023 (-16..15.96875 m/s²)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar_veh_a_ego;

  /**
   * Range: 0..16383 (-0.5..0.49993896484375 Rad)
   * Scale: 6.103515625e-05
   * Offset: -0.5
   */
  uint16_t radar_veh_slip_angle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar_mess_starter_consist_bit;
};

/**
 * Signals in message Radar_Status.
 *
 * Radar1 sensor status message
 *
 * All signal values are as on the CAN bus.
 */
struct radar_status_t {
  /**
   * Radar1 ITC of the lowest active fault
   *
   * Range: 0..65535 (0..65535 -)
   * Scale: 1
   * Offset: 0
   */
  uint16_t r_stat_itc_info;

  /**
   * Radar1 System Fault indicator
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r_stat_sgu_fail;

  /**
   * Radar1 Hardware Failure indicator
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r_stat_hw_fail;

  /**
   * Radar1 Horizontal Misalignment
   *
   * Range: 0..4095 (-0.2048..0.2047 rad)
   * Scale: 0.0001
   * Offset: -0.2048
   */
  uint16_t r_stat_horizontal_misalignment;

  /**
   * Radar1 Absorption Blindness status indicator
   *
   * Range: 0..255 (0..0.99609375 -)
   * Scale: 0.00390625
   * Offset: 0
   */
  uint8_t r_stat_absorption_blindness;

  /**
   * Radar1 Distortion Blindness status indicator
   *
   * Range: 0..255 (0..0.99609375 -)
   * Scale: 0.00390625
   * Offset: 0
   */
  uint8_t r_stat_distortion_blindness;

  /**
   * Radar1 Status Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r_stat_mc;

  /**
   * Radar1 Status CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r_stat_crc;
};

/**
 * Signals in message Radar_Input_Veh_DynData.
 *
 * Vehicle Dynamic Data Message
 *
 * All signal values are as on the CAN bus.
 */
struct radar_input_veh_dyn_data_t {
  /**
   * Vehicle steering angle
   *
   * Range: -32768..32767 (-1024..1023.96875 deg)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t ri_veh_steer_angle;

  /**
   * Vehicle velocity
   *
   * Range: -32768..32767 (-2048..2047.9375 km/h)
   * Scale: 0.0625
   * Offset: 0
   */
  int16_t ri_veh_velocity;

  /**
   * 1: Radar will use vehicle steering angle
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_use_steer_angle;

  /**
   * 1: Vehicle is at standstill. 0: Vehicle is not at standstill.
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_standstill;

  /**
   * Vehicle YawRate
   *
   * Range: -8192..8191 (-409.6..409.55 deg/s)
   * Scale: 0.05
   * Offset: 0
   */
  int16_t ri_veh_yaw_rate;

  /**
   * Radar_Input_Veh_DynData Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_mc;

  /**
   * Indicates that any type of ESP event (ESC,ABS,etc.) is active
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_any_wheel_slip_event;

  /**
   * Vehicle Current Gear Status
   *
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_prndstat;

  /**
   * Radar_Input_Veh_DynData CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_crc;
};

/**
 * Signals in message Radar_Input_Veh_Dim.
 *
 * Vehicle Dimension information
 *
 * All signal values are as on the CAN bus.
 */
struct radar_input_veh_dim_t {
  /**
   * Maximum width of vehicle
   *
   * Range: 0..255 (0..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t ri_vd_max_width;

  /**
   * Minimum width of vehicle
   *
   * Range: 0..255 (0..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t ri_vd_min_width;

  /**
   * Longitudinal distance to front bumper from center of rear axle
   *
   * Range: -256..255 (-8..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t ri_vd_long_front_bumper_pos;

  /**
   * Longitudinal distance to rear bumper from center of rear axle
   *
   * Range: -256..255 (-8..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t ri_vd_long_rear_bumper_pos;

  /**
   * Radar_Input_Veh_Dim Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_vd_mc;

  /**
   * Radar_Input_Veh_Dim CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_vd_crc;
};

/**
 * Signals in message Radar_Input_Wheel_Info.
 *
 * Vehicle Wheel-related information
 *
 * All signal values are as on the CAN bus.
 */
struct radar_input_wheel_info_t {
  /**
   * Distance from center of front wheel to center of rear wheel
   *
   * Range: 0..255 (0..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t ri_wi_wheel_base;

  /**
   * Distance from center of left wheel to center of right wheel of the non-driven axle
   *
   * Range: 0..255 (0..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t ri_wi_track_width;

  /**
   * Ratio of steering wheel angle to angle at the wheels
   *
   * Range: 0..255 (0..31.875 -)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t ri_wi_steering_angle_ratio;

  /**
   * Radar_Input_Wheel_Info Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_wi_mc;

  /**
   * Radar_Input_Wheel_Info CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_wi_crc;
};

/**
 * Signals in message Radar_Input_MountInfo.
 *
 * Radar1 Sensor Mounting Information
 *
 * All signal values are as on the CAN bus.
 */
struct radar_input_mount_info_t {
  /**
   * Lateral distance to sensor from center of vehicle, Left = positive
   *
   * Range: -64..63 (-2..1.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int8_t ri_mi_lat_sensor_mount_to_center;

  /**
   * Longitudinal distance to sensor from center of rear axle
   *
   * Range: -256..255 (-8..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t ri_mi_long_sensor_mount_to_rear_axle;

  /**
   * Sensor mounting height from ground
   *
   * Range: 0..255 (0..1.275 m)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t ri_mi_sensor_height;

  /**
   * Sensor Orientation: 0: Connector Down, 1: Connector Up
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_mi_sensor_orientation;

  /**
   * Sensor Mounting Angle, 0: Straight Forward, Positive: Counter-Clockwise, Negative: Clockwise
   *
   * Range: -16384..16383 (-3.2768..3.2766 rad)
   * Scale: 0.0002
   * Offset: 0
   */
  int16_t ri_mi_sensor_mount_angle;

  /**
   * Radar1_Input_MountInfo Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_mi_mc;

  /**
   * Radar1_Input_MountInfo CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_mi_crc;
};

/**
 * Pack message Radar_Diag_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_diag_response_pack(uint8_t *dst_p, const struct radar_diag_response_t *src_p, size_t size);

/**
 * Unpack message Radar_Diag_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_diag_response_unpack(struct radar_diag_response_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t radar_diag_response_r_diag_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_diag_response_r_diag_response_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_diag_response_r_diag_response_is_in_range(uint64_t value);

/**
 * Pack message Radar_Diag_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_diag_request_pack(uint8_t *dst_p, const struct radar_diag_request_t *src_p, size_t size);

/**
 * Unpack message Radar_Diag_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_diag_request_unpack(struct radar_diag_request_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t radar_diag_request_r_diag_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_diag_request_r_diag_request_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_diag_request_r_diag_request_is_in_range(uint64_t value);

/**
 * Pack message Radar_Obj_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_obj_a_pack(uint8_t *dst_p, const struct radar_obj_a_t *src_p, size_t size);

/**
 * Unpack message Radar_Obj_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_obj_a_unpack(struct radar_obj_a_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_obj_a_radar_obj_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_obj_a_radar_obj_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_obj_a_radar_obj_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_a_radar_obj_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_obj_a_radar_obj_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_a_radar_obj_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_a_radar_obj_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_a_radar_obj_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_a_radar_obj_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_a_radar_obj_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_a_radar_obj_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_a_radar_obj_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_a_radar_obj_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar_Obj_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_obj_b_pack(uint8_t *dst_p, const struct radar_obj_b_t *src_p, size_t size);

/**
 * Unpack message Radar_Obj_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_obj_b_unpack(struct radar_obj_b_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_obj_b_radar_obj_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_obj_b_radar_obj_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_obj_b_radar_obj_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_obj_b_radar_obj_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar_Target_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_target_a_pack(uint8_t *dst_p, const struct radar_target_a_t *src_p, size_t size);

/**
 * Unpack message Radar_Target_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_target_a_unpack(struct radar_target_a_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_target_a_radar_target_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_target_a_radar_target_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_target_a_radar_target_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_a_radar_target_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_target_a_radar_target_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_a_radar_target_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_a_radar_target_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_a_radar_target_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_a_radar_target_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_a_radar_target_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_a_radar_target_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_a_radar_target_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_a_radar_target_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar_Target_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_target_b_pack(uint8_t *dst_p, const struct radar_target_b_t *src_p, size_t size);

/**
 * Unpack message Radar_Target_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_target_b_unpack(struct radar_target_b_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_target_b_radar_target_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_target_b_radar_target_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_target_b_radar_target_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_target_b_radar_target_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar_Object_Ender.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_object_ender_pack(uint8_t *dst_p, const struct radar_object_ender_t *src_p, size_t size);

/**
 * Unpack message Radar_Object_Ender.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_object_ender_unpack(struct radar_object_ender_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_object_ender_radar_timestamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_ender_radar_timestamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_ender_radar_timestamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_object_ender_radar_packet_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_ender_radar_packet_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_ender_radar_packet_checksum_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_object_ender_radar_tc_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_ender_radar_tc_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_ender_radar_tc_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_object_ender_radar_mess_ender_consist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_ender_radar_mess_ender_consist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_ender_radar_mess_ender_consist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar_Object_Starter.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_object_starter_pack(uint8_t *dst_p, const struct radar_object_starter_t *src_p, size_t size);

/**
 * Unpack message Radar_Object_Starter.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_object_starter_unpack(struct radar_object_starter_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_object_starter_radar_veh_psi_dt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_starter_radar_veh_psi_dt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_starter_radar_veh_psi_dt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_object_starter_radar_veh_v_ego_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_starter_radar_veh_v_ego_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_starter_radar_veh_v_ego_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_object_starter_radar_veh_a_ego_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_starter_radar_veh_a_ego_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_starter_radar_veh_a_ego_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_object_starter_radar_veh_slip_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_starter_radar_veh_slip_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_starter_radar_veh_slip_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_object_starter_radar_mess_starter_consist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_object_starter_radar_mess_starter_consist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_object_starter_radar_mess_starter_consist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_status_pack(uint8_t *dst_p, const struct radar_status_t *src_p, size_t size);

/**
 * Unpack message Radar_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_status_unpack(struct radar_status_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_status_r_stat_itc_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_status_r_stat_itc_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_status_r_stat_itc_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_status_r_stat_sgu_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_status_r_stat_sgu_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_status_r_stat_sgu_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_status_r_stat_hw_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_status_r_stat_hw_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_status_r_stat_hw_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_status_r_stat_horizontal_misalignment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_status_r_stat_horizontal_misalignment_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_status_r_stat_horizontal_misalignment_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_status_r_stat_absorption_blindness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_status_r_stat_absorption_blindness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_status_r_stat_absorption_blindness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_status_r_stat_distortion_blindness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_status_r_stat_distortion_blindness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_status_r_stat_distortion_blindness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_status_r_stat_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_status_r_stat_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_status_r_stat_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_status_r_stat_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_status_r_stat_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_status_r_stat_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar_Input_Veh_DynData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_input_veh_dyn_data_pack(uint8_t *dst_p, const struct radar_input_veh_dyn_data_t *src_p, size_t size);

/**
 * Unpack message Radar_Input_Veh_DynData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_input_veh_dyn_data_unpack(struct radar_input_veh_dyn_data_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t radar_input_veh_dyn_data_ri_veh_steer_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_steer_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_steer_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t radar_input_veh_dyn_data_ri_veh_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dyn_data_ri_veh_use_steer_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_use_steer_angle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_use_steer_angle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dyn_data_ri_veh_standstill_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_standstill_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_standstill_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t radar_input_veh_dyn_data_ri_veh_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_yaw_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dyn_data_ri_veh_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dyn_data_ri_veh_prndstat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_prndstat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_prndstat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dyn_data_ri_veh_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dyn_data_ri_veh_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dyn_data_ri_veh_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar_Input_Veh_Dim.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_input_veh_dim_pack(uint8_t *dst_p, const struct radar_input_veh_dim_t *src_p, size_t size);

/**
 * Unpack message Radar_Input_Veh_Dim.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_input_veh_dim_unpack(struct radar_input_veh_dim_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dim_ri_vd_max_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dim_ri_vd_max_width_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dim_ri_vd_max_width_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dim_ri_vd_min_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dim_ri_vd_min_width_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dim_ri_vd_min_width_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t radar_input_veh_dim_ri_vd_long_front_bumper_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dim_ri_vd_long_front_bumper_pos_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dim_ri_vd_long_front_bumper_pos_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t radar_input_veh_dim_ri_vd_long_rear_bumper_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dim_ri_vd_long_rear_bumper_pos_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dim_ri_vd_long_rear_bumper_pos_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dim_ri_vd_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dim_ri_vd_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dim_ri_vd_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_veh_dim_ri_vd_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_veh_dim_ri_vd_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_veh_dim_ri_vd_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar_Input_Wheel_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_input_wheel_info_pack(uint8_t *dst_p, const struct radar_input_wheel_info_t *src_p, size_t size);

/**
 * Unpack message Radar_Input_Wheel_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_input_wheel_info_unpack(struct radar_input_wheel_info_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_wheel_info_ri_wi_wheel_base_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_wheel_info_ri_wi_wheel_base_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_wheel_info_ri_wi_wheel_base_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_wheel_info_ri_wi_track_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_wheel_info_ri_wi_track_width_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_wheel_info_ri_wi_track_width_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_wheel_info_ri_wi_steering_angle_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_wheel_info_ri_wi_steering_angle_ratio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_wheel_info_ri_wi_steering_angle_ratio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_wheel_info_ri_wi_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_wheel_info_ri_wi_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_wheel_info_ri_wi_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_wheel_info_ri_wi_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_wheel_info_ri_wi_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_wheel_info_ri_wi_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar_Input_MountInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_input_mount_info_pack(uint8_t *dst_p, const struct radar_input_mount_info_t *src_p, size_t size);

/**
 * Unpack message Radar_Input_MountInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_input_mount_info_unpack(struct radar_input_mount_info_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t radar_input_mount_info_ri_mi_lat_sensor_mount_to_center_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_mount_info_ri_mi_lat_sensor_mount_to_center_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_mount_info_ri_mi_lat_sensor_mount_to_center_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t radar_input_mount_info_ri_mi_long_sensor_mount_to_rear_axle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_mount_info_ri_mi_long_sensor_mount_to_rear_axle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_mount_info_ri_mi_long_sensor_mount_to_rear_axle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_mount_info_ri_mi_sensor_height_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_mount_info_ri_mi_sensor_height_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_mount_info_ri_mi_sensor_height_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_mount_info_ri_mi_sensor_orientation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_mount_info_ri_mi_sensor_orientation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_mount_info_ri_mi_sensor_orientation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t radar_input_mount_info_ri_mi_sensor_mount_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_mount_info_ri_mi_sensor_mount_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_mount_info_ri_mi_sensor_mount_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_mount_info_ri_mi_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_mount_info_ri_mi_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_mount_info_ri_mi_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_input_mount_info_ri_mi_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_input_mount_info_ri_mi_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_input_mount_info_ri_mi_crc_is_in_range(uint8_t value);

#ifdef __cplusplus
}
#endif

#endif
