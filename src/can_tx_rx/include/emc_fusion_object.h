/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 35.3.0 Tue Apr 20 21:49:08 2021.
 */

#ifndef EMC_FUSION_OBJECT_H
#define EMC_FUSION_OBJECT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define EMC_FUSION_OBJECT_OBJ_TRACK3_FRAME_ID (0x443u)
#define EMC_FUSION_OBJECT_OBJ_TRACK2_FRAME_ID (0x442u)
#define EMC_FUSION_OBJECT_OBJ_TRACK1_FRAME_ID (0x441u)

/* Frame lengths in bytes. */
#define EMC_FUSION_OBJECT_OBJ_TRACK3_LENGTH (8u)
#define EMC_FUSION_OBJECT_OBJ_TRACK2_LENGTH (8u)
#define EMC_FUSION_OBJECT_OBJ_TRACK1_LENGTH (8u)

/* Extended or standard frame types. */
#define EMC_FUSION_OBJECT_OBJ_TRACK3_IS_EXTENDED (0)
#define EMC_FUSION_OBJECT_OBJ_TRACK2_IS_EXTENDED (0)
#define EMC_FUSION_OBJECT_OBJ_TRACK1_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message ObjTrack3.
 *
 * All signal values are as on the CAN bus.
 */
struct emc_fusion_object_obj_track3_t {
    /**
     * Object ID
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk3_id;

    /**
     * Lane Assignment. 1:Same, 2:Left, 3:Right
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk3_lane;

    /**
     * 1: Object in Path, 0: Object not in path
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk3_path;

    /**
     * Lateral Range
     *
     * Range: -1024..1023 (-128..127.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk3_lat_range;

    /**
     * Rolling Counter
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk3_rc;

    /**
     * Longitudinal Range
     *
     * Range: -2048..2047 (-256..255.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk3_long_range;

    /**
     * Lateral Velocity
     *
     * Range: -1024..1023 (-128..127.875 m/s)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk3_rel_lat_velocity;

    /**
     * Relative Longitudinal Acceleration
     *
     * Range: -256..255 (-32..31.875 m/s^2)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk3_rel_long_accel;

    /**
     * Range Rate or Relative Longitudinal Velocity
     *
     * Range: -1024..1023 (-128..127.875 m/s)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk3_rel_long_vel;
};

/**
 * Signals in message ObjTrack2.
 *
 * All signal values are as on the CAN bus.
 */
struct emc_fusion_object_obj_track2_t {
    /**
     * Object ID
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk2_id;

    /**
     * Lane Assignment. 1:Same, 2:Left, 3:Right
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk2_lane;

    /**
     * 1: Object in Path, 0: Object not in path
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk2_path;

    /**
     * Lateral Range
     *
     * Range: -1024..1023 (-128..127.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk2_lat_range;

    /**
     * Rolling Counter
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk2_rc;

    /**
     * Longitudinal Range
     *
     * Range: -2048..2047 (-256..255.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk2_long_range;

    /**
     * Lateral Velocity
     *
     * Range: -1024..1023 (-128..127.875 m/s)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk2_rel_lat_velocity;

    /**
     * Relative Longitudinal Acceleration
     *
     * Range: -256..255 (-32..31.875 m/s^2)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk2_rel_long_accel;

    /**
     * Range Rate or Relative Longitudinal Velocity
     *
     * Range: -1024..1023 (-128..127.875 m/s)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk2_rel_long_vel;
};

/**
 * Signals in message ObjTrack1.
 *
 * All signal values are as on the CAN bus.
 */
struct emc_fusion_object_obj_track1_t {
    /**
     * Object ID
     *
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk1_id;

    /**
     * Lane Assignment. 1:Same, 2:Left, 3:Right
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk1_lane;

    /**
     * 1: Object in Path, 0: Object not in path
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk1_path;

    /**
     * Lateral Range
     *
     * Range: -1024..1023 (-128..127.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk1_lat_range;

    /**
     * Rolling Counter
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obj_trk1_rc;

    /**
     * Longitudinal Range
     *
     * Range: -2048..2047 (-256..255.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk1_long_range;

    /**
     * Lateral Velocity
     *
     * Range: -1024..1023 (-128..127.875 m/s)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk1_rel_lat_velocity;

    /**
     * Relative Longitudinal Acceleration
     *
     * Range: -256..255 (-32..31.875 m/s^2)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk1_rel_long_accel;

    /**
     * Range Rate or Relative Longitudinal Velocity
     *
     * Range: -1024..1023 (-128..127.875 m/s)
     * Scale: 0.125
     * Offset: 0
     */
    int16_t obj_trk1_rel_long_vel;
};

/**
 * Pack message ObjTrack3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int emc_fusion_object_obj_track3_pack(
    uint8_t *dst_p,
    const struct emc_fusion_object_obj_track3_t *src_p,
    size_t size);

/**
 * Unpack message ObjTrack3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int emc_fusion_object_obj_track3_unpack(
    struct emc_fusion_object_obj_track3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track3_obj_trk3_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track3_obj_trk3_lane_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_lane_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_lane_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track3_obj_trk3_path_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_path_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_path_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track3_obj_trk3_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_lat_range_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_lat_range_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track3_obj_trk3_rc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_rc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_rc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track3_obj_trk3_long_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_long_range_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_long_range_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track3_obj_trk3_rel_lat_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_rel_lat_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_rel_lat_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track3_obj_trk3_rel_long_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_rel_long_accel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_rel_long_accel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track3_obj_trk3_rel_long_vel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track3_obj_trk3_rel_long_vel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track3_obj_trk3_rel_long_vel_is_in_range(int16_t value);

/**
 * Pack message ObjTrack2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int emc_fusion_object_obj_track2_pack(
    uint8_t *dst_p,
    const struct emc_fusion_object_obj_track2_t *src_p,
    size_t size);

/**
 * Unpack message ObjTrack2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int emc_fusion_object_obj_track2_unpack(
    struct emc_fusion_object_obj_track2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track2_obj_trk2_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track2_obj_trk2_lane_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_lane_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_lane_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track2_obj_trk2_path_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_path_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_path_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track2_obj_trk2_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_lat_range_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_lat_range_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track2_obj_trk2_rc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_rc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_rc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track2_obj_trk2_long_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_long_range_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_long_range_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track2_obj_trk2_rel_lat_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_rel_lat_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_rel_lat_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track2_obj_trk2_rel_long_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_rel_long_accel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_rel_long_accel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track2_obj_trk2_rel_long_vel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track2_obj_trk2_rel_long_vel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track2_obj_trk2_rel_long_vel_is_in_range(int16_t value);

/**
 * Pack message ObjTrack1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int emc_fusion_object_obj_track1_pack(
    uint8_t *dst_p,
    const struct emc_fusion_object_obj_track1_t *src_p,
    size_t size);

/**
 * Unpack message ObjTrack1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int emc_fusion_object_obj_track1_unpack(
    struct emc_fusion_object_obj_track1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track1_obj_trk1_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track1_obj_trk1_lane_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_lane_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_lane_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track1_obj_trk1_path_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_path_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_path_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track1_obj_trk1_lat_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_lat_range_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_lat_range_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t emc_fusion_object_obj_track1_obj_trk1_rc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_rc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_rc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track1_obj_trk1_long_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_long_range_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_long_range_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track1_obj_trk1_rel_lat_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_rel_lat_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_rel_lat_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track1_obj_trk1_rel_long_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_rel_long_accel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_rel_long_accel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t emc_fusion_object_obj_track1_obj_trk1_rel_long_vel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double emc_fusion_object_obj_track1_obj_trk1_rel_long_vel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool emc_fusion_object_obj_track1_obj_trk1_rel_long_vel_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
