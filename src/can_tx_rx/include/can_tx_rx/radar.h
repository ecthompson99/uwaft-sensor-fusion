/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.20.3 Sat Jun  6 14:55:44 2020.
 */

#ifndef RADAR_H
#define RADAR_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define RADAR_RADAR_DIAG_RESPONSE_FRAME_ID (0x7c1u)
#define RADAR_RADAR_DIAG_REQUEST_FRAME_ID (0x757u)
#define RADAR_RADAR1_A_FRAME_ID (0x505u)
#define RADAR_RADAR1_B_FRAME_ID (0x506u)
#define RADAR_RADAR_OBJECT_ENDER_FRAME_ID (0x681u)
#define RADAR_RADAR_OBJECT_STARTER_FRAME_ID (0x500u)
#define RADAR_RADAR_STATUS_FRAME_ID (0x686u)
#define RADAR_RADAR2_A_FRAME_ID (0x507u)
#define RADAR_RADAR2_B_FRAME_ID (0x508u)

/* Frame lengths in bytes. */
#define RADAR_RADAR_DIAG_RESPONSE_LENGTH (8u)
#define RADAR_RADAR_DIAG_REQUEST_LENGTH (8u)
#define RADAR_RADAR1_A_LENGTH (8u)
#define RADAR_RADAR1_B_LENGTH (8u)
#define RADAR_RADAR_OBJECT_ENDER_LENGTH (8u)
#define RADAR_RADAR_OBJECT_STARTER_LENGTH (8u)
#define RADAR_RADAR_STATUS_LENGTH (8u)
#define RADAR_RADAR2_A_LENGTH (8u)
#define RADAR_RADAR2_B_LENGTH (8u)

/* Extended or standard frame types. */
#define RADAR_RADAR_DIAG_RESPONSE_IS_EXTENDED (0)
#define RADAR_RADAR_DIAG_REQUEST_IS_EXTENDED (0)
#define RADAR_RADAR1_A_IS_EXTENDED (0)
#define RADAR_RADAR1_B_IS_EXTENDED (0)
#define RADAR_RADAR_OBJECT_ENDER_IS_EXTENDED (0)
#define RADAR_RADAR_OBJECT_STARTER_IS_EXTENDED (0)
#define RADAR_RADAR_STATUS_IS_EXTENDED (0)
#define RADAR_RADAR2_A_IS_EXTENDED (0)
#define RADAR_RADAR2_B_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define RADAR_RADAR_DIAG_RESPONSE_CYCLE_TIME_MS (0u)
#define RADAR_RADAR_DIAG_REQUEST_CYCLE_TIME_MS (0u)
#define RADAR_RADAR1_A_CYCLE_TIME_MS (0u)
#define RADAR_RADAR1_B_CYCLE_TIME_MS (0u)
#define RADAR_RADAR_OBJECT_ENDER_CYCLE_TIME_MS (0u)
#define RADAR_RADAR_OBJECT_STARTER_CYCLE_TIME_MS (0u)
#define RADAR_RADAR_STATUS_CYCLE_TIME_MS (0u)
#define RADAR_RADAR2_A_CYCLE_TIME_MS (0u)
#define RADAR_RADAR2_B_CYCLE_TIME_MS (0u)

/* Signal choices. */
#define RADAR_RADAR1_A_RADAR1_FLAG_VALID_RADAR1_OBJECT_INVALID_CHOICE (0u)
#define RADAR_RADAR1_A_RADAR1_FLAG_VALID_RADAR1_OBJECT_VALID_CHOICE (1u)

#define RADAR_RADAR1_A_RADAR1_FLAG_MEAS_RADAR1_OBJECT_NOT_MEASURED_CHOICE (0u)
#define RADAR_RADAR1_A_RADAR1_FLAG_MEAS_RADAR1_OBJECT_MEASURED_CHOICE (1u)

#define RADAR_RADAR1_A_RADAR1_FLAG_HIST_RADAR1_NEW_OBJECT_CHOICE (0u)
#define RADAR_RADAR1_A_RADAR1_FLAG_HIST_RADAR1_OBJECT_PREV_PRESENT_CHOICE (1u)

#define RADAR_RADAR1_B_RADAR1_MOVING_STATE_UNKNOWN__UNCLASSIFIED_CHOICE (0u)
#define RADAR_RADAR1_B_RADAR1_MOVING_STATE_MOVING_CHOICE (1u)
#define RADAR_RADAR1_B_RADAR1_MOVING_STATE_STOPPED_CHOICE (2u)
#define RADAR_RADAR1_B_RADAR1_MOVING_STATE_STANDING_CHOICE (3u)

#define RADAR_RADAR1_B_RADAR1_CLASS_UNKNOWN_CHOICE (0u)
#define RADAR_RADAR1_B_RADAR1_CLASS_MOVING_FOUR_WHEEL_VEH_CHOICE (1u)
#define RADAR_RADAR1_B_RADAR1_CLASS_MOVING_TWO_WHEEL_VEH_CHOICE (2u)
#define RADAR_RADAR1_B_RADAR1_CLASS_MOVING_PEDESTRIAN_CHOICE (3u)
#define RADAR_RADAR1_B_RADAR1_CLASS_CONST_ELEM_CHOICE (4u)

#define RADAR_RADAR2_A_RADAR2_FLAG_VALID_RADAR1_OBJECT_INVALID_CHOICE (0u)
#define RADAR_RADAR2_A_RADAR2_FLAG_VALID_RADAR1_OBJECT_VALID_CHOICE (1u)

#define RADAR_RADAR2_A_RADAR2_FLAG_MEAS_RADAR1_OBJECT_NOT_MEASURED_CHOICE (0u)
#define RADAR_RADAR2_A_RADAR2_FLAG_MEAS_RADAR1_OBJECT_MEASURED_CHOICE (1u)

#define RADAR_RADAR2_A_RADAR2_FLAG_HIST_RADAR1_NEW_OBJECT_CHOICE (0u)
#define RADAR_RADAR2_A_RADAR2_FLAG_HIST_RADAR1_OBJECT_PREV_PRESENT_CHOICE (1u)

#define RADAR_RADAR2_B_RADAR2_MOVING_STATE_UNKNOWN__UNCLASSIFIED_CHOICE (0u)
#define RADAR_RADAR2_B_RADAR2_MOVING_STATE_MOVING_CHOICE (1u)
#define RADAR_RADAR2_B_RADAR2_MOVING_STATE_STOPPED_CHOICE (2u)
#define RADAR_RADAR2_B_RADAR2_MOVING_STATE_STANDING_CHOICE (3u)

#define RADAR_RADAR2_B_RADAR2_CLASS_UNKNOWN_CHOICE (0u)
#define RADAR_RADAR2_B_RADAR2_CLASS_MOVING_FOUR_WHEEL_VEH_CHOICE (1u)
#define RADAR_RADAR2_B_RADAR2_CLASS_MOVING_TWO_WHEEL_VEH_CHOICE (2u)
#define RADAR_RADAR2_B_RADAR2_CLASS_MOVING_PEDESTRIAN_CHOICE (3u)
#define RADAR_RADAR2_B_RADAR2_CLASS_CONST_ELEM_CHOICE (4u)

/**
 * Signals in message Radar_Diag_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar_diag_response_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t r1_diag_response;
};

/**
 * Signals in message Radar_Diag_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar_diag_request_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t r1_diag_request;
};

/**
 * Signals in message Radar1_A.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar1_a_t {
    /**
     * Range: 0..4095 (0..255.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t radar1_dx;

    /**
     * Range: 0..4095 (-128..127.9375 m/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t radar1_vx;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t radar1_dy;

    /**
     * Range: 0..31 (0..0.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    uint8_t radar1_w_exist;

    /**
     * Range: 0..1023 (-16..15.96875 m/s2)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t radar1_ax;

    /**
     * Range: 0..31 (0..0.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    uint8_t radar1_w_obstacle;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar1_flag_valid;

    /**
     * Range: 0..31 (0..0.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    uint8_t radar1_w_non_obstacle;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar1_flag_meas;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar1_flag_hist;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar1_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_B.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar1_b_t {
    /**
     * Range: 0..1023 (-64..63.875 m/s)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t radar1_vy;

    /**
     * Range: 0..63 (0..7.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t radar1_d_length;

    /**
     * Range: 0..63 (-5..10.75 m)
     * Scale: 0.25
     * Offset: -5
     */
    uint8_t radar1_dz;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar1_moving_state;

    /**
     * Range: 0..63 (0..3.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t radar1_dx_sigma;

    /**
     * Range: 0..63 (0..3.9375 m/s)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t radar1_vx_sigma;

    /**
     * Range: 0..63 (0..3.9375 m/s2)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t radar1_ax_sigma;

    /**
     * Range: 0..63 (0..3.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t radar1_dy_sigma;

    /**
     * Range: 0..31 (0..0.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    uint8_t radar1_w_class;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar1_class;

    /**
     * Range: 0..63 (0..7.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t radar1_dx_rear_end_loss;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar1_mess_bconsist_bit;
};

/**
 * Signals in message Radar_Object_Ender.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar_object_ender_t {
    /**
     * Range: 0..255 (0..0.2490234375 s)
     * Scale: 0.0009765625
     * Offset: 0
     */
    uint8_t radar_timestamp;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar_tc_counter;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar_mess_ender_consist_bit;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar_packet_checksum;
};

/**
 * Signals in message Radar_Object_Starter.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar_object_starter_t {
    /**
     * Range: 0..65535 (-2..1.99993896484375 rad/s)
     * Scale: 6.103515625e-05
     * Offset: -2
     */
    uint16_t radar_veh_psi_dt;

    /**
     * Range: 0..4095 (-128..127.9375 m/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t radar_veh_v_ego;

    /**
     * Range: 0..1023 (-16..15.96875 m/sÂ²)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t radar_veh_a_ego;

    /**
     * Range: 0..16383 (-0.5..0.49993896484375 Rad)
     * Scale: 6.103515625e-05
     * Offset: -0.5
     */
    uint16_t radar_veh_slip_angle;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar_mess_starter_consist_bit;
};

/**
 * Signals in message Radar_Status.
 *
 * Radar sensor status message
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar_status_t {
    /**
     * Radar1 ITC of the lowest active fault
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t r_stat_itc_info;

    /**
     * Radar1 System Fault indicator
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_stat_sgu_fail;

    /**
     * Radar1 Hardware Failure indicator
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_stat_hw_fail;

    /**
     * Radar1 Horizontal Misalignment
     *
     * Range: 0..4095 (-0.2048..0.2047 rad)
     * Scale: 0.0001
     * Offset: -0.2048
     */
    uint16_t r_stat_horizontal_misalignment;

    /**
     * Radar1 Absorption Blindness status indicator
     *
     * Range: 0..255 (0..0.99609375 -)
     * Scale: 0.00390625
     * Offset: 0
     */
    uint8_t r_stat_absorption_blindness;

    /**
     * Radar1 Distortion Blindness status indicator
     *
     * Range: 0..255 (0..0.99609375 -)
     * Scale: 0.00390625
     * Offset: 0
     */
    uint8_t r_stat_distortion_blindness;

    /**
     * Radar1 Status Message Counter
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_stat_mc;

    /**
     * Radar1 Status CRC
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t r_stat_crc;
};

/**
 * Signals in message Radar2_A.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar2_a_t {
    /**
     * Range: 0..4095 (0..255.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t radar2_dx;

    /**
     * Range: 0..4095 (-128..127.9375 m/s)
     * Scale: 0.0625
     * Offset: -128
     */
    uint16_t radar2_vx;

    /**
     * Range: 0..2047 (-128..127.875 m)
     * Scale: 0.125
     * Offset: -128
     */
    uint16_t radar2_dy;

    /**
     * Range: 0..31 (0..0.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    uint8_t radar2_w_exist;

    /**
     * Range: 0..1023 (-16..15.96875 m/s2)
     * Scale: 0.03125
     * Offset: -16
     */
    uint16_t radar2_ax;

    /**
     * Range: 0..31 (0..0.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    uint8_t radar2_w_obstacle;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar2_flag_valid;

    /**
     * Range: 0..31 (0..0.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    uint8_t radar2_w_non_obstacle;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar2_flag_meas;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar2_flag_hist;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar2_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_B.
 *
 * All signal values are as on the CAN bus.
 */
struct radar_radar2_b_t {
    /**
     * Range: 0..1023 (-64..63.875 m/s)
     * Scale: 0.125
     * Offset: -64
     */
    uint16_t radar2_vy;

    /**
     * Range: 0..63 (0..7.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t radar2_d_length;

    /**
     * Range: 0..63 (-5..10.75 m)
     * Scale: 0.25
     * Offset: -5
     */
    uint8_t radar2_dz;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar2_moving_state;

    /**
     * Range: 0..63 (0..3.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t radar2_dx_sigma;

    /**
     * Range: 0..63 (0..3.9375 m/s)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t radar2_vx_sigma;

    /**
     * Range: 0..63 (0..3.9375 m/s2)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t radar2_ax_sigma;

    /**
     * Range: 0..63 (0..3.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint8_t radar2_dy_sigma;

    /**
     * Range: 0..31 (0..0.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    uint8_t radar2_w_class;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar2_class;

    /**
     * Range: 0..63 (0..7.875 m)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t radar2_dx_rear_end_loss;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar2_mess_bconsist_bit;
};

/**
 * Pack message Radar_Diag_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar_diag_response_pack(
    uint8_t *dst_p,
    const struct radar_radar_diag_response_t *src_p,
    size_t size);

/**
 * Unpack message Radar_Diag_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar_diag_response_unpack(
    struct radar_radar_diag_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t radar_radar_diag_response_r1_diag_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_diag_response_r1_diag_response_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_diag_response_r1_diag_response_is_in_range(uint64_t value);

/**
 * Pack message Radar_Diag_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar_diag_request_pack(
    uint8_t *dst_p,
    const struct radar_radar_diag_request_t *src_p,
    size_t size);

/**
 * Unpack message Radar_Diag_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar_diag_request_unpack(
    struct radar_radar_diag_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t radar_radar_diag_request_r1_diag_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_diag_request_r1_diag_request_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_diag_request_r1_diag_request_is_in_range(uint64_t value);

/**
 * Pack message Radar1_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar1_a_pack(
    uint8_t *dst_p,
    const struct radar_radar1_a_t *src_p,
    size_t size);

/**
 * Unpack message Radar1_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar1_a_unpack(
    struct radar_radar1_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar1_a_radar1_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar1_a_radar1_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar1_a_radar1_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_a_radar1_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar1_a_radar1_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_a_radar1_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_a_radar1_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_a_radar1_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_a_radar1_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_a_radar1_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_a_radar1_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_a_radar1_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_a_radar1_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar1_b_pack(
    uint8_t *dst_p,
    const struct radar_radar1_b_t *src_p,
    size_t size);

/**
 * Unpack message Radar1_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar1_b_unpack(
    struct radar_radar1_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar1_b_radar1_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar1_b_radar1_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar1_b_radar1_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar1_b_radar1_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar_Object_Ender.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar_object_ender_pack(
    uint8_t *dst_p,
    const struct radar_radar_object_ender_t *src_p,
    size_t size);

/**
 * Unpack message Radar_Object_Ender.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar_object_ender_unpack(
    struct radar_radar_object_ender_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_object_ender_radar_timestamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_ender_radar_timestamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_ender_radar_timestamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_object_ender_radar_tc_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_ender_radar_tc_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_ender_radar_tc_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_object_ender_radar_mess_ender_consist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_ender_radar_mess_ender_consist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_ender_radar_mess_ender_consist_bit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_object_ender_radar_packet_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_ender_radar_packet_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_ender_radar_packet_checksum_is_in_range(uint8_t value);

/**
 * Pack message Radar_Object_Starter.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar_object_starter_pack(
    uint8_t *dst_p,
    const struct radar_radar_object_starter_t *src_p,
    size_t size);

/**
 * Unpack message Radar_Object_Starter.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar_object_starter_unpack(
    struct radar_radar_object_starter_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar_object_starter_radar_veh_psi_dt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_starter_radar_veh_psi_dt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_starter_radar_veh_psi_dt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar_object_starter_radar_veh_v_ego_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_starter_radar_veh_v_ego_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_starter_radar_veh_v_ego_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar_object_starter_radar_veh_a_ego_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_starter_radar_veh_a_ego_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_starter_radar_veh_a_ego_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar_object_starter_radar_veh_slip_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_starter_radar_veh_slip_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_starter_radar_veh_slip_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_object_starter_radar_mess_starter_consist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_object_starter_radar_mess_starter_consist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_object_starter_radar_mess_starter_consist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar_status_pack(
    uint8_t *dst_p,
    const struct radar_radar_status_t *src_p,
    size_t size);

/**
 * Unpack message Radar_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar_status_unpack(
    struct radar_radar_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar_status_r_stat_itc_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_status_r_stat_itc_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_status_r_stat_itc_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_status_r_stat_sgu_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_status_r_stat_sgu_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_status_r_stat_sgu_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_status_r_stat_hw_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_status_r_stat_hw_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_status_r_stat_hw_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar_status_r_stat_horizontal_misalignment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_status_r_stat_horizontal_misalignment_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_status_r_stat_horizontal_misalignment_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_status_r_stat_absorption_blindness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_status_r_stat_absorption_blindness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_status_r_stat_absorption_blindness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_status_r_stat_distortion_blindness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_status_r_stat_distortion_blindness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_status_r_stat_distortion_blindness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_status_r_stat_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_status_r_stat_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_status_r_stat_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar_status_r_stat_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar_status_r_stat_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar_status_r_stat_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar2_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar2_a_pack(
    uint8_t *dst_p,
    const struct radar_radar2_a_t *src_p,
    size_t size);

/**
 * Unpack message Radar2_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar2_a_unpack(
    struct radar_radar2_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar2_a_radar2_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar2_a_radar2_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar2_a_radar2_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_a_radar2_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar2_a_radar2_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_a_radar2_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_a_radar2_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_a_radar2_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_a_radar2_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_a_radar2_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_a_radar2_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_a_radar2_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_a_radar2_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int radar_radar2_b_pack(
    uint8_t *dst_p,
    const struct radar_radar2_b_t *src_p,
    size_t size);

/**
 * Unpack message Radar2_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int radar_radar2_b_unpack(
    struct radar_radar2_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t radar_radar2_b_radar2_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t radar_radar2_b_radar2_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double radar_radar2_b_radar2_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool radar_radar2_b_radar2_mess_bconsist_bit_is_in_range(uint8_t value);

#endif
