/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.20.1 Mon Sep 30 20:55:22 2019.
 */

#ifndef BOSCH_XGU_CORNER_RADAR_H
#define BOSCH_XGU_CORNER_RADAR_H

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#ifndef EINVAL
#define EINVAL 22
#endif

/* Frame ids. */
#define BOSCH_XGU_CORNER_RADAR_RADAR2_DIAG_RESPONSE_FRAME_ID (0x7a6u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_DIAG_REQUEST_FRAME_ID (0x7a5u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_DIAG_RESPONSE_FRAME_ID (0x7c1u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_DIAG_REQUEST_FRAME_ID (0x757u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_FRAME_ID (0x505u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_FRAME_ID (0x506u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ01_A_FRAME_ID (0x50fu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ01_B_FRAME_ID (0x510u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ02_A_FRAME_ID (0x519u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ02_B_FRAME_ID (0x51au)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ03_A_FRAME_ID (0x523u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ03_B_FRAME_ID (0x524u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ04_A_FRAME_ID (0x52du)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ04_B_FRAME_ID (0x52eu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ05_A_FRAME_ID (0x537u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ05_B_FRAME_ID (0x538u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ06_A_FRAME_ID (0x541u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ06_B_FRAME_ID (0x542u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ07_A_FRAME_ID (0x54bu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ07_B_FRAME_ID (0x54cu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ08_A_FRAME_ID (0x555u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ08_B_FRAME_ID (0x556u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ09_A_FRAME_ID (0x55fu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ09_B_FRAME_ID (0x560u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ10_A_FRAME_ID (0x569u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ10_B_FRAME_ID (0x56au)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ11_A_FRAME_ID (0x573u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ11_B_FRAME_ID (0x574u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ12_A_FRAME_ID (0x57du)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ12_B_FRAME_ID (0x57eu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ13_A_FRAME_ID (0x587u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ13_B_FRAME_ID (0x588u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ14_A_FRAME_ID (0x591u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ14_B_FRAME_ID (0x592u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ15_A_FRAME_ID (0x59bu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ15_B_FRAME_ID (0x59cu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ16_A_FRAME_ID (0x5a5u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ16_B_FRAME_ID (0x5a6u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ17_A_FRAME_ID (0x5afu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ17_B_FRAME_ID (0x5b0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ18_A_FRAME_ID (0x5b9u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ18_B_FRAME_ID (0x5bau)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ19_A_FRAME_ID (0x5c3u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ19_B_FRAME_ID (0x5c4u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ20_A_FRAME_ID (0x5cdu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ20_B_FRAME_ID (0x5ceu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ21_A_FRAME_ID (0x5d7u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ21_B_FRAME_ID (0x5d8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ22_A_FRAME_ID (0x5e1u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ22_B_FRAME_ID (0x5e2u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ23_A_FRAME_ID (0x5ebu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ23_B_FRAME_ID (0x5ecu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ24_A_FRAME_ID (0x5f5u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ24_B_FRAME_ID (0x5f6u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ25_A_FRAME_ID (0x5ffu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ25_B_FRAME_ID (0x600u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ26_A_FRAME_ID (0x609u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ26_B_FRAME_ID (0x60au)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ27_A_FRAME_ID (0x613u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ27_B_FRAME_ID (0x614u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ28_A_FRAME_ID (0x61du)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ28_B_FRAME_ID (0x61eu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ29_A_FRAME_ID (0x627u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ29_B_FRAME_ID (0x628u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ30_A_FRAME_ID (0x631u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ30_B_FRAME_ID (0x632u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ31_A_FRAME_ID (0x63bu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ31_B_FRAME_ID (0x63cu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET00_A_FRAME_ID (0x645u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET00_B_FRAME_ID (0x646u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET01_A_FRAME_ID (0x64fu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET01_B_FRAME_ID (0x650u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET02_A_FRAME_ID (0x659u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET02_B_FRAME_ID (0x65au)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET03_A_FRAME_ID (0x663u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET03_B_FRAME_ID (0x664u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET04_A_FRAME_ID (0x66du)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET04_B_FRAME_ID (0x66eu)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET05_A_FRAME_ID (0x677u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET05_B_FRAME_ID (0x678u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJECT_ENDER_FRAME_ID (0x681u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJECT_STARTER_FRAME_ID (0x500u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_STATUS_FRAME_ID (0x686u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_FRAME_ID (0x507u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_FRAME_ID (0x508u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ01_A_FRAME_ID (0x511u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ01_B_FRAME_ID (0x512u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ02_A_FRAME_ID (0x51bu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ02_B_FRAME_ID (0x51cu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ03_A_FRAME_ID (0x525u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ03_B_FRAME_ID (0x526u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ04_A_FRAME_ID (0x52fu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ04_B_FRAME_ID (0x530u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ05_A_FRAME_ID (0x539u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ05_B_FRAME_ID (0x53au)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ06_A_FRAME_ID (0x543u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ06_B_FRAME_ID (0x544u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ07_A_FRAME_ID (0x54du)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ07_B_FRAME_ID (0x54eu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ08_A_FRAME_ID (0x557u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ08_B_FRAME_ID (0x558u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ09_A_FRAME_ID (0x561u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ09_B_FRAME_ID (0x562u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ10_A_FRAME_ID (0x56bu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ10_B_FRAME_ID (0x56cu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ11_A_FRAME_ID (0x575u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ11_B_FRAME_ID (0x576u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ12_A_FRAME_ID (0x57fu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ12_B_FRAME_ID (0x580u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ13_A_FRAME_ID (0x589u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ13_B_FRAME_ID (0x58au)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ14_A_FRAME_ID (0x593u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ14_B_FRAME_ID (0x594u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ15_A_FRAME_ID (0x59du)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ15_B_FRAME_ID (0x59eu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ16_A_FRAME_ID (0x5a7u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ16_B_FRAME_ID (0x5a8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ17_A_FRAME_ID (0x5b1u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ17_B_FRAME_ID (0x5b2u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ18_A_FRAME_ID (0x5bbu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ18_B_FRAME_ID (0x5bcu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ19_A_FRAME_ID (0x5c5u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ19_B_FRAME_ID (0x5c6u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ20_A_FRAME_ID (0x5cfu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ20_B_FRAME_ID (0x5d0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ21_A_FRAME_ID (0x5d9u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ21_B_FRAME_ID (0x5dau)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ22_A_FRAME_ID (0x5e3u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ22_B_FRAME_ID (0x5e4u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ23_A_FRAME_ID (0x5edu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ23_B_FRAME_ID (0x5eeu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ24_A_FRAME_ID (0x5f7u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ24_B_FRAME_ID (0x5f8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ25_A_FRAME_ID (0x601u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ25_B_FRAME_ID (0x602u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ26_A_FRAME_ID (0x60bu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ26_B_FRAME_ID (0x60cu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ27_A_FRAME_ID (0x615u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ27_B_FRAME_ID (0x616u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ28_A_FRAME_ID (0x61fu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ28_B_FRAME_ID (0x620u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ29_A_FRAME_ID (0x629u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ29_B_FRAME_ID (0x62au)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ30_A_FRAME_ID (0x633u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ30_B_FRAME_ID (0x634u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ31_A_FRAME_ID (0x63du)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ31_B_FRAME_ID (0x63eu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET00_A_FRAME_ID (0x647u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET00_B_FRAME_ID (0x648u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET01_A_FRAME_ID (0x651u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET01_B_FRAME_ID (0x652u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET02_A_FRAME_ID (0x65bu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET02_B_FRAME_ID (0x65cu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET03_A_FRAME_ID (0x665u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET03_B_FRAME_ID (0x666u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET04_A_FRAME_ID (0x66fu)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET04_B_FRAME_ID (0x670u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET05_A_FRAME_ID (0x679u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET05_B_FRAME_ID (0x67au)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJECT_ENDER_FRAME_ID (0x683u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJECT_STARTER_FRAME_ID (0x502u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_STATUS_FRAME_ID (0x688u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DYN_DATA_FRAME_ID (0xc8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DIM_FRAME_ID (0xc9u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_WHEEL_INFO_FRAME_ID (0xcau)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_INPUT_MOUNT_INFO_FRAME_ID (0x1eau)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_INPUT_MOUNT_INFO_FRAME_ID (0x1ecu)

/* Frame lengths in bytes. */
#define BOSCH_XGU_CORNER_RADAR_RADAR2_DIAG_RESPONSE_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_DIAG_REQUEST_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_DIAG_RESPONSE_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_DIAG_REQUEST_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ01_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ01_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ02_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ02_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ03_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ03_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ04_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ04_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ05_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ05_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ06_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ06_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ07_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ07_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ08_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ08_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ09_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ09_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ10_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ10_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ11_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ11_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ12_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ12_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ13_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ13_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ14_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ14_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ15_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ15_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ16_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ16_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ17_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ17_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ18_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ18_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ19_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ19_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ20_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ20_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ21_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ21_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ22_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ22_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ23_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ23_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ24_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ24_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ25_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ25_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ26_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ26_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ27_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ27_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ28_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ28_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ29_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ29_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ30_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ30_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ31_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ31_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET00_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET00_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET01_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET01_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET02_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET02_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET03_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET03_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET04_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET04_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET05_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET05_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJECT_ENDER_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJECT_STARTER_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_STATUS_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ01_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ01_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ02_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ02_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ03_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ03_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ04_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ04_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ05_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ05_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ06_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ06_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ07_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ07_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ08_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ08_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ09_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ09_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ10_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ10_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ11_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ11_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ12_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ12_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ13_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ13_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ14_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ14_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ15_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ15_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ16_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ16_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ17_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ17_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ18_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ18_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ19_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ19_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ20_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ20_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ21_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ21_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ22_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ22_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ23_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ23_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ24_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ24_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ25_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ25_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ26_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ26_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ27_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ27_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ28_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ28_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ29_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ29_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ30_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ30_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ31_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ31_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET00_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET00_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET01_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET01_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET02_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET02_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET03_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET03_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET04_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET04_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET05_A_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET05_B_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJECT_ENDER_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJECT_STARTER_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_STATUS_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DYN_DATA_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DIM_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_WHEEL_INFO_LENGTH (5u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_INPUT_MOUNT_INFO_LENGTH (8u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_INPUT_MOUNT_INFO_LENGTH (8u)

/* Extended or standard frame types. */
#define BOSCH_XGU_CORNER_RADAR_RADAR2_DIAG_RESPONSE_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_DIAG_REQUEST_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_DIAG_RESPONSE_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_DIAG_REQUEST_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ01_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ01_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ02_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ02_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ03_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ03_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ04_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ04_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ05_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ05_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ06_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ06_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ07_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ07_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ08_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ08_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ09_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ09_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ10_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ10_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ11_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ11_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ12_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ12_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ13_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ13_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ14_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ14_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ15_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ15_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ16_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ16_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ17_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ17_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ18_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ18_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ19_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ19_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ20_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ20_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ21_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ21_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ22_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ22_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ23_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ23_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ24_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ24_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ25_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ25_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ26_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ26_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ27_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ27_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ28_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ28_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ29_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ29_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ30_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ30_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ31_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ31_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET00_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET00_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET01_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET01_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET02_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET02_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET03_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET03_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET04_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET04_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET05_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET05_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJECT_ENDER_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJECT_STARTER_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_STATUS_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ01_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ01_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ02_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ02_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ03_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ03_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ04_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ04_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ05_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ05_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ06_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ06_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ07_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ07_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ08_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ08_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ09_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ09_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ10_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ10_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ11_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ11_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ12_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ12_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ13_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ13_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ14_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ14_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ15_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ15_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ16_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ16_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ17_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ17_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ18_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ18_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ19_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ19_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ20_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ20_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ21_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ21_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ22_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ22_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ23_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ23_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ24_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ24_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ25_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ25_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ26_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ26_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ27_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ27_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ28_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ28_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ29_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ29_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ30_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ30_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ31_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ31_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET00_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET00_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET01_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET01_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET02_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET02_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET03_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET03_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET04_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET04_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET05_A_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET05_B_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJECT_ENDER_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJECT_STARTER_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_STATUS_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DYN_DATA_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DIM_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_WHEEL_INFO_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_INPUT_MOUNT_INFO_IS_EXTENDED (0)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_INPUT_MOUNT_INFO_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define BOSCH_XGU_CORNER_RADAR_RADAR2_DIAG_RESPONSE_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_DIAG_REQUEST_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_DIAG_RESPONSE_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_DIAG_REQUEST_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ01_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ01_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ02_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ02_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ03_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ03_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ04_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ04_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ05_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ05_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ06_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ06_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ07_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ07_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ08_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ08_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ09_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ09_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ10_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ10_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ11_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ11_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ12_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ12_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ13_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ13_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ14_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ14_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ15_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ15_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ16_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ16_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ17_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ17_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ18_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ18_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ19_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ19_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ20_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ20_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ21_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ21_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ22_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ22_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ23_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ23_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ24_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ24_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ25_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ25_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ26_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ26_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ27_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ27_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ28_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ28_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ29_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ29_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ30_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ30_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ31_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ31_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET00_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET00_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET01_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET01_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET02_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET02_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET03_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET03_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET04_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET04_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET05_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_TARGET05_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJECT_ENDER_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJECT_STARTER_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_STATUS_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ01_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ01_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ02_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ02_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ03_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ03_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ04_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ04_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ05_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ05_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ06_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ06_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ07_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ07_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ08_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ08_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ09_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ09_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ10_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ10_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ11_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ11_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ12_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ12_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ13_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ13_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ14_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ14_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ15_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ15_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ16_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ16_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ17_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ17_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ18_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ18_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ19_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ19_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ20_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ20_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ21_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ21_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ22_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ22_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ23_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ23_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ24_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ24_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ25_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ25_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ26_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ26_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ27_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ27_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ28_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ28_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ29_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ29_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ30_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ30_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ31_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ31_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET00_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET00_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET01_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET01_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET02_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET02_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET03_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET03_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET04_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET04_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET05_A_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_TARGET05_B_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJECT_ENDER_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJECT_STARTER_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_STATUS_CYCLE_TIME_MS (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DYN_DATA_CYCLE_TIME_MS (20u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DIM_CYCLE_TIME_MS (1000u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_WHEEL_INFO_CYCLE_TIME_MS (1000u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_INPUT_MOUNT_INFO_CYCLE_TIME_MS (1000u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_INPUT_MOUNT_INFO_CYCLE_TIME_MS (1000u)

/* Signal choices. */
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_RADAR1_OBJ00_FLAG_VALID_RADAR1_OBJECT_INVALID_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_RADAR1_OBJ00_FLAG_VALID_RADAR1_OBJECT_VALID_CHOICE (1u)

#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_RADAR1_OBJ00_FLAG_MEAS_RADAR1_OBJECT_NOT_MEASURED_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_RADAR1_OBJ00_FLAG_MEAS_RADAR1_OBJECT_MEASURED_CHOICE (1u)

#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_RADAR1_OBJ00_FLAG_HIST_RADAR1_NEW_OBJECT_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_A_RADAR1_OBJ00_FLAG_HIST_RADAR1_OBJECT_PREV_PRESENT_CHOICE (1u)

#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_MOVING_STATE_UNKNOWN__UNCLASSIFIED_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_MOVING_STATE_MOVING_CHOICE (1u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_MOVING_STATE_STOPPED_CHOICE (2u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_MOVING_STATE_STANDING_CHOICE (3u)

#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_CLASS_UNKNOWN_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_CLASS_MOVING_FOUR_WHEEL_VEH_CHOICE (1u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_CLASS_MOVING_TWO_WHEEL_VEH_CHOICE (2u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_CLASS_MOVING_PEDESTRIAN_CHOICE (3u)
#define BOSCH_XGU_CORNER_RADAR_RADAR1_OBJ00_B_RADAR1_OBJ00_CLASS_CONST_ELEM_CHOICE (4u)

#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_RADAR2_OBJ00_FLAG_VALID_RADAR1_OBJECT_INVALID_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_RADAR2_OBJ00_FLAG_VALID_RADAR1_OBJECT_VALID_CHOICE (1u)

#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_RADAR2_OBJ00_FLAG_MEAS_RADAR1_OBJECT_NOT_MEASURED_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_RADAR2_OBJ00_FLAG_MEAS_RADAR1_OBJECT_MEASURED_CHOICE (1u)

#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_RADAR2_OBJ00_FLAG_HIST_RADAR1_NEW_OBJECT_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_A_RADAR2_OBJ00_FLAG_HIST_RADAR1_OBJECT_PREV_PRESENT_CHOICE (1u)

#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_MOVING_STATE_UNKNOWN__UNCLASSIFIED_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_MOVING_STATE_MOVING_CHOICE (1u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_MOVING_STATE_STOPPED_CHOICE (2u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_MOVING_STATE_STANDING_CHOICE (3u)

#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_CLASS_UNKNOWN_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_CLASS_MOVING_FOUR_WHEEL_VEH_CHOICE (1u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_CLASS_MOVING_TWO_WHEEL_VEH_CHOICE (2u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_CLASS_MOVING_PEDESTRIAN_CHOICE (3u)
#define BOSCH_XGU_CORNER_RADAR_RADAR2_OBJ00_B_RADAR2_OBJ00_CLASS_CONST_ELEM_CHOICE (4u)

#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DYN_DATA_RI_VEH_PRNDSTAT_PARK_CHOICE (0u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DYN_DATA_RI_VEH_PRNDSTAT_REVERSE_CHOICE (1u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DYN_DATA_RI_VEH_PRNDSTAT_NEUTRAL_CHOICE (2u)
#define BOSCH_XGU_CORNER_RADAR_RADAR_INPUT_VEH_DYN_DATA_RI_VEH_PRNDSTAT_DRIVE_CHOICE (3u)

/**
 * Signals in message Radar2_Diag_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_diag_response_t {
  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint64_t r2_diag_response;
};

/**
 * Signals in message Radar2_Diag_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_diag_request_t {
  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint64_t r2_diag_request;
};

/**
 * Signals in message Radar1_Diag_Response.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_diag_response_t {
  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint64_t r1_diag_response;
};

/**
 * Signals in message Radar1_Diag_Request.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_diag_request_t {
  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint64_t r1_diag_request;
};

/**
 * Signals in message Radar1_Obj00_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj00_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj00_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj00_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj00_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj00_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj00_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj00_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj00_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj00_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj00_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj00_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj00_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj00_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj00_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj00_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj00_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj00_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj00_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj00_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj00_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj00_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj00_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj00_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj00_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj00_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj00_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj01_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj01_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj01_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj01_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj01_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj01_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj01_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj01_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj01_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj01_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj01_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj01_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj01_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj01_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj01_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj01_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj01_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj01_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj01_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj01_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj01_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj01_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj01_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj01_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj01_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj01_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj01_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj02_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj02_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj02_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj02_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj02_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj02_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj02_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj02_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj02_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj02_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj02_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj02_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj02_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj02_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj02_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj02_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj02_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj02_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj02_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj02_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj02_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj02_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj02_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj02_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj02_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj02_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj02_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj03_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj03_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj03_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj03_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj03_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj03_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj03_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj03_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj03_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj03_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj03_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj03_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj03_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj03_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj03_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj03_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj03_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj03_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj03_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj03_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj03_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj03_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj03_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj03_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj03_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj03_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj03_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj04_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj04_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj04_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj04_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj04_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj04_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj04_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj04_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj04_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj04_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj04_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj04_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj04_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj04_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj04_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj04_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj04_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj04_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj04_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj04_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj04_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj04_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj04_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj04_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj04_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj04_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj04_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj05_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj05_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj05_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj05_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj05_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj05_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj05_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj05_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj05_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj05_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj05_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj05_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj05_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj05_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj05_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj05_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj05_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj05_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj05_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj05_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj05_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj05_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj05_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj05_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj05_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj05_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj05_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj06_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj06_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj06_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj06_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj06_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj06_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj06_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj06_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj06_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj06_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj06_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj06_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj06_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj06_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj06_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj06_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj06_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj06_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj06_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj06_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj06_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj06_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj06_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj06_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj06_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj06_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj06_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj07_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj07_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj07_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj07_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj07_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj07_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj07_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj07_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj07_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj07_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj07_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj07_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj07_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj07_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj07_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj07_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj07_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj07_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj07_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj07_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj07_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj07_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj07_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj07_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj07_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj07_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj07_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj08_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj08_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj08_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj08_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj08_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj08_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj08_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj08_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj08_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj08_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj08_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj08_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj08_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj08_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj08_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj08_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj08_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj08_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj08_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj08_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj08_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj08_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj08_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj08_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj08_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj08_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj08_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj09_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj09_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj09_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj09_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj09_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj09_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj09_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj09_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj09_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj09_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj09_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj09_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj09_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj09_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj09_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj09_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj09_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj09_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj09_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj09_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj09_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj09_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj09_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj09_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj09_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj09_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj09_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj10_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj10_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj10_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj10_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj10_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj10_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj10_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj10_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj10_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj10_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj10_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj10_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj10_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj10_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj10_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj10_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj10_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj10_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj10_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj10_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj10_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj10_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj10_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj10_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj10_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj10_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj10_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj11_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj11_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj11_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj11_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj11_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj11_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj11_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj11_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj11_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj11_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj11_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj11_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj11_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj11_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj11_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj11_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj11_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj11_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj11_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj11_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj11_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj11_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj11_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj11_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj11_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj11_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj11_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj12_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj12_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj12_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj12_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj12_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj12_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj12_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj12_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj12_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj12_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj12_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj12_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj12_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj12_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj12_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj12_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj12_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj12_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj12_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj12_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj12_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj12_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj12_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj12_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj12_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj12_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj12_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj13_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj13_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj13_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj13_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj13_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj13_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj13_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj13_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj13_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj13_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj13_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj13_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj13_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj13_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj13_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj13_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj13_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj13_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj13_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj13_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj13_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj13_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj13_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj13_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj13_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj13_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj13_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj14_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj14_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj14_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj14_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj14_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj14_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj14_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj14_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj14_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj14_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj14_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj14_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj14_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj14_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj14_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj14_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj14_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj14_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj14_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj14_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj14_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj14_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj14_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj14_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj14_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj14_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj14_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj15_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj15_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj15_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj15_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj15_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj15_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj15_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj15_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj15_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj15_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj15_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj15_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj15_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj15_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj15_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj15_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj15_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj15_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj15_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj15_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj15_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj15_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj15_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj15_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj15_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj15_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj15_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj16_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj16_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj16_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj16_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj16_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj16_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj16_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj16_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj16_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj16_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj16_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj16_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj16_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj16_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj16_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj16_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj16_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj16_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj16_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj16_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj16_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj16_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj16_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj16_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj16_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj16_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj16_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj17_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj17_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj17_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj17_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj17_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj17_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj17_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj17_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj17_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj17_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj17_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj17_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj17_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj17_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj17_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj17_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj17_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj17_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj17_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj17_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj17_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj17_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj17_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj17_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj17_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj17_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj17_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj18_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj18_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj18_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj18_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj18_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj18_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj18_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj18_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj18_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj18_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj18_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj18_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj18_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj18_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj18_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj18_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj18_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj18_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj18_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj18_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj18_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj18_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj18_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj18_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj18_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj18_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj18_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj19_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj19_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj19_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj19_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj19_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj19_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj19_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj19_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj19_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj19_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj19_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj19_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj19_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj19_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj19_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj19_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj19_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj19_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj19_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj19_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj19_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj19_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj19_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj19_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj19_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj19_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj19_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj20_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj20_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj20_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj20_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj20_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj20_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj20_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj20_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj20_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj20_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj20_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj20_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj20_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj20_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj20_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj20_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj20_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj20_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj20_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj20_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj20_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj20_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj20_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj20_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj20_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj20_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj20_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj21_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj21_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj21_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj21_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj21_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj21_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj21_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj21_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj21_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj21_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj21_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj21_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj21_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj21_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj21_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj21_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj21_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj21_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj21_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj21_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj21_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj21_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj21_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj21_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj21_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj21_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj21_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj22_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj22_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj22_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj22_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj22_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj22_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj22_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj22_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj22_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj22_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj22_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj22_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj22_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj22_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj22_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj22_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj22_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj22_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj22_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj22_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj22_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj22_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj22_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj22_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj22_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj22_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj22_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj23_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj23_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj23_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj23_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj23_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj23_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj23_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj23_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj23_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj23_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj23_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj23_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj23_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj23_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj23_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj23_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj23_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj23_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj23_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj23_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj23_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj23_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj23_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj23_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj23_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj23_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj23_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj24_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj24_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj24_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj24_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj24_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj24_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj24_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj24_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj24_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj24_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj24_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj24_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj24_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj24_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj24_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj24_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj24_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj24_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj24_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj24_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj24_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj24_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj24_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj24_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj24_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj24_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj24_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj25_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj25_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj25_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj25_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj25_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj25_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj25_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj25_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj25_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj25_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj25_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj25_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj25_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj25_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj25_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj25_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj25_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj25_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj25_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj25_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj25_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj25_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj25_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj25_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj25_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj25_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj25_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj26_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj26_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj26_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj26_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj26_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj26_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj26_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj26_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj26_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj26_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj26_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj26_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj26_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj26_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj26_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj26_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj26_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj26_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj26_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj26_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj26_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj26_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj26_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj26_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj26_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj26_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj26_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj27_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj27_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj27_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj27_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj27_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj27_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj27_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj27_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj27_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj27_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj27_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj27_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj27_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj27_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj27_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj27_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj27_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj27_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj27_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj27_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj27_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj27_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj27_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj27_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj27_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj27_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj27_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj28_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj28_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj28_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj28_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj28_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj28_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj28_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj28_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj28_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj28_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj28_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj28_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj28_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj28_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj28_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj28_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj28_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj28_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj28_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj28_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj28_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj28_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj28_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj28_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj28_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj28_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj28_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj29_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj29_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj29_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj29_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj29_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj29_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj29_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj29_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj29_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj29_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj29_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj29_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj29_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj29_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj29_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj29_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj29_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj29_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj29_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj29_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj29_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj29_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj29_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj29_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj29_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj29_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj29_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj30_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj30_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj30_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj30_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj30_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj30_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj30_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj30_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj30_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj30_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj30_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj30_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj30_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj30_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj30_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj30_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj30_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj30_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj30_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj30_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj30_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj30_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj30_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj30_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj30_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj30_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj30_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Obj31_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj31_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj31_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_obj31_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_obj31_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj31_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_obj31_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj31_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj31_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj31_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj31_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj31_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj31_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Obj31_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_obj31_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_obj31_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj31_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_obj31_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj31_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj31_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj31_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj31_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_obj31_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_obj31_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj31_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_obj31_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_obj31_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Target00_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target00_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target00_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target00_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_target00_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target00_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_target00_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target00_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target00_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target00_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target00_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target00_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target00_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Target00_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target00_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_target00_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target00_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_target00_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target00_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target00_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target00_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target00_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target00_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target00_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target00_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target00_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target00_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Target01_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target01_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target01_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target01_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_target01_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target01_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_target01_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target01_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target01_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target01_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target01_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target01_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target01_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Target01_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target01_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_target01_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target01_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_target01_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target01_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target01_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target01_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target01_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target01_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target01_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target01_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target01_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target01_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Target02_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target02_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target02_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target02_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_target02_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target02_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_target02_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target02_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target02_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target02_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target02_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target02_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target02_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Target02_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target02_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_target02_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target02_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_target02_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target02_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target02_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target02_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target02_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target02_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target02_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target02_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target02_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target02_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Target03_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target03_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target03_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target03_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_target03_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target03_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_target03_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target03_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target03_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target03_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target03_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target03_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target03_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Target03_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target03_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_target03_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target03_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_target03_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target03_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target03_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target03_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target03_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target03_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target03_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target03_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target03_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target03_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Target04_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target04_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target04_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target04_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_target04_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target04_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_target04_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target04_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target04_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target04_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target04_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target04_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target04_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Target04_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target04_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_target04_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target04_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_target04_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target04_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target04_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target04_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target04_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target04_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target04_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target04_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target04_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target04_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Target05_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target05_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target05_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_target05_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar1_target05_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target05_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_target05_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target05_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target05_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target05_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target05_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target05_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target05_mess_aconsist_bit;
};

/**
 * Signals in message Radar1_Target05_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_target05_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar1_target05_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target05_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar1_target05_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target05_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target05_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target05_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target05_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar1_target05_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar1_target05_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target05_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar1_target05_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_target05_mess_bconsist_bit;
};

/**
 * Signals in message Radar1_Object_Ender.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_object_ender_t {
  /**
   * Range: 0..255 (0..0.2490234375 s)
   * Scale: 0.0009765625
   * Offset: 0
   */
  uint8_t radar1_timestamp;

  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_tc_counter;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_mess_ender_consist_bit;

  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_packet_checksum;
};

/**
 * Signals in message Radar1_Object_Starter.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_object_starter_t {
  /**
   * Range: 0..65535 (-2..1.99993896484375 rad/s)
   * Scale: 6.103515625e-05
   * Offset: -2
   */
  uint16_t radar1_veh_psi_dt;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar1_veh_v_ego;

  /**
   * Range: 0..1023 (-16..15.96875 m/s²)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar1_veh_a_ego;

  /**
   * Range: 0..16383 (-0.5..0.49993896484375 Rad)
   * Scale: 6.103515625e-05
   * Offset: -0.5
   */
  uint16_t radar1_veh_slip_angle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar1_mess_starter_consist_bit;
};

/**
 * Signals in message Radar1_Status.
 *
 * Radar1 sensor status message
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_status_t {
  /**
   * Radar1 ITC of the lowest active fault
   *
   * Range: 0..65535 (0..65535 -)
   * Scale: 1
   * Offset: 0
   */
  uint16_t r1_stat_itc_info;

  /**
   * Radar1 System Fault indicator
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r1_stat_sgu_fail;

  /**
   * Radar1 Hardware Failure indicator
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r1_stat_hw_fail;

  /**
   * Radar1 Horizontal Misalignment
   *
   * Range: 0..4095 (-0.2048..0.2047 rad)
   * Scale: 0.0001
   * Offset: -0.2048
   */
  uint16_t r1_stat_horizontal_misalignment;

  /**
   * Radar1 Absorption Blindness status indicator
   *
   * Range: 0..255 (0..0.99609375 -)
   * Scale: 0.00390625
   * Offset: 0
   */
  uint8_t r1_stat_absorption_blindness;

  /**
   * Radar1 Distortion Blindness status indicator
   *
   * Range: 0..255 (0..0.99609375 -)
   * Scale: 0.00390625
   * Offset: 0
   */
  uint8_t r1_stat_distortion_blindness;

  /**
   * Radar1 Status Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r1_stat_mc;

  /**
   * Radar1 Status CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r1_stat_crc;
};

/**
 * Signals in message Radar2_Obj00_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj00_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj00_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj00_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj00_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj00_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj00_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj00_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj00_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj00_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj00_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj00_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj00_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj00_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj00_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj00_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj00_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj00_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj00_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj00_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj00_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj00_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj00_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj00_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj00_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj00_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj00_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj01_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj01_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj01_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj01_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj01_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj01_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj01_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj01_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj01_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj01_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj01_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj01_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj01_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj01_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj01_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj01_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj01_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj01_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj01_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj01_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj01_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj01_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj01_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj01_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj01_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj01_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj01_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj02_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj02_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj02_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj02_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj02_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj02_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj02_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj02_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj02_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj02_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj02_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj02_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj02_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj02_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj02_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj02_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj02_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj02_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj02_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj02_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj02_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj02_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj02_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj02_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj02_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj02_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj02_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj03_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj03_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj03_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj03_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj03_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj03_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj03_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj03_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj03_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj03_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj03_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj03_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj03_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj03_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj03_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj03_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj03_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj03_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj03_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj03_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj03_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj03_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj03_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj03_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj03_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj03_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj03_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj04_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj04_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj04_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj04_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj04_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj04_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj04_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj04_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj04_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj04_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj04_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj04_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj04_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj04_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj04_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj04_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj04_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj04_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj04_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj04_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj04_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj04_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj04_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj04_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj04_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj04_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj04_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj05_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj05_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj05_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj05_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj05_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj05_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj05_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj05_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj05_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj05_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj05_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj05_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj05_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj05_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj05_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj05_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj05_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj05_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj05_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj05_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj05_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj05_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj05_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj05_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj05_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj05_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj05_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj06_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj06_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj06_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj06_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj06_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj06_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj06_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj06_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj06_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj06_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj06_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj06_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj06_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj06_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj06_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj06_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj06_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj06_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj06_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj06_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj06_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj06_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj06_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj06_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj06_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj06_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj06_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj07_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj07_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj07_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj07_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj07_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj07_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj07_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj07_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj07_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj07_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj07_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj07_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj07_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj07_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj07_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj07_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj07_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj07_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj07_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj07_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj07_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj07_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj07_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj07_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj07_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj07_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj07_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj08_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj08_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj08_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj08_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj08_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj08_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj08_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj08_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj08_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj08_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj08_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj08_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj08_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj08_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj08_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj08_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj08_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj08_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj08_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj08_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj08_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj08_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj08_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj08_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj08_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj08_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj08_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj09_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj09_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj09_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj09_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj09_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj09_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj09_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj09_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj09_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj09_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj09_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj09_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj09_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj09_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj09_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj09_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj09_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj09_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj09_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj09_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj09_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj09_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj09_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj09_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj09_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj09_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj09_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj10_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj10_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj10_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj10_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj10_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj10_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj10_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj10_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj10_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj10_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj10_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj10_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj10_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj10_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj10_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj10_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj10_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj10_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj10_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj10_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj10_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj10_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj10_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj10_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj10_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj10_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj10_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj11_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj11_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj11_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj11_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj11_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj11_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj11_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj11_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj11_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj11_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj11_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj11_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj11_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj11_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj11_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj11_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj11_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj11_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj11_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj11_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj11_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj11_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj11_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj11_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj11_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj11_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj11_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj12_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj12_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj12_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj12_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj12_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj12_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj12_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj12_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj12_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj12_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj12_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj12_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj12_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj12_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj12_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj12_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj12_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj12_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj12_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj12_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj12_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj12_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj12_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj12_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj12_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj12_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj12_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj13_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj13_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj13_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj13_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj13_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj13_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj13_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj13_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj13_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj13_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj13_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj13_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj13_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj13_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj13_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj13_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj13_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj13_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj13_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj13_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj13_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj13_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj13_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj13_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj13_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj13_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj13_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj14_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj14_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj14_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj14_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj14_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj14_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj14_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj14_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj14_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj14_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj14_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj14_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj14_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj14_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj14_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj14_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj14_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj14_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj14_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj14_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj14_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj14_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj14_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj14_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj14_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj14_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj14_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj15_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj15_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj15_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj15_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj15_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj15_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj15_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj15_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj15_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj15_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj15_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj15_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj15_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj15_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj15_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj15_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj15_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj15_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj15_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj15_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj15_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj15_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj15_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj15_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj15_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj15_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj15_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj16_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj16_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj16_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj16_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj16_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj16_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj16_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj16_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj16_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj16_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj16_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj16_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj16_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj16_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj16_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj16_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj16_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj16_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj16_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj16_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj16_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj16_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj16_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj16_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj16_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj16_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj16_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj17_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj17_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj17_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj17_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj17_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj17_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj17_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj17_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj17_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj17_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj17_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj17_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj17_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj17_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj17_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj17_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj17_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj17_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj17_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj17_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj17_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj17_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj17_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj17_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj17_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj17_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj17_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj18_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj18_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj18_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj18_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj18_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj18_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj18_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj18_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj18_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj18_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj18_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj18_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj18_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj18_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj18_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj18_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj18_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj18_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj18_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj18_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj18_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj18_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj18_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj18_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj18_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj18_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj18_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj19_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj19_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj19_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj19_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj19_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj19_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj19_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj19_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj19_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj19_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj19_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj19_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj19_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj19_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj19_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj19_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj19_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj19_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj19_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj19_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj19_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj19_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj19_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj19_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj19_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj19_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj19_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj20_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj20_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj20_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj20_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj20_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj20_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj20_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj20_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj20_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj20_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj20_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj20_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj20_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj20_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj20_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj20_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj20_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj20_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj20_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj20_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj20_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj20_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj20_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj20_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj20_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj20_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj20_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj21_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj21_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj21_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj21_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj21_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj21_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj21_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj21_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj21_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj21_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj21_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj21_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj21_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj21_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj21_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj21_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj21_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj21_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj21_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj21_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj21_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj21_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj21_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj21_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj21_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj21_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj21_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj22_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj22_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj22_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj22_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj22_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj22_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj22_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj22_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj22_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj22_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj22_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj22_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj22_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj22_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj22_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj22_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj22_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj22_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj22_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj22_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj22_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj22_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj22_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj22_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj22_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj22_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj22_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj23_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj23_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj23_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj23_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj23_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj23_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj23_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj23_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj23_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj23_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj23_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj23_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj23_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj23_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj23_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj23_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj23_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj23_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj23_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj23_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj23_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj23_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj23_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj23_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj23_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj23_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj23_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj24_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj24_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj24_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj24_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj24_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj24_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj24_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj24_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj24_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj24_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj24_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj24_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj24_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj24_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj24_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj24_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj24_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj24_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj24_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj24_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj24_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj24_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj24_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj24_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj24_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj24_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj24_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj25_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj25_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj25_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj25_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj25_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj25_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj25_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj25_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj25_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj25_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj25_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj25_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj25_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj25_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj25_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj25_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj25_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj25_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj25_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj25_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj25_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj25_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj25_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj25_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj25_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj25_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj25_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj26_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj26_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj26_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj26_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj26_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj26_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj26_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj26_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj26_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj26_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj26_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj26_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj26_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj26_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj26_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj26_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj26_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj26_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj26_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj26_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj26_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj26_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj26_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj26_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj26_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj26_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj26_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj27_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj27_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj27_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj27_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj27_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj27_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj27_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj27_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj27_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj27_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj27_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj27_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj27_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj27_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj27_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj27_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj27_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj27_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj27_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj27_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj27_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj27_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj27_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj27_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj27_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj27_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj27_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj28_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj28_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj28_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj28_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj28_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj28_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj28_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj28_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj28_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj28_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj28_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj28_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj28_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj28_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj28_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj28_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj28_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj28_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj28_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj28_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj28_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj28_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj28_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj28_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj28_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj28_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj28_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj29_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj29_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj29_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj29_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj29_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj29_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj29_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj29_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj29_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj29_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj29_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj29_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj29_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj29_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj29_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj29_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj29_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj29_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj29_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj29_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj29_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj29_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj29_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj29_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj29_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj29_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj29_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj30_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj30_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj30_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj30_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj30_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj30_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj30_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj30_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj30_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj30_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj30_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj30_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj30_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj30_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj30_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj30_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj30_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj30_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj30_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj30_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj30_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj30_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj30_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj30_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj30_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj30_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj30_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Obj31_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj31_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj31_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_obj31_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_obj31_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj31_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_obj31_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj31_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj31_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj31_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj31_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj31_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj31_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Obj31_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_obj31_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_obj31_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj31_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_obj31_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj31_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj31_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj31_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj31_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_obj31_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)b v
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_obj31_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj31_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_obj31_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_obj31_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Target00_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target00_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target00_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target00_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_target00_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target00_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_target00_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target00_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target00_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target00_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target00_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target00_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target00_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Target00_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target00_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_target00_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target00_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_target00_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target00_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target00_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target00_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target00_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target00_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target00_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target00_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target00_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target00_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Target01_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target01_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target01_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target01_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_target01_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target01_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_target01_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target01_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target01_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target01_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target01_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target01_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target01_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Target01_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target01_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_target01_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target01_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_target01_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target01_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target01_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target01_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target01_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target01_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target01_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target01_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target01_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target01_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Target02_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target02_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target02_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target02_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_target02_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target02_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_target02_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target02_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target02_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target02_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target02_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target02_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target02_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Target02_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target02_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_target02_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target02_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_target02_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target02_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target02_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target02_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target02_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target02_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target02_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target02_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target02_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target02_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Target03_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target03_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target03_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target03_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_target03_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target03_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_target03_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target03_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target03_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target03_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target03_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target03_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target03_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Target03_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target03_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_target03_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target03_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_target03_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target03_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target03_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target03_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target03_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target03_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target03_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target03_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target03_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target03_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Target04_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target04_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target04_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target04_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_target04_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target04_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_target04_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target04_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target04_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target04_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target04_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target04_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target04_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Target04_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target04_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_target04_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target04_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_target04_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target04_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target04_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target04_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target04_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target04_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target04_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target04_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target04_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target04_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Target05_A.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target05_a_t {
  /**
   * Range: 0..4095 (-128..127.9375 m)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target05_dx;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_target05_vx;

  /**
   * Range: 0..2047 (-128..127.875 m)
   * Scale: 0.125
   * Offset: -128
   */
  uint16_t radar2_target05_dy;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target05_w_exist;

  /**
   * Range: 0..1023 (-16..15.96875 m/s2)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_target05_ax;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target05_w_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target05_flag_valid;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target05_w_non_obstacle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target05_flag_meas;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target05_flag_hist;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target05_mess_aconsist_bit;
};

/**
 * Signals in message Radar2_Target05_B.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_target05_b_t {
  /**
   * Range: 0..1023 (-64..63.875 m/s)
   * Scale: 0.125
   * Offset: -64
   */
  uint16_t radar2_target05_vy;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target05_d_length;

  /**
   * Range: 0..63 (-5..10.75 m)
   * Scale: 0.25
   * Offset: -5
   */
  uint8_t radar2_target05_dz;

  /**
   * Range: 0..3 (0..3 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target05_moving_state;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target05_dx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target05_vx_sigma;

  /**
   * Range: 0..63 (0..3.9375 m/s2)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target05_ax_sigma;

  /**
   * Range: 0..63 (0..3.9375 m)
   * Scale: 0.0625
   * Offset: 0
   */
  uint8_t radar2_target05_dy_sigma;

  /**
   * Range: 0..31 (0..0.96875 -)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t radar2_target05_w_class;

  /**
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target05_class;

  /**
   * Range: 0..63 (0..7.875 m)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t radar2_target05_dx_rear_end_loss;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_target05_mess_bconsist_bit;
};

/**
 * Signals in message Radar2_Object_Ender.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_object_ender_t {
  /**
   * Range: 0..255 (0..0.2490234375 s)
   * Scale: 0.0009765625
   * Offset: 0
   */
  uint8_t radar2_object_timestamp;

  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_tc_counter;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_mess_ender_consist_bit;

  /**
   * Range: -
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_packet_checksum;
};

/**
 * Signals in message Radar2_Object_Starter.
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_object_starter_t {
  /**
   * Range: 0..65535 (-2..1.99993896484375 rad/s)
   * Scale: 6.103515625e-05
   * Offset: -2
   */
  uint16_t radar2_veh_psi_dt;

  /**
   * Range: 0..4095 (-128..127.9375 m/s)
   * Scale: 0.0625
   * Offset: -128
   */
  uint16_t radar2_veh_v_ego;

  /**
   * Range: 0..1023 (-16..15.96875 m/s²)
   * Scale: 0.03125
   * Offset: -16
   */
  uint16_t radar2_veh_a_ego;

  /**
   * Range: 0..16383 (-0.5..0.49993896484375 Rad)
   * Scale: 6.103515625e-05
   * Offset: -0.5
   */
  uint16_t radar2_veh_slip_angle;

  /**
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t radar2_mess_starter_consist_bit;
};

/**
 * Signals in message Radar2_Status.
 *
 * Radar2 sensor status message
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_status_t {
  /**
   * Radar2 ITC of the lowest active fault
   *
   * Range: 0..65535 (0..65535 -)
   * Scale: 1
   * Offset: 0
   */
  uint16_t r2_stat_itc_info;

  /**
   * Radar2 System Fault indicator
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r2_stat_sgu_fail;

  /**
   * Radar2 Hardware Failure indicator
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r2_stat_hw_fail;

  /**
   * Radar2 Horizontal Misalignment
   *
   * Range: 0..4095 (-0.2048..0.2047 rad)
   * Scale: 0.0001
   * Offset: -0.2048
   */
  uint16_t r2_stat_horizontal_misalignment;

  /**
   * Radar2 Absorption Blindness status indicator
   *
   * Range: 0..255 (0..0.99609375 -)
   * Scale: 0.00390625
   * Offset: 0
   */
  uint8_t r2_stat_absorption_blindness;

  /**
   * Radar2 Distortion Blindness status indicator
   *
   * Range: 0..255 (0..0.99609375 -)
   * Scale: 0.00390625
   * Offset: 0
   */
  uint8_t r2_stat_distortion_blindness;

  /**
   * Radar2 Status Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r2_stat_mc;

  /**
   * Radar2 Status CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r2_stat_crc;
};

/**
 * Signals in message Radar_Input_Veh_DynData.
 *
 * Vehicle Dynamic Data Message
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar_input_veh_dyn_data_t {
  /**
   * Vehicle steering angle
   *
   * Range: -32768..32767 (-1024..1023.96875 deg)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t ri_veh_steer_angle;

  /**
   * Vehicle velocity
   *
   * Range: -32768..32767 (-2048..2047.9375 km/h)
   * Scale: 0.0625
   * Offset: 0
   */
  int16_t ri_veh_velocity;

  /**
   * 1: Radar will use vehicle steering angle
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_use_steer_angle;

  /**
   * 1: Vehicle is at standstill. 0: Vehicle is not at standstill.
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_standstill;

  /**
   * Vehicle YawRate
   *
   * Range: -8192..8191 (-409.6..409.55 deg/s)
   * Scale: 0.05
   * Offset: 0
   */
  int16_t ri_veh_yaw_rate;

  /**
   * Radar_Input_Veh_DynData Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_mc;

  /**
   * Indicates that any type of ESP event (ESC,ABS,etc.) is active
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_any_wheel_slip_event;

  /**
   * Vehicle Current Gear Status
   *
   * Range: 0..7 (0..7 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_prndstat;

  /**
   * Radar_Input_Veh_DynData CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_veh_crc;
};

/**
 * Signals in message Radar_Input_Veh_Dim.
 *
 * Vehicle Dimension information
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar_input_veh_dim_t {
  /**
   * Maximum width of vehicle
   *
   * Range: 0..255 (0..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t ri_vd_max_width;

  /**
   * Minimum width of vehicle
   *
   * Range: 0..255 (0..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t ri_vd_min_width;

  /**
   * Longitudinal distance to front bumper from center of rear axle
   *
   * Range: -256..255 (-8..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t ri_vd_long_front_bumper_pos;

  /**
   * Longitudinal distance to rear bumper from center of rear axle
   *
   * Range: -256..255 (-8..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t ri_vd_long_rear_bumper_pos;

  /**
   * Radar_Input_Veh_Dim Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_vd_mc;

  /**
   * Radar_Input_Veh_Dim CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_vd_crc;
};

/**
 * Signals in message Radar_Input_Wheel_Info.
 *
 * Vehicle Wheel-related information
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar_input_wheel_info_t {
  /**
   * Distance from center of front wheel to center of rear wheel
   *
   * Range: 0..255 (0..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t ri_wi_wheel_base;

  /**
   * Distance from center of left wheel to center of right wheel of the non-driven axle
   *
   * Range: 0..255 (0..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  uint8_t ri_wi_track_width;

  /**
   * Ratio of steering wheel angle to angle at the wheels
   *
   * Range: 0..255 (0..31.875 -)
   * Scale: 0.125
   * Offset: 0
   */
  uint8_t ri_wi_steering_angle_ratio;

  /**
   * Radar_Input_Wheel_Info Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_wi_mc;

  /**
   * Radar_Input_Wheel_Info CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t ri_wi_crc;
};

/**
 * Signals in message Radar1_Input_MountInfo.
 *
 * Radar1 Sensor Mounting Information
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar1_input_mount_info_t {
  /**
   * Lateral distance to sensor from center of vehicle, Left = positive
   *
   * Range: -64..63 (-2..1.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int8_t r1_i_mi_lat_sensor_mount_to_center;

  /**
   * Longitudinal distance to sensor from center of rear axle
   *
   * Range: -256..255 (-8..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t r1_i_mi_long_sensor_mount_to_rear_axle;

  /**
   * Sensor mounting height from ground
   *
   * Range: 0..255 (0..1.275 m)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t r1_i_mi_sensor_height;

  /**
   * Sensor Orientation: 0: Connector Down, 1: Connector Up
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r1_i_mi_sensor_orientation;

  /**
   * Sensor Mounting Angle, 0: Straight Forward, Positive: Counter-Clockwise, Negative: Clockwise
   *
   * Range: -16384..16383 (-3.2768..3.2766 rad)
   * Scale: 0.0002
   * Offset: 0
   */
  int16_t r1_i_mi_sensor_mount_angle;

  /**
   * Radar1_Input_MountInfo Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r1_i_mi_mc;

  /**
   * Radar1_Input_MountInfo CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r1_i_mi_crc;
};

/**
 * Signals in message Radar2_Input_MountInfo.
 *
 * Radar2 Sensor Mounting Information
 *
 * All signal values are as on the CAN bus.
 */
struct bosch_xgu_corner_radar_radar2_input_mount_info_t {
  /**
   * Lateral distance to sensor from center of vehicle, Left = positive
   *
   * Range: -64..63 (-2..1.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int8_t r2_i_mi_lat_sensor_mount_to_center;

  /**
   * Longitudinal distance to sensor from center of rear axle
   *
   * Range: -256..255 (-8..7.96875 m)
   * Scale: 0.03125
   * Offset: 0
   */
  int16_t r2_i_mi_long_sensor_mount_to_rear_axle;

  /**
   * Sensor mounting height from ground
   *
   * Range: 0..255 (0..1.275 m)
   * Scale: 0.005
   * Offset: 0
   */
  uint8_t r2_i_mi_sensor_height;

  /**
   * Sensor Orientation: 0: Connector Down, 1: Connector Up
   *
   * Range: 0..1 (0..1 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r2_i_mi_sensor_orientation;

  /**
   * Sensor Mounting Angle, 0: Straight Forward, Positive: Counter-Clockwise, Negative: Clockwise
   *
   * Range: -16384..16383 (-3.2768..3.2766 rad)
   * Scale: 0.0002
   * Offset: 0
   */
  int16_t r2_i_mi_sensor_mount_angle;

  /**
   * Radar2_Input_MountInfo Message Counter
   *
   * Range: 0..15 (0..15 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r2_i_mi_mc;

  /**
   * Radar2_Input_MountInfo CRC
   *
   * Range: 0..255 (0..255 -)
   * Scale: 1
   * Offset: 0
   */
  uint8_t r2_i_mi_crc;
};

/**
 * Pack message Radar2_Diag_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_diag_response_pack(uint8_t *dst_p,
                                                     const struct bosch_xgu_corner_radar_radar2_diag_response_t *src_p,
                                                     size_t size);

/**
 * Unpack message Radar2_Diag_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_diag_response_unpack(struct bosch_xgu_corner_radar_radar2_diag_response_t *dst_p,
                                                       const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t bosch_xgu_corner_radar_radar2_diag_response_r2_diag_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_diag_response_r2_diag_response_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_diag_response_r2_diag_response_is_in_range(uint64_t value);

/**
 * Pack message Radar2_Diag_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_diag_request_pack(uint8_t *dst_p,
                                                    const struct bosch_xgu_corner_radar_radar2_diag_request_t *src_p,
                                                    size_t size);

/**
 * Unpack message Radar2_Diag_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_diag_request_unpack(struct bosch_xgu_corner_radar_radar2_diag_request_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t bosch_xgu_corner_radar_radar2_diag_request_r2_diag_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_diag_request_r2_diag_request_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_diag_request_r2_diag_request_is_in_range(uint64_t value);

/**
 * Pack message Radar1_Diag_Response.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_diag_response_pack(uint8_t *dst_p,
                                                     const struct bosch_xgu_corner_radar_radar1_diag_response_t *src_p,
                                                     size_t size);

/**
 * Unpack message Radar1_Diag_Response.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_diag_response_unpack(struct bosch_xgu_corner_radar_radar1_diag_response_t *dst_p,
                                                       const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t bosch_xgu_corner_radar_radar1_diag_response_r1_diag_response_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_diag_response_r1_diag_response_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_diag_response_r1_diag_response_is_in_range(uint64_t value);

/**
 * Pack message Radar1_Diag_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_diag_request_pack(uint8_t *dst_p,
                                                    const struct bosch_xgu_corner_radar_radar1_diag_request_t *src_p,
                                                    size_t size);

/**
 * Unpack message Radar1_Diag_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_diag_request_unpack(struct bosch_xgu_corner_radar_radar1_diag_request_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t bosch_xgu_corner_radar_radar1_diag_request_r1_diag_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_diag_request_r1_diag_request_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_diag_request_r1_diag_request_is_in_range(uint64_t value);

/**
 * Pack message Radar1_Obj00_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj00_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj00_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj00_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj00_a_unpack(struct bosch_xgu_corner_radar_radar1_obj00_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_a_radar1_obj00_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj00_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj00_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj00_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj00_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj00_b_unpack(struct bosch_xgu_corner_radar_radar1_obj00_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj00_b_radar1_obj00_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj01_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj01_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj01_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj01_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj01_a_unpack(struct bosch_xgu_corner_radar_radar1_obj01_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_a_radar1_obj01_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj01_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj01_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj01_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj01_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj01_b_unpack(struct bosch_xgu_corner_radar_radar1_obj01_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj01_b_radar1_obj01_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj02_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj02_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj02_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj02_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj02_a_unpack(struct bosch_xgu_corner_radar_radar1_obj02_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_a_radar1_obj02_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj02_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj02_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj02_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj02_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj02_b_unpack(struct bosch_xgu_corner_radar_radar1_obj02_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj02_b_radar1_obj02_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj03_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj03_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj03_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj03_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj03_a_unpack(struct bosch_xgu_corner_radar_radar1_obj03_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_a_radar1_obj03_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj03_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj03_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj03_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj03_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj03_b_unpack(struct bosch_xgu_corner_radar_radar1_obj03_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj03_b_radar1_obj03_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj04_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj04_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj04_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj04_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj04_a_unpack(struct bosch_xgu_corner_radar_radar1_obj04_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_a_radar1_obj04_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj04_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj04_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj04_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj04_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj04_b_unpack(struct bosch_xgu_corner_radar_radar1_obj04_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj04_b_radar1_obj04_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj05_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj05_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj05_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj05_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj05_a_unpack(struct bosch_xgu_corner_radar_radar1_obj05_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_a_radar1_obj05_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj05_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj05_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj05_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj05_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj05_b_unpack(struct bosch_xgu_corner_radar_radar1_obj05_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj05_b_radar1_obj05_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj06_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj06_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj06_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj06_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj06_a_unpack(struct bosch_xgu_corner_radar_radar1_obj06_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_a_radar1_obj06_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj06_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj06_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj06_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj06_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj06_b_unpack(struct bosch_xgu_corner_radar_radar1_obj06_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj06_b_radar1_obj06_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj07_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj07_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj07_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj07_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj07_a_unpack(struct bosch_xgu_corner_radar_radar1_obj07_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_a_radar1_obj07_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj07_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj07_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj07_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj07_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj07_b_unpack(struct bosch_xgu_corner_radar_radar1_obj07_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj07_b_radar1_obj07_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj08_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj08_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj08_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj08_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj08_a_unpack(struct bosch_xgu_corner_radar_radar1_obj08_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_a_radar1_obj08_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj08_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj08_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj08_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj08_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj08_b_unpack(struct bosch_xgu_corner_radar_radar1_obj08_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj08_b_radar1_obj08_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj09_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj09_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj09_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj09_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj09_a_unpack(struct bosch_xgu_corner_radar_radar1_obj09_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_a_radar1_obj09_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj09_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj09_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj09_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj09_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj09_b_unpack(struct bosch_xgu_corner_radar_radar1_obj09_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj09_b_radar1_obj09_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj10_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj10_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj10_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj10_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj10_a_unpack(struct bosch_xgu_corner_radar_radar1_obj10_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_a_radar1_obj10_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj10_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj10_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj10_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj10_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj10_b_unpack(struct bosch_xgu_corner_radar_radar1_obj10_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj10_b_radar1_obj10_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj11_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj11_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj11_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj11_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj11_a_unpack(struct bosch_xgu_corner_radar_radar1_obj11_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_a_radar1_obj11_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj11_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj11_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj11_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj11_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj11_b_unpack(struct bosch_xgu_corner_radar_radar1_obj11_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj11_b_radar1_obj11_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj12_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj12_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj12_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj12_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj12_a_unpack(struct bosch_xgu_corner_radar_radar1_obj12_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_a_radar1_obj12_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj12_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj12_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj12_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj12_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj12_b_unpack(struct bosch_xgu_corner_radar_radar1_obj12_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj12_b_radar1_obj12_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj13_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj13_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj13_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj13_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj13_a_unpack(struct bosch_xgu_corner_radar_radar1_obj13_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_a_radar1_obj13_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj13_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj13_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj13_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj13_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj13_b_unpack(struct bosch_xgu_corner_radar_radar1_obj13_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj13_b_radar1_obj13_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj14_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj14_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj14_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj14_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj14_a_unpack(struct bosch_xgu_corner_radar_radar1_obj14_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_a_radar1_obj14_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj14_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj14_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj14_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj14_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj14_b_unpack(struct bosch_xgu_corner_radar_radar1_obj14_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj14_b_radar1_obj14_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj15_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj15_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj15_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj15_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj15_a_unpack(struct bosch_xgu_corner_radar_radar1_obj15_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_a_radar1_obj15_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj15_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj15_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj15_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj15_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj15_b_unpack(struct bosch_xgu_corner_radar_radar1_obj15_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj15_b_radar1_obj15_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj16_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj16_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj16_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj16_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj16_a_unpack(struct bosch_xgu_corner_radar_radar1_obj16_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_a_radar1_obj16_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj16_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj16_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj16_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj16_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj16_b_unpack(struct bosch_xgu_corner_radar_radar1_obj16_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj16_b_radar1_obj16_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj17_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj17_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj17_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj17_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj17_a_unpack(struct bosch_xgu_corner_radar_radar1_obj17_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_a_radar1_obj17_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj17_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj17_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj17_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj17_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj17_b_unpack(struct bosch_xgu_corner_radar_radar1_obj17_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj17_b_radar1_obj17_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj18_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj18_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj18_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj18_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj18_a_unpack(struct bosch_xgu_corner_radar_radar1_obj18_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_a_radar1_obj18_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj18_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj18_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj18_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj18_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj18_b_unpack(struct bosch_xgu_corner_radar_radar1_obj18_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj18_b_radar1_obj18_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj19_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj19_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj19_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj19_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj19_a_unpack(struct bosch_xgu_corner_radar_radar1_obj19_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_a_radar1_obj19_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj19_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj19_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj19_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj19_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj19_b_unpack(struct bosch_xgu_corner_radar_radar1_obj19_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj19_b_radar1_obj19_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj20_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj20_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj20_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj20_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj20_a_unpack(struct bosch_xgu_corner_radar_radar1_obj20_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_a_radar1_obj20_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj20_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj20_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj20_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj20_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj20_b_unpack(struct bosch_xgu_corner_radar_radar1_obj20_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj20_b_radar1_obj20_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj21_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj21_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj21_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj21_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj21_a_unpack(struct bosch_xgu_corner_radar_radar1_obj21_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_a_radar1_obj21_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj21_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj21_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj21_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj21_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj21_b_unpack(struct bosch_xgu_corner_radar_radar1_obj21_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj21_b_radar1_obj21_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj22_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj22_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj22_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj22_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj22_a_unpack(struct bosch_xgu_corner_radar_radar1_obj22_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_a_radar1_obj22_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj22_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj22_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj22_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj22_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj22_b_unpack(struct bosch_xgu_corner_radar_radar1_obj22_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj22_b_radar1_obj22_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj23_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj23_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj23_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj23_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj23_a_unpack(struct bosch_xgu_corner_radar_radar1_obj23_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_a_radar1_obj23_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj23_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj23_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj23_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj23_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj23_b_unpack(struct bosch_xgu_corner_radar_radar1_obj23_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj23_b_radar1_obj23_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj24_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj24_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj24_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj24_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj24_a_unpack(struct bosch_xgu_corner_radar_radar1_obj24_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_a_radar1_obj24_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj24_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj24_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj24_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj24_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj24_b_unpack(struct bosch_xgu_corner_radar_radar1_obj24_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj24_b_radar1_obj24_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj25_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj25_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj25_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj25_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj25_a_unpack(struct bosch_xgu_corner_radar_radar1_obj25_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_a_radar1_obj25_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj25_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj25_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj25_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj25_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj25_b_unpack(struct bosch_xgu_corner_radar_radar1_obj25_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj25_b_radar1_obj25_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj26_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj26_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj26_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj26_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj26_a_unpack(struct bosch_xgu_corner_radar_radar1_obj26_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_a_radar1_obj26_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj26_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj26_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj26_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj26_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj26_b_unpack(struct bosch_xgu_corner_radar_radar1_obj26_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj26_b_radar1_obj26_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj27_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj27_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj27_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj27_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj27_a_unpack(struct bosch_xgu_corner_radar_radar1_obj27_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_a_radar1_obj27_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj27_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj27_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj27_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj27_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj27_b_unpack(struct bosch_xgu_corner_radar_radar1_obj27_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj27_b_radar1_obj27_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj28_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj28_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj28_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj28_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj28_a_unpack(struct bosch_xgu_corner_radar_radar1_obj28_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_a_radar1_obj28_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj28_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj28_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj28_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj28_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj28_b_unpack(struct bosch_xgu_corner_radar_radar1_obj28_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj28_b_radar1_obj28_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj29_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj29_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj29_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj29_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj29_a_unpack(struct bosch_xgu_corner_radar_radar1_obj29_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_a_radar1_obj29_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj29_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj29_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj29_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj29_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj29_b_unpack(struct bosch_xgu_corner_radar_radar1_obj29_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj29_b_radar1_obj29_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj30_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj30_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj30_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj30_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj30_a_unpack(struct bosch_xgu_corner_radar_radar1_obj30_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_a_radar1_obj30_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj30_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj30_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj30_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj30_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj30_b_unpack(struct bosch_xgu_corner_radar_radar1_obj30_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj30_b_radar1_obj30_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj31_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj31_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj31_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj31_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj31_a_unpack(struct bosch_xgu_corner_radar_radar1_obj31_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_a_radar1_obj31_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Obj31_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj31_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar1_obj31_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar1_Obj31_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_obj31_b_unpack(struct bosch_xgu_corner_radar_radar1_obj31_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_obj31_b_radar1_obj31_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target00_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target00_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target00_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target00_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target00_a_unpack(struct bosch_xgu_corner_radar_radar1_target00_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_a_radar1_target00_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target00_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target00_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target00_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target00_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target00_b_unpack(struct bosch_xgu_corner_radar_radar1_target00_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target00_b_radar1_target00_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target01_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target01_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target01_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target01_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target01_a_unpack(struct bosch_xgu_corner_radar_radar1_target01_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_a_radar1_target01_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target01_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target01_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target01_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target01_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target01_b_unpack(struct bosch_xgu_corner_radar_radar1_target01_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target01_b_radar1_target01_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target02_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target02_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target02_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target02_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target02_a_unpack(struct bosch_xgu_corner_radar_radar1_target02_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_a_radar1_target02_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target02_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target02_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target02_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target02_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target02_b_unpack(struct bosch_xgu_corner_radar_radar1_target02_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target02_b_radar1_target02_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target03_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target03_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target03_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target03_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target03_a_unpack(struct bosch_xgu_corner_radar_radar1_target03_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_a_radar1_target03_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target03_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target03_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target03_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target03_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target03_b_unpack(struct bosch_xgu_corner_radar_radar1_target03_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target03_b_radar1_target03_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target04_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target04_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target04_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target04_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target04_a_unpack(struct bosch_xgu_corner_radar_radar1_target04_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_a_radar1_target04_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target04_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target04_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target04_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target04_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target04_b_unpack(struct bosch_xgu_corner_radar_radar1_target04_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target04_b_radar1_target04_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target05_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target05_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target05_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target05_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target05_a_unpack(struct bosch_xgu_corner_radar_radar1_target05_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_a_radar1_target05_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Target05_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target05_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar1_target05_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar1_Target05_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_target05_b_unpack(struct bosch_xgu_corner_radar_radar1_target05_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_target05_b_radar1_target05_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Object_Ender.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_object_ender_pack(uint8_t *dst_p,
                                                    const struct bosch_xgu_corner_radar_radar1_object_ender_t *src_p,
                                                    size_t size);

/**
 * Unpack message Radar1_Object_Ender.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_object_ender_unpack(struct bosch_xgu_corner_radar_radar1_object_ender_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_object_ender_radar1_timestamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_ender_radar1_timestamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_ender_radar1_timestamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_object_ender_radar1_tc_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_ender_radar1_tc_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_ender_radar1_tc_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_object_ender_radar1_mess_ender_consist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_ender_radar1_mess_ender_consist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_ender_radar1_mess_ender_consist_bit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_object_ender_radar1_packet_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_ender_radar1_packet_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_ender_radar1_packet_checksum_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Object_Starter.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_object_starter_pack(
    uint8_t *dst_p, const struct bosch_xgu_corner_radar_radar1_object_starter_t *src_p, size_t size);

/**
 * Unpack message Radar1_Object_Starter.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_object_starter_unpack(struct bosch_xgu_corner_radar_radar1_object_starter_t *dst_p,
                                                        const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_psi_dt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_psi_dt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_psi_dt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_v_ego_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_v_ego_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_v_ego_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_a_ego_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_a_ego_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_a_ego_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_slip_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_slip_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_starter_radar1_veh_slip_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_object_starter_radar1_mess_starter_consist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_object_starter_radar1_mess_starter_consist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_object_starter_radar1_mess_starter_consist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_status_pack(uint8_t *dst_p,
                                              const struct bosch_xgu_corner_radar_radar1_status_t *src_p, size_t size);

/**
 * Unpack message Radar1_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_status_unpack(struct bosch_xgu_corner_radar_radar1_status_t *dst_p,
                                                const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_status_r1_stat_itc_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_status_r1_stat_itc_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_status_r1_stat_itc_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_status_r1_stat_sgu_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_status_r1_stat_sgu_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_status_r1_stat_sgu_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_status_r1_stat_hw_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_status_r1_stat_hw_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_status_r1_stat_hw_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar1_status_r1_stat_horizontal_misalignment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_status_r1_stat_horizontal_misalignment_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_status_r1_stat_horizontal_misalignment_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_status_r1_stat_absorption_blindness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_status_r1_stat_absorption_blindness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_status_r1_stat_absorption_blindness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_status_r1_stat_distortion_blindness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_status_r1_stat_distortion_blindness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_status_r1_stat_distortion_blindness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_status_r1_stat_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_status_r1_stat_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_status_r1_stat_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_status_r1_stat_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_status_r1_stat_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_status_r1_stat_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj00_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj00_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj00_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj00_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj00_a_unpack(struct bosch_xgu_corner_radar_radar2_obj00_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_a_radar2_obj00_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj00_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj00_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj00_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj00_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj00_b_unpack(struct bosch_xgu_corner_radar_radar2_obj00_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj00_b_radar2_obj00_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj01_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj01_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj01_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj01_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj01_a_unpack(struct bosch_xgu_corner_radar_radar2_obj01_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_a_radar2_obj01_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj01_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj01_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj01_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj01_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj01_b_unpack(struct bosch_xgu_corner_radar_radar2_obj01_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj01_b_radar2_obj01_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj02_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj02_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj02_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj02_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj02_a_unpack(struct bosch_xgu_corner_radar_radar2_obj02_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_a_radar2_obj02_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj02_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj02_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj02_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj02_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj02_b_unpack(struct bosch_xgu_corner_radar_radar2_obj02_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj02_b_radar2_obj02_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj03_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj03_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj03_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj03_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj03_a_unpack(struct bosch_xgu_corner_radar_radar2_obj03_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_a_radar2_obj03_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj03_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj03_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj03_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj03_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj03_b_unpack(struct bosch_xgu_corner_radar_radar2_obj03_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj03_b_radar2_obj03_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj04_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj04_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj04_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj04_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj04_a_unpack(struct bosch_xgu_corner_radar_radar2_obj04_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_a_radar2_obj04_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj04_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj04_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj04_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj04_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj04_b_unpack(struct bosch_xgu_corner_radar_radar2_obj04_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj04_b_radar2_obj04_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj05_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj05_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj05_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj05_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj05_a_unpack(struct bosch_xgu_corner_radar_radar2_obj05_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_a_radar2_obj05_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj05_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj05_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj05_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj05_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj05_b_unpack(struct bosch_xgu_corner_radar_radar2_obj05_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj05_b_radar2_obj05_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj06_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj06_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj06_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj06_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj06_a_unpack(struct bosch_xgu_corner_radar_radar2_obj06_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_a_radar2_obj06_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj06_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj06_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj06_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj06_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj06_b_unpack(struct bosch_xgu_corner_radar_radar2_obj06_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj06_b_radar2_obj06_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj07_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj07_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj07_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj07_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj07_a_unpack(struct bosch_xgu_corner_radar_radar2_obj07_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_a_radar2_obj07_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj07_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj07_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj07_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj07_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj07_b_unpack(struct bosch_xgu_corner_radar_radar2_obj07_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj07_b_radar2_obj07_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj08_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj08_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj08_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj08_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj08_a_unpack(struct bosch_xgu_corner_radar_radar2_obj08_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_a_radar2_obj08_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj08_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj08_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj08_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj08_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj08_b_unpack(struct bosch_xgu_corner_radar_radar2_obj08_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj08_b_radar2_obj08_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj09_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj09_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj09_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj09_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj09_a_unpack(struct bosch_xgu_corner_radar_radar2_obj09_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_a_radar2_obj09_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj09_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj09_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj09_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj09_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj09_b_unpack(struct bosch_xgu_corner_radar_radar2_obj09_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj09_b_radar2_obj09_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj10_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj10_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj10_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj10_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj10_a_unpack(struct bosch_xgu_corner_radar_radar2_obj10_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_a_radar2_obj10_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj10_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj10_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj10_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj10_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj10_b_unpack(struct bosch_xgu_corner_radar_radar2_obj10_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj10_b_radar2_obj10_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj11_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj11_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj11_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj11_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj11_a_unpack(struct bosch_xgu_corner_radar_radar2_obj11_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_a_radar2_obj11_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj11_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj11_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj11_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj11_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj11_b_unpack(struct bosch_xgu_corner_radar_radar2_obj11_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj11_b_radar2_obj11_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj12_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj12_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj12_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj12_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj12_a_unpack(struct bosch_xgu_corner_radar_radar2_obj12_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_a_radar2_obj12_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj12_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj12_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj12_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj12_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj12_b_unpack(struct bosch_xgu_corner_radar_radar2_obj12_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj12_b_radar2_obj12_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj13_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj13_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj13_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj13_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj13_a_unpack(struct bosch_xgu_corner_radar_radar2_obj13_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_a_radar2_obj13_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj13_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj13_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj13_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj13_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj13_b_unpack(struct bosch_xgu_corner_radar_radar2_obj13_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj13_b_radar2_obj13_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj14_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj14_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj14_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj14_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj14_a_unpack(struct bosch_xgu_corner_radar_radar2_obj14_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_a_radar2_obj14_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj14_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj14_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj14_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj14_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj14_b_unpack(struct bosch_xgu_corner_radar_radar2_obj14_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj14_b_radar2_obj14_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj15_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj15_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj15_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj15_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj15_a_unpack(struct bosch_xgu_corner_radar_radar2_obj15_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_a_radar2_obj15_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj15_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj15_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj15_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj15_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj15_b_unpack(struct bosch_xgu_corner_radar_radar2_obj15_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj15_b_radar2_obj15_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj16_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj16_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj16_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj16_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj16_a_unpack(struct bosch_xgu_corner_radar_radar2_obj16_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_a_radar2_obj16_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj16_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj16_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj16_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj16_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj16_b_unpack(struct bosch_xgu_corner_radar_radar2_obj16_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj16_b_radar2_obj16_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj17_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj17_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj17_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj17_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj17_a_unpack(struct bosch_xgu_corner_radar_radar2_obj17_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_a_radar2_obj17_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj17_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj17_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj17_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj17_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj17_b_unpack(struct bosch_xgu_corner_radar_radar2_obj17_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj17_b_radar2_obj17_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj18_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj18_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj18_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj18_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj18_a_unpack(struct bosch_xgu_corner_radar_radar2_obj18_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_a_radar2_obj18_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj18_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj18_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj18_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj18_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj18_b_unpack(struct bosch_xgu_corner_radar_radar2_obj18_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj18_b_radar2_obj18_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj19_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj19_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj19_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj19_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj19_a_unpack(struct bosch_xgu_corner_radar_radar2_obj19_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_a_radar2_obj19_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj19_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj19_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj19_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj19_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj19_b_unpack(struct bosch_xgu_corner_radar_radar2_obj19_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj19_b_radar2_obj19_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj20_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj20_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj20_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj20_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj20_a_unpack(struct bosch_xgu_corner_radar_radar2_obj20_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_a_radar2_obj20_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj20_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj20_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj20_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj20_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj20_b_unpack(struct bosch_xgu_corner_radar_radar2_obj20_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj20_b_radar2_obj20_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj21_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj21_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj21_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj21_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj21_a_unpack(struct bosch_xgu_corner_radar_radar2_obj21_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_a_radar2_obj21_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj21_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj21_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj21_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj21_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj21_b_unpack(struct bosch_xgu_corner_radar_radar2_obj21_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj21_b_radar2_obj21_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj22_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj22_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj22_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj22_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj22_a_unpack(struct bosch_xgu_corner_radar_radar2_obj22_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_a_radar2_obj22_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj22_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj22_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj22_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj22_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj22_b_unpack(struct bosch_xgu_corner_radar_radar2_obj22_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj22_b_radar2_obj22_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj23_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj23_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj23_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj23_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj23_a_unpack(struct bosch_xgu_corner_radar_radar2_obj23_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_a_radar2_obj23_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj23_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj23_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj23_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj23_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj23_b_unpack(struct bosch_xgu_corner_radar_radar2_obj23_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj23_b_radar2_obj23_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj24_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj24_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj24_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj24_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj24_a_unpack(struct bosch_xgu_corner_radar_radar2_obj24_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_a_radar2_obj24_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj24_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj24_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj24_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj24_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj24_b_unpack(struct bosch_xgu_corner_radar_radar2_obj24_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj24_b_radar2_obj24_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj25_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj25_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj25_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj25_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj25_a_unpack(struct bosch_xgu_corner_radar_radar2_obj25_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_a_radar2_obj25_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj25_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj25_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj25_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj25_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj25_b_unpack(struct bosch_xgu_corner_radar_radar2_obj25_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj25_b_radar2_obj25_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj26_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj26_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj26_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj26_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj26_a_unpack(struct bosch_xgu_corner_radar_radar2_obj26_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_a_radar2_obj26_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj26_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj26_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj26_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj26_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj26_b_unpack(struct bosch_xgu_corner_radar_radar2_obj26_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj26_b_radar2_obj26_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj27_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj27_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj27_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj27_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj27_a_unpack(struct bosch_xgu_corner_radar_radar2_obj27_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_a_radar2_obj27_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj27_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj27_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj27_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj27_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj27_b_unpack(struct bosch_xgu_corner_radar_radar2_obj27_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj27_b_radar2_obj27_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj28_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj28_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj28_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj28_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj28_a_unpack(struct bosch_xgu_corner_radar_radar2_obj28_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_a_radar2_obj28_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj28_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj28_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj28_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj28_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj28_b_unpack(struct bosch_xgu_corner_radar_radar2_obj28_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj28_b_radar2_obj28_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj29_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj29_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj29_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj29_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj29_a_unpack(struct bosch_xgu_corner_radar_radar2_obj29_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_a_radar2_obj29_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj29_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj29_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj29_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj29_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj29_b_unpack(struct bosch_xgu_corner_radar_radar2_obj29_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj29_b_radar2_obj29_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj30_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj30_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj30_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj30_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj30_a_unpack(struct bosch_xgu_corner_radar_radar2_obj30_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_a_radar2_obj30_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj30_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj30_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj30_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj30_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj30_b_unpack(struct bosch_xgu_corner_radar_radar2_obj30_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj30_b_radar2_obj30_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj31_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj31_a_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj31_a_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj31_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj31_a_unpack(struct bosch_xgu_corner_radar_radar2_obj31_a_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_a_radar2_obj31_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Obj31_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj31_b_pack(uint8_t *dst_p,
                                               const struct bosch_xgu_corner_radar_radar2_obj31_b_t *src_p,
                                               size_t size);

/**
 * Unpack message Radar2_Obj31_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_obj31_b_unpack(struct bosch_xgu_corner_radar_radar2_obj31_b_t *dst_p,
                                                 const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_obj31_b_radar2_obj31_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target00_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target00_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target00_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target00_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target00_a_unpack(struct bosch_xgu_corner_radar_radar2_target00_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_a_radar2_target00_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target00_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target00_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target00_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target00_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target00_b_unpack(struct bosch_xgu_corner_radar_radar2_target00_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target00_b_radar2_target00_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target01_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target01_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target01_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target01_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target01_a_unpack(struct bosch_xgu_corner_radar_radar2_target01_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_a_radar2_target01_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target01_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target01_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target01_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target01_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target01_b_unpack(struct bosch_xgu_corner_radar_radar2_target01_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target01_b_radar2_target01_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target02_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target02_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target02_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target02_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target02_a_unpack(struct bosch_xgu_corner_radar_radar2_target02_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_a_radar2_target02_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target02_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target02_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target02_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target02_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target02_b_unpack(struct bosch_xgu_corner_radar_radar2_target02_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target02_b_radar2_target02_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target03_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target03_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target03_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target03_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target03_a_unpack(struct bosch_xgu_corner_radar_radar2_target03_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_a_radar2_target03_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target03_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target03_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target03_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target03_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target03_b_unpack(struct bosch_xgu_corner_radar_radar2_target03_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target03_b_radar2_target03_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target04_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target04_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target04_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target04_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target04_a_unpack(struct bosch_xgu_corner_radar_radar2_target04_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_a_radar2_target04_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target04_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target04_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target04_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target04_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target04_b_unpack(struct bosch_xgu_corner_radar_radar2_target04_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target04_b_radar2_target04_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target05_A.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target05_a_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target05_a_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target05_A.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target05_a_unpack(struct bosch_xgu_corner_radar_radar2_target05_a_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_dx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_dx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_dx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_vx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_vx_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_vx_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_dy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_dy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_dy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_exist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_exist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_exist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_ax_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_ax_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_ax_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_non_obstacle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_non_obstacle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_w_non_obstacle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_meas_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_meas_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_meas_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_hist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_hist_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_flag_hist_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_mess_aconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_mess_aconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_a_radar2_target05_mess_aconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Target05_B.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target05_b_pack(uint8_t *dst_p,
                                                  const struct bosch_xgu_corner_radar_radar2_target05_b_t *src_p,
                                                  size_t size);

/**
 * Unpack message Radar2_Target05_B.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_target05_b_unpack(struct bosch_xgu_corner_radar_radar2_target05_b_t *dst_p,
                                                    const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_vy_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_vy_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_vy_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_d_length_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_d_length_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_d_length_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dz_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dz_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_moving_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_moving_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_moving_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_vx_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_vx_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_vx_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_ax_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_ax_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_ax_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dy_sigma_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dy_sigma_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dy_sigma_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_w_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_w_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_w_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_class_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_class_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_class_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dx_rear_end_loss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dx_rear_end_loss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_dx_rear_end_loss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_mess_bconsist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_mess_bconsist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_target05_b_radar2_target05_mess_bconsist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Object_Ender.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_object_ender_pack(uint8_t *dst_p,
                                                    const struct bosch_xgu_corner_radar_radar2_object_ender_t *src_p,
                                                    size_t size);

/**
 * Unpack message Radar2_Object_Ender.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_object_ender_unpack(struct bosch_xgu_corner_radar_radar2_object_ender_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_object_ender_radar2_object_timestamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_ender_radar2_object_timestamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_ender_radar2_object_timestamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_object_ender_radar2_tc_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_ender_radar2_tc_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_ender_radar2_tc_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_object_ender_radar2_mess_ender_consist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_ender_radar2_mess_ender_consist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_ender_radar2_mess_ender_consist_bit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_object_ender_radar2_packet_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_ender_radar2_packet_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_ender_radar2_packet_checksum_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Object_Starter.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_object_starter_pack(
    uint8_t *dst_p, const struct bosch_xgu_corner_radar_radar2_object_starter_t *src_p, size_t size);

/**
 * Unpack message Radar2_Object_Starter.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_object_starter_unpack(struct bosch_xgu_corner_radar_radar2_object_starter_t *dst_p,
                                                        const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_psi_dt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_psi_dt_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_psi_dt_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_v_ego_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_v_ego_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_v_ego_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_a_ego_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_a_ego_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_a_ego_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_slip_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_slip_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_starter_radar2_veh_slip_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_object_starter_radar2_mess_starter_consist_bit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_object_starter_radar2_mess_starter_consist_bit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_object_starter_radar2_mess_starter_consist_bit_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_status_pack(uint8_t *dst_p,
                                              const struct bosch_xgu_corner_radar_radar2_status_t *src_p, size_t size);

/**
 * Unpack message Radar2_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_status_unpack(struct bosch_xgu_corner_radar_radar2_status_t *dst_p,
                                                const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_status_r2_stat_itc_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_status_r2_stat_itc_info_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_status_r2_stat_itc_info_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_status_r2_stat_sgu_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_status_r2_stat_sgu_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_status_r2_stat_sgu_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_status_r2_stat_hw_fail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_status_r2_stat_hw_fail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_status_r2_stat_hw_fail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bosch_xgu_corner_radar_radar2_status_r2_stat_horizontal_misalignment_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_status_r2_stat_horizontal_misalignment_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_status_r2_stat_horizontal_misalignment_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_status_r2_stat_absorption_blindness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_status_r2_stat_absorption_blindness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_status_r2_stat_absorption_blindness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_status_r2_stat_distortion_blindness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_status_r2_stat_distortion_blindness_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_status_r2_stat_distortion_blindness_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_status_r2_stat_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_status_r2_stat_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_status_r2_stat_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_status_r2_stat_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_status_r2_stat_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_status_r2_stat_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar_Input_Veh_DynData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar_input_veh_dyn_data_pack(
    uint8_t *dst_p, const struct bosch_xgu_corner_radar_radar_input_veh_dyn_data_t *src_p, size_t size);

/**
 * Unpack message Radar_Input_Veh_DynData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar_input_veh_dyn_data_unpack(
    struct bosch_xgu_corner_radar_radar_input_veh_dyn_data_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_steer_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_steer_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_steer_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_use_steer_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_use_steer_angle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_use_steer_angle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_standstill_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_standstill_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_standstill_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_yaw_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_any_wheel_slip_event_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_prndstat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_prndstat_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_prndstat_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dyn_data_ri_veh_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar_Input_Veh_Dim.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar_input_veh_dim_pack(uint8_t *dst_p,
                                                    const struct bosch_xgu_corner_radar_radar_input_veh_dim_t *src_p,
                                                    size_t size);

/**
 * Unpack message Radar_Input_Veh_Dim.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar_input_veh_dim_unpack(struct bosch_xgu_corner_radar_radar_input_veh_dim_t *dst_p,
                                                      const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_max_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_max_width_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_max_width_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_min_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_min_width_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_min_width_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_long_front_bumper_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_long_front_bumper_pos_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_long_front_bumper_pos_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_long_rear_bumper_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_long_rear_bumper_pos_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_long_rear_bumper_pos_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_veh_dim_ri_vd_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar_Input_Wheel_Info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar_input_wheel_info_pack(
    uint8_t *dst_p, const struct bosch_xgu_corner_radar_radar_input_wheel_info_t *src_p, size_t size);

/**
 * Unpack message Radar_Input_Wheel_Info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar_input_wheel_info_unpack(struct bosch_xgu_corner_radar_radar_input_wheel_info_t *dst_p,
                                                         const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_wheel_base_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_wheel_base_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_wheel_base_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_track_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_track_width_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_track_width_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_steering_angle_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_steering_angle_ratio_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_steering_angle_ratio_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar_input_wheel_info_ri_wi_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar1_Input_MountInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar1_input_mount_info_pack(
    uint8_t *dst_p, const struct bosch_xgu_corner_radar_radar1_input_mount_info_t *src_p, size_t size);

/**
 * Unpack message Radar1_Input_MountInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar1_input_mount_info_unpack(
    struct bosch_xgu_corner_radar_radar1_input_mount_info_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_lat_sensor_mount_to_center_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_lat_sensor_mount_to_center_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_lat_sensor_mount_to_center_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_long_sensor_mount_to_rear_axle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_long_sensor_mount_to_rear_axle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_long_sensor_mount_to_rear_axle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_height_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_height_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_height_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_orientation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_orientation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_orientation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_mount_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_mount_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_sensor_mount_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar1_input_mount_info_r1_i_mi_crc_is_in_range(uint8_t value);

/**
 * Pack message Radar2_Input_MountInfo.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bosch_xgu_corner_radar_radar2_input_mount_info_pack(
    uint8_t *dst_p, const struct bosch_xgu_corner_radar_radar2_input_mount_info_t *src_p, size_t size);

/**
 * Unpack message Radar2_Input_MountInfo.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bosch_xgu_corner_radar_radar2_input_mount_info_unpack(
    struct bosch_xgu_corner_radar_radar2_input_mount_info_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_lat_sensor_mount_to_center_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_lat_sensor_mount_to_center_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_lat_sensor_mount_to_center_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_long_sensor_mount_to_rear_axle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_long_sensor_mount_to_rear_axle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_long_sensor_mount_to_rear_axle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_height_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_height_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_height_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_orientation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_orientation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_orientation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_mount_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_mount_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_sensor_mount_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_mc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_mc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_mc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bosch_xgu_corner_radar_radar2_input_mount_info_r2_i_mi_crc_is_in_range(uint8_t value);

#endif
