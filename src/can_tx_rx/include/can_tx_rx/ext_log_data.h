/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.20.3 Tue Jun  2 20:55:50 2020.
 */

#ifndef EXT_LOG_DATA_H
#define EXT_LOG_DATA_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_FRAME_ID (0x730u)
#define EXT_LOG_DATA_LANE_DETAILS_FRAME_ID (0x737u)
#define EXT_LOG_DATA_TSR_FRAME_ID (0x720u)
#define EXT_LOG_DATA_AHBC_GRADUAL_FRAME_ID (0x729u)
#define EXT_LOG_DATA_AWS_DISPLAY_FRAME_ID (0x700u)
#define EXT_LOG_DATA_OBSTACLE_DATA_C_FRAME_ID (0x73bu)
#define EXT_LOG_DATA_OBSTACLE_DATA_B_FRAME_ID (0x73au)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_FRAME_ID (0x739u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_FRAME_ID (0x738u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_FRAME_ID (0x728u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_FRAME_ID (0x727u)

/* Frame lengths in bytes. */
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_LENGTH (2u)
#define EXT_LOG_DATA_LANE_DETAILS_LENGTH (8u)
#define EXT_LOG_DATA_TSR_LENGTH (7u)
#define EXT_LOG_DATA_AHBC_GRADUAL_LENGTH (7u)
#define EXT_LOG_DATA_AWS_DISPLAY_LENGTH (8u)
#define EXT_LOG_DATA_OBSTACLE_DATA_C_LENGTH (8u)
#define EXT_LOG_DATA_OBSTACLE_DATA_B_LENGTH (8u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_LENGTH (8u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_LENGTH (7u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_LENGTH (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_LENGTH (8u)

/* Extended or standard frame types. */
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_IS_EXTENDED (0)
#define EXT_LOG_DATA_LANE_DETAILS_IS_EXTENDED (0)
#define EXT_LOG_DATA_TSR_IS_EXTENDED (0)
#define EXT_LOG_DATA_AHBC_GRADUAL_IS_EXTENDED (0)
#define EXT_LOG_DATA_AWS_DISPLAY_IS_EXTENDED (0)
#define EXT_LOG_DATA_OBSTACLE_DATA_C_IS_EXTENDED (0)
#define EXT_LOG_DATA_OBSTACLE_DATA_B_IS_EXTENDED (0)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_IS_EXTENDED (0)
#define EXT_LOG_DATA_OBSTACLE_STATUS_IS_EXTENDED (0)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_IS_EXTENDED (0)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_BOT_NGL_HLB_NO_OBJECT_DETECTED_CHOICE (0u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_BOT_NGL_HLB_DEFINED_BY_PRECEDING_VEHICLE_CHOICE (1u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_BOT_NGL_HLB_DEFINED_BY_ONCOMING_VEHICLE_CHOICE (2u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_BOT_NGL_HLB_INVALID_CHOICE (3u)

#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_NGL_LH_HLB_NO_OBJECT_DETECTED_CHOICE (0u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_NGL_LH_HLB_DEFINED_BY_PRECEDING_VEHICLE_CHOICE (1u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_NGL_LH_HLB_DEFINED_BY_ONCOMING_VEHICLE_CHOICE (2u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_NGL_LH_HLB_INVALID_CHOICE (3u)

#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_NGL_RH_HLB_NO_OBJECT_DETECTED_CHOICE (0u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_NGL_RH_HLB_DEFINED_BY_PRECEDING_VEHICLE_CHOICE (1u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_NGL_RH_HLB_DEFINED_BY_ONCOMING_VEHICLE_CHOICE (2u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_BNDRY_DOM_NGL_RH_HLB_INVALID_CHOICE (3u)

#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_OBJ_DIST_HLB_NO_OBJECT_DETECTED_CHOICE (0u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_OBJ_DIST_HLB_PRECEDING_VEHICLE_DETECTED_CHOICE (1u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_OBJ_DIST_HLB_ONCOMING_VEHICLE_DETECTED_CHOICE (2u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_ST_OBJ_DIST_HLB_INVALID_CHOICE (3u)

#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_LEFT_TARGET_CHANGE_TARGET_IS_THE_SAME_AS_BEFORE_CHOICE (0u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_LEFT_TARGET_CHANGE_TARGET_HAS_CHANGED_CHOICE (1u)

#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_RIGHT_TARGET_CHANGE_TARGET_IS_THE_SAME_AS_BEFORE_CHOICE (0u)
#define EXT_LOG_DATA_AHBC_GRADUAL_DATA_B_RIGHT_TARGET_CHANGE_TARGET_HAS_CHANGED_CHOICE (1u)

#define EXT_LOG_DATA_LANE_DETAILS_LEFT_GUARD_RAIL_NO_GUARD_RAIL_DETECTED_CHOICE (0u)
#define EXT_LOG_DATA_LANE_DETAILS_LEFT_GUARD_RAIL_GUARD_RAIL_DETECTED_CHOICE (1u)

#define EXT_LOG_DATA_LANE_DETAILS_RIGHT_GUARD_RAIL_NO_GUARD_RAIL_DETECTED_CHOICE (0u)
#define EXT_LOG_DATA_LANE_DETAILS_RIGHT_GUARD_RAIL_GUARD_RAIL_DETECTED_CHOICE (1u)

#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_10_CHOICE (0u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_20_CHOICE (1u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_30_CHOICE (2u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_40_CHOICE (3u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_50_CHOICE (4u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_60_CHOICE (5u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_70_CHOICE (6u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_80_CHOICE (7u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_90_CHOICE (8u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_100_CHOICE (9u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_110_CHOICE (10u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_120_CHOICE (11u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_130_CHOICE (12u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_140_CHOICE (13u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_END_OF_NUM_RESTRICTION_CHOICE (20u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_10_CHOICE (28u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_20_CHOICE (29u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_30_CHOICE (30u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_40_CHOICE (31u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_50_CHOICE (32u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_60_CHOICE (33u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_70_CHOICE (34u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_80_CHOICE (35u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_90_CHOICE (36u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_100_CHOICE (37u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_110_CHOICE (38u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_120_CHOICE (39u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_130_CHOICE (40u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_140_CHOICE (41u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_ELECTRONIC_END_OF_NUM_RESTRICT_CHOICE (50u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_REGULAR_GEN_END_ALL_RESTRICT_CHOICE (64u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_ELECTRIC_GEN_END_ALL_RESTRICTION_CHOICE (65u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_5_CHOICE (100u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_15_CHOICE (101u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_25_CHOICE (102u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_35_CHOICE (103u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_45_CHOICE (104u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_55_CHOICE (105u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_65_CHOICE (106u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_75_CHOICE (107u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_85_CHOICE (108u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_95_CHOICE (109u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_105_CHOICE (110u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_115_CHOICE (111u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_125_CHOICE (112u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_135_CHOICE (113u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_145_CHOICE (114u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_5_CHOICE (115u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_15_CHOICE (116u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_25_CHOICE (117u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_35_CHOICE (118u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_45_CHOICE (119u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_55_CHOICE (120u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_65_CHOICE (121u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_75_CHOICE (122u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_85_CHOICE (123u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_95_CHOICE (124u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_105_CHOICE (125u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_115_CHOICE (126u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_125_CHOICE (127u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_135_CHOICE (128u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTRONIC_145_CHOICE (129u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_MOTOR_WAY_BEGIN_CHOICE (171u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_END_OF__MOTOR_WAY_CHOICE (172u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_EXPR_WAY_BEGIN_CHOICE (173u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_REGULAR_END_OF__EXPR_WAY_CHOICE (174u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_REGULAR__PLAYGROUND_AREA_BEGIN_CHOICE (175u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_REGULAR__END_OF_PLAYGROUND_AREA_CHOICE (176u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_REGULAR_NO_PASSING_START_CHOICE (200u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_REGULAR_END_OF_NO_PASSING_CHOICE (201u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECTR_NO_PASSING_START_CHOICE (220u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_STANDARD_ELECT_END_OF_NO_PASSING_CHOICE (221u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_NO_SIGN_DETECTED_CHOICE (254u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SIGN_TYPE_E_INVALID_SIGN__CHOICE (255u)

#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_NONE_CHOICE (0u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_RAIN_CHOICE (1u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_SNOW_CHOICE (2u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_TRAILER_CHOICE (3u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_TIME_CHOICE (4u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_ARROW_LEFT_CHOICE (5u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_ARROW_RIGHT_CHOICE (6u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_BEND_ARROW_LEFT_CHOICE (7u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_BEND_ARROW_RIGHT_CHOICE (8u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_TRUCK_CHOICE (9u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_DISTANCE_ARROW___DISTANCE_FOR__CHOICE (10u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_WEIGHT_CHOICE (11u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_DISTANCE_IN_CHOICE (12u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_TRACTOR_CHOICE (13u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_SNOW_RAIN_CHOICE (14u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_SCHOOL_CHOICE (15u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_RAIN_CLOUD_CHOICE (16u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_FOG_CHOICE (17u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_HAZARDOUS_MATERIALS_CHOICE (18u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_NIGHT_CHOICE (19u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_SUPP_SIGN_GENERIC_CHOICE (20u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_E_RAPPEL_CHOICE (21u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_E_ZONE_CHOICE (22u)
#define EXT_LOG_DATA_TSR_VISION_ONLY_SUPP_SIGN_TYPE_INVALID_SUPP_CHOICE (255u)

#define EXT_LOG_DATA_TSR_FILTER_TYPE_NOT_FILTERED_CHOICE (0u)
#define EXT_LOG_DATA_TSR_FILTER_TYPE_IRRELEVANT_TO_THE_HOST_DRIVER_CHOICE (1u)
#define EXT_LOG_DATA_TSR_FILTER_TYPE_ON_VEHICLE__TRUCK_CHOICE (2u)
#define EXT_LOG_DATA_TSR_FILTER_TYPE_EMBEDDED_CHOICE (3u)

#define EXT_LOG_DATA_TSR_NO_ENTRY_VISION_STATUS_NOTIFICATION_CHOICE (0u)
#define EXT_LOG_DATA_TSR_NO_ENTRY_VISION_STATUS_DELAY_CHOICE (1u)
#define EXT_LOG_DATA_TSR_NO_ENTRY_VISION_STATUS_REJECT_VISION_ONLY__CHOICE (2u)
#define EXT_LOG_DATA_TSR_NO_ENTRY_VISION_STATUS_ALERT_CHOICE (3u)
#define EXT_LOG_DATA_TSR_NO_ENTRY_VISION_STATUS_SECOND_ALERT_CHOICE (4u)

#define EXT_LOG_DATA_AWS_DISPLAY_SOUND_TYPE_SILENT_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_SOUND_TYPE_LDWL_CHOICE (1u)
#define EXT_LOG_DATA_AWS_DISPLAY_SOUND_TYPE_LDWR_CHOICE (2u)
#define EXT_LOG_DATA_AWS_DISPLAY_SOUND_TYPE_FAR_HW___HW1_HW2_HW3__CHOICE (3u)
#define EXT_LOG_DATA_AWS_DISPLAY_SOUND_TYPE_NEAR_HW_CHOICE (4u)
#define EXT_LOG_DATA_AWS_DISPLAY_SOUND_TYPE_SOFT_FCW_CHOICE (5u)
#define EXT_LOG_DATA_AWS_DISPLAY_SOUND_TYPE_HARD_FCW____PEDS_FCW_CHOICE (6u)
#define EXT_LOG_DATA_AWS_DISPLAY_SOUND_TYPE_RESERVED_CHOICE (7u)

#define EXT_LOG_DATA_AWS_DISPLAY_DUSK_TIME_INDICATOR_NOT_IN_DUSK_MODE_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_DUSK_TIME_INDICATOR_DUSK_MODE_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_NIGHT_TIME_INDICATOR_NOT_IN_NIGHT_MODE_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_NIGHT_TIME_INDICATOR_NIGHT_MODE_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_SUPPRESS_OLD_SOUND_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_SUPPRESS_NEW_SOUND_OR_SUPPRESSED_SOUND_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_HEADWAY_VALID_NOT_VALID_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_HEADWAY_VALID_VALID_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_LANES_ON_LD_ALGORITHM_OFF__NO_SPEED__CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_LANES_ON_LD_ALGORITHM_ON_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_LEFT_LDW_ON_NO_LEFT_LDW_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_LEFT_LDW_ON_LEFT_LDW_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_RIGHT_LDW_ON_NO_RIGHT_LDW_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_RIGHT_LDW_ON_RIGHT_LDW_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_FCW_ON_NO_FCW_WARNING_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_FCW_ON_THERE_IS_AN_FCW_WARNING_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_LEFT_CROSSING_NO_LEFT_CROSSING_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_LEFT_CROSSING_LEFT_CROSSING_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_RIGHT_CROSSING_NO_RIGHT_CROSSING_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_RIGHT_CROSSING_RIGHT_CROSSING_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_MAINTENANCE_NO_INTERNAL_ERROR_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_MAINTENANCE_INTERNAL_ERROR_CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_FAILSAFE_NO_INTERNAL__FAIL_SAFE_MODE_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_FAILSAFE_INTERNAL__FAIL_SAFE_MODE__CHOICE (1u)

#define EXT_LOG_DATA_AWS_DISPLAY_PED_FCW_NO_FCW_WARNING_CHOICE (0)
#define EXT_LOG_DATA_AWS_DISPLAY_PED_FCW_THERE_IS_AN_FCW_WARNING_CHOICE (1)

#define EXT_LOG_DATA_AWS_DISPLAY_PED_IN_DZ_PED_IS_NOT_IN_A_DANGER_ZONE_CHOICE (0)
#define EXT_LOG_DATA_AWS_DISPLAY_PED_IN_DZ_PED_IS_IN_DANGER_ZONE_CHOICE (1)

#define EXT_LOG_DATA_AWS_DISPLAY_HEADWAY_WARNING_LEVEL_NO_CIPV_IS_PRESENT_CHOICE (0u)
#define EXT_LOG_DATA_AWS_DISPLAY_HEADWAY_WARNING_LEVEL_CIPV_PRESENTS__HW__1_0___GREEN__CHOICE (1u)
#define EXT_LOG_DATA_AWS_DISPLAY_HEADWAY_WARNING_LEVEL_CIPV_PRESENTS_0_6_HW_1_0__ORANGE_CHOICE (2u)
#define EXT_LOG_DATA_AWS_DISPLAY_HEADWAY_WARNING_LEVEL_CIPV_PRESENTS__HW___0_6___RED__CHOICE (3u)

#define EXT_LOG_DATA_OBSTACLE_DATA_C_OBSTACLE_REPLACED_NOT_REPLACED_IN_THIS_FRAME_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_DATA_C_OBSTACLE_REPLACED_REPLACED_IN_THIS_FRAME_CHOICE (1u)

#define EXT_LOG_DATA_OBSTACLE_DATA_B_OBSTACLE_LANE_NOT_ASSIGNED_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_DATA_B_OBSTACLE_LANE_EGO_LANE_CHOICE (1u)
#define EXT_LOG_DATA_OBSTACLE_DATA_B_OBSTACLE_LANE_NEXT_LANE__LEFT_OR_RIGHT__CHOICE (2u)
#define EXT_LOG_DATA_OBSTACLE_DATA_B_OBSTACLE_LANE_INVALID_CHOICE (3u)

#define EXT_LOG_DATA_OBSTACLE_DATA_B_CIPV_FLAG_NOT_CIPV_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_DATA_B_CIPV_FLAG_CIPV_CHOICE (1u)

#define EXT_LOG_DATA_OBSTACLE_DATA_A_BLINKER_INFO_UNAVAILABLE_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_BLINKER_INFO_OFF_CHOICE (1u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_BLINKER_INFO_LEFT_CHOICE (2u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_BLINKER_INFO_RIGHT_CHOICE (3u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_BLINKER_INFO_BOTH_CHOICE (4u)

#define EXT_LOG_DATA_OBSTACLE_DATA_A_CUT_IN_AND_OUT_UNDEFINED_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_CUT_IN_AND_OUT_IN_HOST_LANE_CHOICE (1u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_CUT_IN_AND_OUT_OUT_HOST_LANE_CHOICE (2u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_CUT_IN_AND_OUT_CUT_IN_CHOICE (3u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_CUT_IN_AND_OUT_CUT_OUT_CHOICE (4u)

#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_TYPE_VEHICLE_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_TYPE_TRUCK_CHOICE (1u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_TYPE_BIKE_CHOICE (2u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_TYPE_PEDESTRIAN_CHOICE (3u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_TYPE_BICYCLE_CHOICE (4u)

#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_STATUS_NOT_DEFINED_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_STATUS_STANDING_NEVER_MOVED_BCK_LIGHTS_ON_CHOICE (1u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_STATUS_STOPPED__MOVABLE__CHOICE (2u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_STATUS_MOVING_CHOICE (3u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_STATUS_ONCOMING_CHOICE (4u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_STATUS_PARKED_NEVER_MOVED___BCK_LIGHTS_OFF_CHOICE (5u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_STATUS_UNUSED_CHOICE (6u)

#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_BRAKE_LIGHTS_OBJECT_S_BRAKE_LIGHTS_ARE_OFF_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_BRAKE_LIGHTS_OBJECT_S_BRAKE_LIGHTS_ARE_ON_CHOICE (1u)

#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_VALID_NEW_VALID__DETECTED_THIS_FRAME__CHOICE (1u)
#define EXT_LOG_DATA_OBSTACLE_DATA_A_OBSTACLE_VALID_OLDER_VALID_CHOICE (2u)

#define EXT_LOG_DATA_OBSTACLE_STATUS_LEFT_CLOSE_RANGE_CUT_IN_NO_LEFT_CUT_IN_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_LEFT_CLOSE_RANGE_CUT_IN_LEFT_CUT_IN_CHOICE (1u)

#define EXT_LOG_DATA_OBSTACLE_STATUS_RIGHT_CLOSE_RANGE_CUT_IN_NO_RIGHT_CUT_IN_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_RIGHT_CLOSE_RANGE_CUT_IN_RIGHT_CUT_IN__CHOICE (1u)

#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_STOP_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_GO__CHOICE (1u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_UNDECIDED_CHOICE (2u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_DRIVER_DECISION_IS_REQUIRED_CHOICE (3u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_4_CHOICE (4u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_5_CHOICE (5u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_6_CHOICE (6u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_7_CHOICE (7u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_8_CHOICE (8u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_9_CHOICE (9u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_10_CHOICE (10u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_11_CHOICE (11u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_12_CHOICE (12u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_13_CHOICE (13u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_CURRENTLY_UNUSED_14_CHOICE (14u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_GO_NOT__CALCULATED_CHOICE (15u)

#define EXT_LOG_DATA_OBSTACLE_STATUS_FAILSAFE_NO__FAILSAFE_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_FAILSAFE_LOW__SUN_CHOICE (1u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_FAILSAFE_BLUR__IMAGE_CHOICE (2u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_FAILSAFE_SMEAR__IMAGE_CHOICE (4u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_FAILSAFE_PARTIAL__TRANSPARENT__BLOCKAGE_CHOICE (8u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_FAILSAFE_FULL__BLOCKAGE_CHOICE (16u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_FAILSAFE_SPLASHES_CHOICE (32u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_FAILSAFE_OUT_OF__CALIBRATION_CHOICE (64u)

#define EXT_LOG_DATA_OBSTACLE_STATUS_CLOSE_CAR_NO_CLOSE_CAR_CHOICE (0u)
#define EXT_LOG_DATA_OBSTACLE_STATUS_CLOSE_CAR_CLOSE_CAR_EXISTS_CHOICE (1u)

#define EXT_LOG_DATA_HIGH_LOW_BEAM_BINARY_HIGH_LOW_BEAM_DECISION_NO_RECOMMENDATION_CHOICE (0u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_BINARY_HIGH_LOW_BEAM_DECISION_RECOMMENDATION___HIGH_BEAM_OFF_CHOICE (1u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_BINARY_HIGH_LOW_BEAM_DECISION_RECOMMENDATION___HIGH_BEAM_ON_CHOICE (2u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_BINARY_HIGH_LOW_BEAM_DECISION_INVALID_CHOICE (3u)

#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_NO_SWITCH_REASON_CHOICE (0u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_ONCOMING_VEHICLE_CHOICE (1u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_PRECEDING_VEHICLE_CHOICE (2u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_SPEED_LIMIT_CHOICE (4u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_AMBIENT_LIGHT_CHOICE (8u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_VILLAGE_DETECTION_CHOICE (16u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_FOG_DETECTION__IDENTIFIED_ON_HLB_CHOICE (32u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_HW_MODE__CHOICE (64u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_DELAY__HYSTERESIS__CHOICE (128u)
#define EXT_LOG_DATA_HIGH_LOW_BEAM_REASONS_TO_SWITCH_TO_LOW_BEAM_TOO_MANY_LIGHTS_CHOICE (256u)

#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_10_CHOICE (0u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_20_CHOICE (1u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_30_CHOICE (2u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_40_CHOICE (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_50_CHOICE (4u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_60_CHOICE (5u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_70_CHOICE (6u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_80_CHOICE (7u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_90_CHOICE (8u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_100_CHOICE (9u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_110_CHOICE (10u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_120_CHOICE (11u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_130_CHOICE (12u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_140_CHOICE (13u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_END_OF_NUM_RESTRICTION_CHOICE (20u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_10_CHOICE (28u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_20_CHOICE (29u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_30_CHOICE (30u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_40_CHOICE (31u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_50_CHOICE (32u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_60_CHOICE (33u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_70_CHOICE (34u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_80_CHOICE (35u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_90_CHOICE (36u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_100_CHOICE (37u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_110_CHOICE (38u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_120_CHOICE (39u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_130_CHOICE (40u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_140_CHOICE (41u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_ELECTRONIC_END_OF_NUM_RESTRICT_CHOICE (50u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_REGULAR_GEN_END_ALL_RESTRICT_CHOICE (64u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_ELECTRIC_GEN_END_ALL_RESTRICTION_CHOICE (65u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_5_CHOICE (100u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_15_CHOICE (101u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_25_CHOICE (102u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_35_CHOICE (103u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_45_CHOICE (104u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_55_CHOICE (105u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_65_CHOICE (106u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_75_CHOICE (107u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_85_CHOICE (108u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_95_CHOICE (109u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_105_CHOICE (110u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_115_CHOICE (111u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_125_CHOICE (112u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_135_CHOICE (113u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_145_CHOICE (114u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_5_CHOICE (115u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_15_CHOICE (116u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_25_CHOICE (117u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_35_CHOICE (118u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_45_CHOICE (119u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_55_CHOICE (120u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_65_CHOICE (121u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_75_CHOICE (122u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_85_CHOICE (123u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_95_CHOICE (124u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_105_CHOICE (125u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_115_CHOICE (126u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_125_CHOICE (127u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_135_CHOICE (128u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTRONIC_145_CHOICE (129u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_MOTOR_WAY_BEGIN_CHOICE (171u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_END_OF__MOTOR_WAY_CHOICE (172u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_EXPR_WAY_BEGIN_CHOICE (173u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_REGULAR_END_OF__EXPR_WAY_CHOICE (174u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_REGULAR__PLAYGROUND_AREA_BEGIN_CHOICE (175u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_REGULAR__END_OF_PLAYGROUND_AREA_CHOICE (176u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_REGULAR_NO_PASSING_START_CHOICE (200u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_REGULAR_END_OF_NO_PASSING_CHOICE (201u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECTR_NO_PASSING_START_CHOICE (220u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_STANDARD_ELECT_END_OF_NO_PASSING_CHOICE (221u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_NO_SIGN_DETECTED_CHOICE (254u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D1_E_INVALID_SIGN__CHOICE (255u)

#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_NONE_CHOICE (0u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_RAIN_CHOICE (1u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_SNOW_CHOICE (2u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_TRAILER_CHOICE (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_TIME_CHOICE (4u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_ARROW_LEFT_CHOICE (5u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_ARROW_RIGHT_CHOICE (6u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_BEND_ARROW_LEFT_CHOICE (7u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_BEND_ARROW_RIGHT_CHOICE (8u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_TRUCK_CHOICE (9u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_DISTANCE_ARROW___DISTANCE_FOR__CHOICE (10u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_WEIGHT_CHOICE (11u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_DISTANCE_IN_CHOICE (12u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_TRACTOR_CHOICE (13u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_SNOW_RAIN_CHOICE (14u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_SCHOOL_CHOICE (15u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_RAIN_CLOUD_CHOICE (16u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_FOG_CHOICE (17u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_HAZARDOUS_MATERIALS_CHOICE (18u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_NIGHT_CHOICE (19u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_SUPP_SIGN_GENERIC_CHOICE (20u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_E_RAPPEL_CHOICE (21u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_E_ZONE_CHOICE (22u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D1_INVALID_SUPP_CHOICE (255u)

#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_10_CHOICE (0u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_20_CHOICE (1u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_30_CHOICE (2u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_40_CHOICE (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_50_CHOICE (4u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_60_CHOICE (5u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_70_CHOICE (6u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_80_CHOICE (7u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_90_CHOICE (8u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_100_CHOICE (9u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_110_CHOICE (10u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_120_CHOICE (11u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_130_CHOICE (12u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_140_CHOICE (13u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_END_OF_NUM_RESTRICTION_CHOICE (20u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_10_CHOICE (28u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_20_CHOICE (29u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_30_CHOICE (30u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_40_CHOICE (31u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_50_CHOICE (32u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_60_CHOICE (33u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_70_CHOICE (34u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_80_CHOICE (35u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_90_CHOICE (36u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_100_CHOICE (37u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_110_CHOICE (38u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_120_CHOICE (39u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_130_CHOICE (40u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_140_CHOICE (41u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_ELECTRONIC_END_OF_NUM_RESTRICT_CHOICE (50u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_REGULAR_GEN_END_ALL_RESTRICT_CHOICE (64u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_ELECTRIC_GEN_END_ALL_RESTRICTION_CHOICE (65u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_5_CHOICE (100u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_15_CHOICE (101u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_25_CHOICE (102u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_35_CHOICE (103u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_45_CHOICE (104u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_55_CHOICE (105u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_65_CHOICE (106u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_75_CHOICE (107u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_85_CHOICE (108u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_95_CHOICE (109u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_105_CHOICE (110u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_115_CHOICE (111u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_125_CHOICE (112u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_135_CHOICE (113u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_145_CHOICE (114u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_5_CHOICE (115u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_15_CHOICE (116u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_25_CHOICE (117u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_35_CHOICE (118u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_45_CHOICE (119u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_55_CHOICE (120u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_65_CHOICE (121u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_75_CHOICE (122u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_85_CHOICE (123u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_95_CHOICE (124u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_105_CHOICE (125u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_115_CHOICE (126u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_125_CHOICE (127u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_135_CHOICE (128u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTRONIC_145_CHOICE (129u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_MOTOR_WAY_BEGIN_CHOICE (171u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_END_OF__MOTOR_WAY_CHOICE (172u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_EXPR_WAY_BEGIN_CHOICE (173u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_REGULAR_END_OF__EXPR_WAY_CHOICE (174u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_REGULAR__PLAYGROUND_AREA_BEGIN_CHOICE (175u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_REGULAR__END_OF_PLAYGROUND_AREA_CHOICE (176u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_REGULAR_NO_PASSING_START_CHOICE (200u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_REGULAR_END_OF_NO_PASSING_CHOICE (201u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECTR_NO_PASSING_START_CHOICE (220u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_STANDARD_ELECT_END_OF_NO_PASSING_CHOICE (221u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_NO_SIGN_DETECTED_CHOICE (254u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D2_E_INVALID_SIGN__CHOICE (255u)

#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_NONE_CHOICE (0u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_RAIN_CHOICE (1u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_SNOW_CHOICE (2u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_TRAILER_CHOICE (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_TIME_CHOICE (4u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_ARROW_LEFT_CHOICE (5u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_ARROW_RIGHT_CHOICE (6u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_BEND_ARROW_LEFT_CHOICE (7u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_BEND_ARROW_RIGHT_CHOICE (8u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_TRUCK_CHOICE (9u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_DISTANCE_ARROW___DISTANCE_FOR__CHOICE (10u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_WEIGHT_CHOICE (11u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_DISTANCE_IN_CHOICE (12u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_TRACTOR_CHOICE (13u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_SNOW_RAIN_CHOICE (14u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_SCHOOL_CHOICE (15u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_RAIN_CLOUD_CHOICE (16u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_FOG_CHOICE (17u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_HAZARDOUS_MATERIALS_CHOICE (18u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_NIGHT_CHOICE (19u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_SUPP_SIGN_GENERIC_CHOICE (20u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_E_RAPPEL_CHOICE (21u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_E_ZONE_CHOICE (22u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D2_INVALID_SUPP_CHOICE (255u)

#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_10_CHOICE (0u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_20_CHOICE (1u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_30_CHOICE (2u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_40_CHOICE (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_50_CHOICE (4u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_60_CHOICE (5u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_70_CHOICE (6u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_80_CHOICE (7u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_90_CHOICE (8u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_100_CHOICE (9u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_110_CHOICE (10u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_120_CHOICE (11u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_130_CHOICE (12u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_140_CHOICE (13u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_END_OF_NUM_RESTRICTION_CHOICE (20u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_10_CHOICE (28u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_20_CHOICE (29u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_30_CHOICE (30u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_40_CHOICE (31u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_50_CHOICE (32u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_60_CHOICE (33u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_70_CHOICE (34u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_80_CHOICE (35u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_90_CHOICE (36u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_100_CHOICE (37u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_110_CHOICE (38u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_120_CHOICE (39u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_130_CHOICE (40u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_140_CHOICE (41u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_ELECTRONIC_END_OF_NUM_RESTRICT_CHOICE (50u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_REGULAR_GEN_END_ALL_RESTRICT_CHOICE (64u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_ELECTRIC_GEN_END_ALL_RESTRICTION_CHOICE (65u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_5_CHOICE (100u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_15_CHOICE (101u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_25_CHOICE (102u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_35_CHOICE (103u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_45_CHOICE (104u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_55_CHOICE (105u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_65_CHOICE (106u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_75_CHOICE (107u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_85_CHOICE (108u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_95_CHOICE (109u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_105_CHOICE (110u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_115_CHOICE (111u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_125_CHOICE (112u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_135_CHOICE (113u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_145_CHOICE (114u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_5_CHOICE (115u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_15_CHOICE (116u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_25_CHOICE (117u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_35_CHOICE (118u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_45_CHOICE (119u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_55_CHOICE (120u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_65_CHOICE (121u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_75_CHOICE (122u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_85_CHOICE (123u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_95_CHOICE (124u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_105_CHOICE (125u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_115_CHOICE (126u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_125_CHOICE (127u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_135_CHOICE (128u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTRONIC_145_CHOICE (129u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_MOTOR_WAY_BEGIN_CHOICE (171u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_END_OF__MOTOR_WAY_CHOICE (172u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_EXPR_WAY_BEGIN_CHOICE (173u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_REGULAR_END_OF__EXPR_WAY_CHOICE (174u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_REGULAR__PLAYGROUND_AREA_BEGIN_CHOICE (175u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_REGULAR__END_OF_PLAYGROUND_AREA_CHOICE (176u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_REGULAR_NO_PASSING_START_CHOICE (200u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_REGULAR_END_OF_NO_PASSING_CHOICE (201u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECTR_NO_PASSING_START_CHOICE (220u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_STANDARD_ELECT_END_OF_NO_PASSING_CHOICE (221u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_NO_SIGN_DETECTED_CHOICE (254u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D3_E_INVALID_SIGN__CHOICE (255u)

#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_NONE_CHOICE (0u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_RAIN_CHOICE (1u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_SNOW_CHOICE (2u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_TRAILER_CHOICE (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_TIME_CHOICE (4u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_ARROW_LEFT_CHOICE (5u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_ARROW_RIGHT_CHOICE (6u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_BEND_ARROW_LEFT_CHOICE (7u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_BEND_ARROW_RIGHT_CHOICE (8u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_TRUCK_CHOICE (9u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_DISTANCE_ARROW___DISTANCE_FOR__CHOICE (10u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_WEIGHT_CHOICE (11u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_DISTANCE_IN_CHOICE (12u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_TRACTOR_CHOICE (13u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_SNOW_RAIN_CHOICE (14u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_SCHOOL_CHOICE (15u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_RAIN_CLOUD_CHOICE (16u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_FOG_CHOICE (17u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_HAZARDOUS_MATERIALS_CHOICE (18u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_NIGHT_CHOICE (19u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_SUPP_SIGN_GENERIC_CHOICE (20u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_E_RAPPEL_CHOICE (21u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_E_ZONE_CHOICE (22u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D3_INVALID_SUPP_CHOICE (255u)

#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_10_CHOICE (0u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_20_CHOICE (1u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_30_CHOICE (2u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_40_CHOICE (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_50_CHOICE (4u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_60_CHOICE (5u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_70_CHOICE (6u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_80_CHOICE (7u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_90_CHOICE (8u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_100_CHOICE (9u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_110_CHOICE (10u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_120_CHOICE (11u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_130_CHOICE (12u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_140_CHOICE (13u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_END_OF_NUM_RESTRICTION_CHOICE (20u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_10_CHOICE (28u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_20_CHOICE (29u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_30_CHOICE (30u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_40_CHOICE (31u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_50_CHOICE (32u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_60_CHOICE (33u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_70_CHOICE (34u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_80_CHOICE (35u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_90_CHOICE (36u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_100_CHOICE (37u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_110_CHOICE (38u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_120_CHOICE (39u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_130_CHOICE (40u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_140_CHOICE (41u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_ELECTRONIC_END_OF_NUM_RESTRICT_CHOICE (50u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_REGULAR_GEN_END_ALL_RESTRICT_CHOICE (64u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_ELECTRIC_GEN_END_ALL_RESTRICTION_CHOICE (65u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_5_CHOICE (100u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_15_CHOICE (101u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_25_CHOICE (102u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_35_CHOICE (103u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_45_CHOICE (104u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_55_CHOICE (105u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_65_CHOICE (106u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_75_CHOICE (107u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_85_CHOICE (108u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_95_CHOICE (109u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_105_CHOICE (110u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_115_CHOICE (111u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_125_CHOICE (112u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_135_CHOICE (113u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_145_CHOICE (114u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_5_CHOICE (115u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_15_CHOICE (116u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_25_CHOICE (117u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_35_CHOICE (118u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_45_CHOICE (119u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_55_CHOICE (120u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_65_CHOICE (121u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_75_CHOICE (122u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_85_CHOICE (123u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_95_CHOICE (124u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_105_CHOICE (125u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_115_CHOICE (126u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_125_CHOICE (127u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_135_CHOICE (128u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTRONIC_145_CHOICE (129u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_MOTOR_WAY_BEGIN_CHOICE (171u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_END_OF__MOTOR_WAY_CHOICE (172u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_EXPR_WAY_BEGIN_CHOICE (173u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_REGULAR_END_OF__EXPR_WAY_CHOICE (174u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_REGULAR__PLAYGROUND_AREA_BEGIN_CHOICE (175u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_REGULAR__END_OF_PLAYGROUND_AREA_CHOICE (176u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_REGULAR_NO_PASSING_START_CHOICE (200u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_REGULAR_END_OF_NO_PASSING_CHOICE (201u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECTR_NO_PASSING_START_CHOICE (220u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_STANDARD_ELECT_END_OF_NO_PASSING_CHOICE (221u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_NO_SIGN_DETECTED_CHOICE (254u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SIGN_TYPE_D4_E_INVALID_SIGN__CHOICE (255u)

#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_NONE_CHOICE (0u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_RAIN_CHOICE (1u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_SNOW_CHOICE (2u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_TRAILER_CHOICE (3u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_TIME_CHOICE (4u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_ARROW_LEFT_CHOICE (5u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_ARROW_RIGHT_CHOICE (6u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_BEND_ARROW_LEFT_CHOICE (7u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_BEND_ARROW_RIGHT_CHOICE (8u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_TRUCK_CHOICE (9u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_DISTANCE_ARROW___DISTANCE_FOR__CHOICE (10u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_WEIGHT_CHOICE (11u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_DISTANCE_IN_CHOICE (12u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_TRACTOR_CHOICE (13u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_SNOW_RAIN_CHOICE (14u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_SCHOOL_CHOICE (15u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_RAIN_CLOUD_CHOICE (16u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_FOG_CHOICE (17u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_HAZARDOUS_MATERIALS_CHOICE (18u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_NIGHT_CHOICE (19u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_SUPP_SIGN_GENERIC_CHOICE (20u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_E_RAPPEL_CHOICE (21u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_E_ZONE_CHOICE (22u)
#define EXT_LOG_DATA_VISION_ONLY_TSR_CONTINUES_VISION_ONLY_SUPP_SIGN_TYPE_D4_INVALID_SUPP_CHOICE (255u)

/**
 * Signals in message AHBC_Gradual_DataB.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_ahbc_gradual_data_b_t {
    /**
     * state of the lower boundary of the glare free area
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t st_bndry_dom_bot_ngl_hlb;

    /**
     * state of the left boundary of the glare free area
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t st_bndry_dom_ngl_lh_hlb;

    /**
     * state of the right boundary of the glare free area
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t st_bndry_dom_ngl_rh_hlb;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t st_obj_dist_hlb;

    /**
     * Range: 0..1 (0..1 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_target_change;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_target_change;

    /**
     * Range: 0..1 (0..1 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t too_many_cars;

    /**
     * Range: 0..1 (0..1 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t busy_scene;
};

/**
 * Signals in message Lane_Details.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_lane_details_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t position_in_lanes;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t number_of_lanes;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_guard_rail;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_guard_rail;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t construction_area;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_ldw_availability;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_ldw_availability;

    /**
     * Range: 0..65534.94244610946759195259292 (-31.999..32 radians)
     * Scale: 0.000976563
     * Offset: -31.999
     */
    uint16_t yaw_angle;

    /**
     * Range: 0..65535.09404285995150403040828 (-0.05..0.05 radians)
     * Scale: 1.5259e-06
     * Offset: -0.05
     */
    uint16_t pitch_angle;
};

/**
 * Signals in message TSR.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_tsr_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_sign_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_supp_sign_type;

    /**
     * Range: 0..244 (0..122 meter)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t sign_position_x;

    /**
     * Range: -64..62 (-32..31 meters)
     * Scale: 0.5
     * Offset: 0
     */
    int8_t sign_position_y;

    /**
     * Range: -32..32 (-16..16 meters)
     * Scale: 0.5
     * Offset: 0
     */
    int8_t sign_position_z;

    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t filter_type;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t no_entry_vision_status;
};

/**
 * Signals in message AHBC_Gradual.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_ahbc_gradual_t {
    /**
     * lower boundary of the glare free area (GFA) in the image,
     * given as angle with respect to the camera coordinate system
     *
     * Range: 0..255 (-10..15.5 degree)
     * Scale: 0.1
     * Offset: -10
     */
    uint8_t bndry_dom_bot_ngl_hlb;

    /**
     * left boundary of the glare free area (GFA) in the image,
     * given as angle with respect to the camera coordinate system
     *
     * Range: 0..4095 (-20..389.5 -)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t bndry_dom_ngl_lh_hlb;

    /**
     * right boundary of the glare free area (GFA) in the image,
     * given as angle with respect to the camera coordinate system
     *
     * Range: 0..4095 (-20..389.5 -)
     * Scale: 0.1
     * Offset: -20
     */
    uint16_t bndry_dom_ngl_rh_hlb;

    /**
     * Range of the closest object ahead of the vehicle defining
     * the lower boundary of the glare free area (GFA)
     *
     * Range: 0..200 (0..400 m)
     * Scale: 2
     * Offset: 0
     */
    uint8_t obj_dist_hlb;

    /**
     * Range of the closest object ahead of the vehicle defining
     * the lower boundary of the glare free area (GFA)
     *
     * Range: 0..200 (0..400 m)
     * Scale: 2
     * Offset: 0
     */
    uint8_t obj_dist_hlb_right;

    /**
     * Range of the closest object ahead of the vehicle defining
     * the lower boundary of the glare free area (GFA)
     *
     * Range: 0..200 (0..400 m)
     * Scale: 2
     * Offset: 0
     */
    uint8_t obj_dist_hlb_left;
};

/**
 * Signals in message AWSDisplay.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_aws_display_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sound_type;

    /**
     * indicates if the system is in night mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dusk_time_indicator;

    /**
     * indicates if the system is in night mode
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t night_time_indicator;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t suppress;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t headway_valid;

    /**
     * Range: 0..99 (0..9.9 s)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t headway_measurement;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lanes_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_ldw_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_ldw_on;

    /**
     * Meaning: There is an FCW warning on a vehicle.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fcw_on;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_crossing;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_crossing;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t maintenance;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t failsafe;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t ped_fcw;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t ped_in_dz;

    /**
     * When no CIPV is present, HW Level = 0 (Off)
     * When a CIPV is present with HW >1.0, HW Level = 1 (Green)
     * When a CIPV is present with 0.6 > HW >1.0, HW Level = 2 (Orange)
     * When a CIPV is present with HW < 0.6, HW Level = 3 (Red)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t headway_warning_level;
};

/**
 * Signals in message ObstacleDataC.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_obstacle_data_c_t {
    /**
     * Range: -32768..32767 (-327.68..327.67 degree)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t obstacle_angle_rate;

    /**
     * currently not in use
     * always zero
     *
     * Range: -32767..32767 (-6.5534..6.5534 pix/sec)
     * Scale: 0.0002
     * Offset: 0
     */
    int16_t obstacle_scale_change;

    /**
     * The longitude acceleration of the object.
     * Type: 10 bit, signed integer
     * Range: -14.97 : 14.97 [m/s2]
     * Conversion: (HEX)* 0.03
     * Invalid value: 200h
     *
     * Range: -499..499 (-14.97..14.97 m/s square)
     * Scale: 0.03
     * Offset: 0
     */
    int16_t object_accel_x;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obstacle_replaced;

    /**
     * Range: -32768..32768 (-327.68..327.68 degree)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t obstacle_angle;
};

/**
 * Signals in message ObstacleDataB.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_obstacle_data_b_t {
    /**
     * Range: 0..63 (0..31.5 m)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t obstacle_lenght;

    /**
     * Range: 0..250 (0..12.5 m)
     * Scale: 0.05
     * Offset: 0
     */
    uint8_t obstacle_width;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obstacle_age;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obstacle_lane;

    /**
     * 0 - not CIPV
     * 1 - CIPV
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cipv_flag;

    /**
     * Range: 0..4095.008 (0..255.938 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t radar_pos_x;

    /**
     * Range: -2048..2048 (-128..128 m/sec)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t radar_vel_x;

    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t radar_match_confidence;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t matched_radar_id;
};

/**
 * Signals in message ObstacleDataA.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_obstacle_data_a_t {
    /**
     * New obstacles are given the last used free ID
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obstacle_id;

    /**
     * Range: 0..4000 (0..250 m)
     * Scale: 0.0625
     * Offset: 0
     */
    uint16_t obstacle_pos_x;

    /**
     * Range: -512..511 (-32..31.9375 m)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t obstacle_pos_y;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t blinker_info;

    /**
     * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our estimation of where it is going to be within one second.
     * 
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cut_in_and_out;

    /**
     * Range: -2046.88..2046.88 (-127.93..127.93 m/sec)
     * Scale: 0.0625
     * Offset: 0
     */
    int16_t obstacle_vel_x;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obstacle_type;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t obstacle_status;

    /**
     * 0 = off or not identifined
     * 1 = on
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t obstacle_brake_lights;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t obstacle_valid;
};

/**
 * Signals in message ObstacleStatus.
 *
 * Values:
00000000 - No Failsafe
00000001 - Low Sun
00000010 - Blur Image
00000100 - Smear Image
00001000 - Partial Transparent Blockage
00010000 - Full Blockage
00100000 - Splashes
01000000 - Out of Calibration
10000000 - Impaired VD

 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_obstacle_status_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t num_obstacles;

    /**
     * Range: 0..255 (0..255 mSec)
     * Scale: 1
     * Offset: 0
     */
    uint8_t timestamp;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t application_version;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_version_number_section;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_close_range_cut_in;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_close_range_cut_in;

    /**
     * Currently this signal is implemented (Stop or Go are reported) only when the own vehicle is standing (having ego speed of less than 0.1 meters per second). Otherwise, the value 15 is reported.
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t go;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t protocol_version;

    /**
     * Range: 0..8191 (0..8191 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t failsafe;

    /**
     * Indication whether we detect a close car in front of the host vehicle or not.
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t close_car;
};

/**
 * Signals in message HighLowBeam.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_high_low_beam_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t binary_high_low_beam_decision;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reasons_to_switch_to_low_beam;
};

/**
 * Signals in message Vision_Only_TSR_continues.
 *
 * All signal values are as on the CAN bus.
 */
struct ext_log_data_vision_only_tsr_continues_t {
    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_sign_type_d1;

    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_supp_sign_type_d1;

    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_sign_type_d2;

    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_supp_sign_type_d2;

    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_sign_type_d3;

    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_supp_sign_type_d3;

    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_sign_type_d4;

    /**
     * Range: 0..255 (0..255 ENUM)
     * Scale: 1
     * Offset: 0
     */
    uint8_t vision_only_supp_sign_type_d4;
};

/**
 * Pack message AHBC_Gradual_DataB.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_ahbc_gradual_data_b_pack(
    uint8_t *dst_p,
    const struct ext_log_data_ahbc_gradual_data_b_t *src_p,
    size_t size);

/**
 * Unpack message AHBC_Gradual_DataB.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_ahbc_gradual_data_b_unpack(
    struct ext_log_data_ahbc_gradual_data_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_data_b_st_bndry_dom_bot_ngl_hlb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_data_b_st_bndry_dom_bot_ngl_hlb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_data_b_st_bndry_dom_bot_ngl_hlb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_data_b_st_bndry_dom_ngl_lh_hlb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_data_b_st_bndry_dom_ngl_lh_hlb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_data_b_st_bndry_dom_ngl_lh_hlb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_data_b_st_bndry_dom_ngl_rh_hlb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_data_b_st_bndry_dom_ngl_rh_hlb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_data_b_st_bndry_dom_ngl_rh_hlb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_data_b_st_obj_dist_hlb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_data_b_st_obj_dist_hlb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_data_b_st_obj_dist_hlb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_data_b_left_target_change_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_data_b_left_target_change_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_data_b_left_target_change_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_data_b_right_target_change_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_data_b_right_target_change_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_data_b_right_target_change_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_data_b_too_many_cars_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_data_b_too_many_cars_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_data_b_too_many_cars_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_data_b_busy_scene_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_data_b_busy_scene_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_data_b_busy_scene_is_in_range(uint8_t value);

/**
 * Pack message Lane_Details.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_lane_details_pack(
    uint8_t *dst_p,
    const struct ext_log_data_lane_details_t *src_p,
    size_t size);

/**
 * Unpack message Lane_Details.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_lane_details_unpack(
    struct ext_log_data_lane_details_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_lane_details_position_in_lanes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_position_in_lanes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_position_in_lanes_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_lane_details_number_of_lanes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_number_of_lanes_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_number_of_lanes_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_lane_details_left_guard_rail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_left_guard_rail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_left_guard_rail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_lane_details_right_guard_rail_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_right_guard_rail_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_right_guard_rail_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_lane_details_construction_area_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_construction_area_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_construction_area_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_lane_details_right_ldw_availability_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_right_ldw_availability_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_right_ldw_availability_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_lane_details_left_ldw_availability_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_left_ldw_availability_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_left_ldw_availability_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ext_log_data_lane_details_yaw_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_yaw_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_yaw_angle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ext_log_data_lane_details_pitch_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_lane_details_pitch_angle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_lane_details_pitch_angle_is_in_range(uint16_t value);

/**
 * Pack message TSR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_tsr_pack(
    uint8_t *dst_p,
    const struct ext_log_data_tsr_t *src_p,
    size_t size);

/**
 * Unpack message TSR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_tsr_unpack(
    struct ext_log_data_tsr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_tsr_vision_only_sign_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_tsr_vision_only_sign_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_tsr_vision_only_sign_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_tsr_vision_only_supp_sign_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_tsr_vision_only_supp_sign_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_tsr_vision_only_supp_sign_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_tsr_sign_position_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_tsr_sign_position_x_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_tsr_sign_position_x_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ext_log_data_tsr_sign_position_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_tsr_sign_position_y_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_tsr_sign_position_y_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ext_log_data_tsr_sign_position_z_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_tsr_sign_position_z_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_tsr_sign_position_z_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_tsr_filter_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_tsr_filter_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_tsr_filter_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_tsr_no_entry_vision_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_tsr_no_entry_vision_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_tsr_no_entry_vision_status_is_in_range(uint8_t value);

/**
 * Pack message AHBC_Gradual.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_ahbc_gradual_pack(
    uint8_t *dst_p,
    const struct ext_log_data_ahbc_gradual_t *src_p,
    size_t size);

/**
 * Unpack message AHBC_Gradual.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_ahbc_gradual_unpack(
    struct ext_log_data_ahbc_gradual_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_bndry_dom_bot_ngl_hlb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_bndry_dom_bot_ngl_hlb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_bndry_dom_bot_ngl_hlb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ext_log_data_ahbc_gradual_bndry_dom_ngl_lh_hlb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_bndry_dom_ngl_lh_hlb_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_bndry_dom_ngl_lh_hlb_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ext_log_data_ahbc_gradual_bndry_dom_ngl_rh_hlb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_bndry_dom_ngl_rh_hlb_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_bndry_dom_ngl_rh_hlb_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_obj_dist_hlb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_obj_dist_hlb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_obj_dist_hlb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_obj_dist_hlb_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_obj_dist_hlb_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_obj_dist_hlb_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_ahbc_gradual_obj_dist_hlb_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_ahbc_gradual_obj_dist_hlb_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_ahbc_gradual_obj_dist_hlb_left_is_in_range(uint8_t value);

/**
 * Pack message AWSDisplay.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_aws_display_pack(
    uint8_t *dst_p,
    const struct ext_log_data_aws_display_t *src_p,
    size_t size);

/**
 * Unpack message AWSDisplay.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_aws_display_unpack(
    struct ext_log_data_aws_display_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_sound_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_sound_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_sound_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_dusk_time_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_dusk_time_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_dusk_time_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_night_time_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_night_time_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_night_time_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_suppress_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_suppress_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_suppress_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_headway_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_headway_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_headway_valid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_headway_measurement_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_headway_measurement_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_headway_measurement_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_lanes_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_lanes_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_lanes_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_left_ldw_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_left_ldw_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_left_ldw_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_right_ldw_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_right_ldw_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_right_ldw_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_fcw_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_fcw_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_fcw_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_left_crossing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_left_crossing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_left_crossing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_right_crossing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_right_crossing_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_right_crossing_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_maintenance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_maintenance_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_maintenance_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_failsafe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_failsafe_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_failsafe_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ext_log_data_aws_display_ped_fcw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_ped_fcw_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_ped_fcw_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ext_log_data_aws_display_ped_in_dz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_ped_in_dz_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_ped_in_dz_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_aws_display_headway_warning_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_aws_display_headway_warning_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_aws_display_headway_warning_level_is_in_range(uint8_t value);

/**
 * Pack message ObstacleDataC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_obstacle_data_c_pack(
    uint8_t *dst_p,
    const struct ext_log_data_obstacle_data_c_t *src_p,
    size_t size);

/**
 * Unpack message ObstacleDataC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_obstacle_data_c_unpack(
    struct ext_log_data_obstacle_data_c_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ext_log_data_obstacle_data_c_obstacle_angle_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_c_obstacle_angle_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_c_obstacle_angle_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ext_log_data_obstacle_data_c_obstacle_scale_change_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_c_obstacle_scale_change_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_c_obstacle_scale_change_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ext_log_data_obstacle_data_c_object_accel_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_c_object_accel_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_c_object_accel_x_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_c_obstacle_replaced_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_c_obstacle_replaced_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_c_obstacle_replaced_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ext_log_data_obstacle_data_c_obstacle_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_c_obstacle_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_c_obstacle_angle_is_in_range(int16_t value);

/**
 * Pack message ObstacleDataB.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_obstacle_data_b_pack(
    uint8_t *dst_p,
    const struct ext_log_data_obstacle_data_b_t *src_p,
    size_t size);

/**
 * Unpack message ObstacleDataB.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_obstacle_data_b_unpack(
    struct ext_log_data_obstacle_data_b_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_b_obstacle_lenght_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_obstacle_lenght_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_obstacle_lenght_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_b_obstacle_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_obstacle_width_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_obstacle_width_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_b_obstacle_age_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_obstacle_age_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_obstacle_age_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_b_obstacle_lane_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_obstacle_lane_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_obstacle_lane_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_b_cipv_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_cipv_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_cipv_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ext_log_data_obstacle_data_b_radar_pos_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_radar_pos_x_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_radar_pos_x_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ext_log_data_obstacle_data_b_radar_vel_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_radar_vel_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_radar_vel_x_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_b_radar_match_confidence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_radar_match_confidence_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_radar_match_confidence_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_b_matched_radar_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_b_matched_radar_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_b_matched_radar_id_is_in_range(uint8_t value);

/**
 * Pack message ObstacleDataA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_obstacle_data_a_pack(
    uint8_t *dst_p,
    const struct ext_log_data_obstacle_data_a_t *src_p,
    size_t size);

/**
 * Unpack message ObstacleDataA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_obstacle_data_a_unpack(
    struct ext_log_data_obstacle_data_a_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_a_obstacle_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_obstacle_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_obstacle_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ext_log_data_obstacle_data_a_obstacle_pos_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_obstacle_pos_x_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_obstacle_pos_x_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ext_log_data_obstacle_data_a_obstacle_pos_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_obstacle_pos_y_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_obstacle_pos_y_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_a_blinker_info_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_blinker_info_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_blinker_info_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_a_cut_in_and_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_cut_in_and_out_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_cut_in_and_out_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ext_log_data_obstacle_data_a_obstacle_vel_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_obstacle_vel_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_obstacle_vel_x_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_a_obstacle_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_obstacle_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_obstacle_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_a_obstacle_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_obstacle_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_obstacle_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_a_obstacle_brake_lights_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_obstacle_brake_lights_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_obstacle_brake_lights_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_data_a_obstacle_valid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_data_a_obstacle_valid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_data_a_obstacle_valid_is_in_range(uint8_t value);

/**
 * Pack message ObstacleStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_obstacle_status_pack(
    uint8_t *dst_p,
    const struct ext_log_data_obstacle_status_t *src_p,
    size_t size);

/**
 * Unpack message ObstacleStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_obstacle_status_unpack(
    struct ext_log_data_obstacle_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_num_obstacles_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_num_obstacles_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_num_obstacles_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_timestamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_timestamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_timestamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_application_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_application_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_application_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_active_version_number_section_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_active_version_number_section_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_active_version_number_section_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_left_close_range_cut_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_left_close_range_cut_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_left_close_range_cut_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_right_close_range_cut_in_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_right_close_range_cut_in_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_right_close_range_cut_in_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_go_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_go_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_go_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_protocol_version_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_protocol_version_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_protocol_version_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ext_log_data_obstacle_status_failsafe_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_failsafe_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_failsafe_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_obstacle_status_close_car_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_obstacle_status_close_car_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_obstacle_status_close_car_is_in_range(uint8_t value);

/**
 * Pack message HighLowBeam.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_high_low_beam_pack(
    uint8_t *dst_p,
    const struct ext_log_data_high_low_beam_t *src_p,
    size_t size);

/**
 * Unpack message HighLowBeam.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_high_low_beam_unpack(
    struct ext_log_data_high_low_beam_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_high_low_beam_binary_high_low_beam_decision_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_high_low_beam_binary_high_low_beam_decision_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_high_low_beam_binary_high_low_beam_decision_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ext_log_data_high_low_beam_reasons_to_switch_to_low_beam_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_high_low_beam_reasons_to_switch_to_low_beam_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_high_low_beam_reasons_to_switch_to_low_beam_is_in_range(uint16_t value);

/**
 * Pack message Vision_Only_TSR_continues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ext_log_data_vision_only_tsr_continues_pack(
    uint8_t *dst_p,
    const struct ext_log_data_vision_only_tsr_continues_t *src_p,
    size_t size);

/**
 * Unpack message Vision_Only_TSR_continues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ext_log_data_vision_only_tsr_continues_unpack(
    struct ext_log_data_vision_only_tsr_continues_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_vision_only_tsr_continues_vision_only_sign_type_d4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ext_log_data_vision_only_tsr_continues_vision_only_supp_sign_type_d4_is_in_range(uint8_t value);

#endif
