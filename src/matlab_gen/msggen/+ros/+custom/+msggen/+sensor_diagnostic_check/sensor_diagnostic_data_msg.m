classdef sensor_diagnostic_data_msg < ros.Message
    %sensor_diagnostic_data_msg MATLAB implementation of sensor_diagnostic_check/sensor_diagnostic_data_msg
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'sensor_diagnostic_check/sensor_diagnostic_data_msg' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '7b858252cedc904b150f78c32f8819ac' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        StarterConsistency
        TimeStamp
        EnderConsistency
        Counter
        CheckSum
        ItcInfo
        HardwareFail
        SguFail
        HorizontalMisalign
        AbsorbBlind
        DistortBlind
        MessageCounter
        MessageCrc
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AbsorbBlind', 'CheckSum', 'Counter', 'DistortBlind', 'EnderConsistency', 'HardwareFail', 'Header', 'HorizontalMisalign', 'ItcInfo', 'MessageCounter', 'MessageCrc', 'SguFail', 'StarterConsistency', 'TimeStamp'} % List of non-constant message properties
        ROSPropertyList = {'absorb_blind', 'check_sum', 'counter', 'distort_blind', 'ender_consistency', 'hardware_fail', 'header', 'horizontal_misalign', 'itc_info', 'message_counter', 'message_crc', 'sgu_fail', 'starter_consistency', 'time_stamp'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = sensor_diagnostic_data_msg(msg)
            %sensor_diagnostic_data_msg Construct the message object sensor_diagnostic_data_msg
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function starterconsistency = get.StarterConsistency(obj)
            %get.StarterConsistency Get the value for property StarterConsistency
            starterconsistency = double(obj.JavaMessage.getStarterConsistency);
        end
        
        function set.StarterConsistency(obj, starterconsistency)
            %set.StarterConsistency Set the value for property StarterConsistency
            validateattributes(starterconsistency, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'StarterConsistency');
            
            obj.JavaMessage.setStarterConsistency(starterconsistency);
        end
        
        function timestamp = get.TimeStamp(obj)
            %get.TimeStamp Get the value for property TimeStamp
            timestamp = double(obj.JavaMessage.getTimeStamp);
        end
        
        function set.TimeStamp(obj, timestamp)
            %set.TimeStamp Set the value for property TimeStamp
            validateattributes(timestamp, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'TimeStamp');
            
            obj.JavaMessage.setTimeStamp(timestamp);
        end
        
        function enderconsistency = get.EnderConsistency(obj)
            %get.EnderConsistency Get the value for property EnderConsistency
            enderconsistency = double(obj.JavaMessage.getEnderConsistency);
        end
        
        function set.EnderConsistency(obj, enderconsistency)
            %set.EnderConsistency Set the value for property EnderConsistency
            validateattributes(enderconsistency, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'EnderConsistency');
            
            obj.JavaMessage.setEnderConsistency(enderconsistency);
        end
        
        function counter = get.Counter(obj)
            %get.Counter Get the value for property Counter
            counter = double(obj.JavaMessage.getCounter);
        end
        
        function set.Counter(obj, counter)
            %set.Counter Set the value for property Counter
            validateattributes(counter, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'Counter');
            
            obj.JavaMessage.setCounter(counter);
        end
        
        function checksum = get.CheckSum(obj)
            %get.CheckSum Get the value for property CheckSum
            checksum = double(obj.JavaMessage.getCheckSum);
        end
        
        function set.CheckSum(obj, checksum)
            %set.CheckSum Set the value for property CheckSum
            validateattributes(checksum, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'CheckSum');
            
            obj.JavaMessage.setCheckSum(checksum);
        end
        
        function itcinfo = get.ItcInfo(obj)
            %get.ItcInfo Get the value for property ItcInfo
            itcinfo = typecast(int16(obj.JavaMessage.getItcInfo), 'uint16');
        end
        
        function set.ItcInfo(obj, itcinfo)
            %set.ItcInfo Set the value for property ItcInfo
            validateattributes(itcinfo, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'ItcInfo');
            
            obj.JavaMessage.setItcInfo(itcinfo);
        end
        
        function hardwarefail = get.HardwareFail(obj)
            %get.HardwareFail Get the value for property HardwareFail
            hardwarefail = logical(obj.JavaMessage.getHardwareFail);
        end
        
        function set.HardwareFail(obj, hardwarefail)
            %set.HardwareFail Set the value for property HardwareFail
            validateattributes(hardwarefail, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'HardwareFail');
            
            obj.JavaMessage.setHardwareFail(hardwarefail);
        end
        
        function sgufail = get.SguFail(obj)
            %get.SguFail Get the value for property SguFail
            sgufail = logical(obj.JavaMessage.getSguFail);
        end
        
        function set.SguFail(obj, sgufail)
            %set.SguFail Set the value for property SguFail
            validateattributes(sgufail, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'SguFail');
            
            obj.JavaMessage.setSguFail(sgufail);
        end
        
        function horizontalmisalign = get.HorizontalMisalign(obj)
            %get.HorizontalMisalign Get the value for property HorizontalMisalign
            horizontalmisalign = double(obj.JavaMessage.getHorizontalMisalign);
        end
        
        function set.HorizontalMisalign(obj, horizontalmisalign)
            %set.HorizontalMisalign Set the value for property HorizontalMisalign
            validateattributes(horizontalmisalign, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'HorizontalMisalign');
            
            obj.JavaMessage.setHorizontalMisalign(horizontalmisalign);
        end
        
        function absorbblind = get.AbsorbBlind(obj)
            %get.AbsorbBlind Get the value for property AbsorbBlind
            absorbblind = double(obj.JavaMessage.getAbsorbBlind);
        end
        
        function set.AbsorbBlind(obj, absorbblind)
            %set.AbsorbBlind Set the value for property AbsorbBlind
            validateattributes(absorbblind, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'AbsorbBlind');
            
            obj.JavaMessage.setAbsorbBlind(absorbblind);
        end
        
        function distortblind = get.DistortBlind(obj)
            %get.DistortBlind Get the value for property DistortBlind
            distortblind = double(obj.JavaMessage.getDistortBlind);
        end
        
        function set.DistortBlind(obj, distortblind)
            %set.DistortBlind Set the value for property DistortBlind
            validateattributes(distortblind, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'DistortBlind');
            
            obj.JavaMessage.setDistortBlind(distortblind);
        end
        
        function messagecounter = get.MessageCounter(obj)
            %get.MessageCounter Get the value for property MessageCounter
            messagecounter = typecast(int8(obj.JavaMessage.getMessageCounter), 'uint8');
        end
        
        function set.MessageCounter(obj, messagecounter)
            %set.MessageCounter Set the value for property MessageCounter
            validateattributes(messagecounter, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'MessageCounter');
            
            obj.JavaMessage.setMessageCounter(messagecounter);
        end
        
        function messagecrc = get.MessageCrc(obj)
            %get.MessageCrc Get the value for property MessageCrc
            messagecrc = typecast(int32(obj.JavaMessage.getMessageCrc), 'uint32');
        end
        
        function set.MessageCrc(obj, messagecrc)
            %set.MessageCrc Set the value for property MessageCrc
            validateattributes(messagecrc, {'numeric'}, {'nonempty', 'scalar'}, 'sensor_diagnostic_data_msg', 'MessageCrc');
            
            obj.JavaMessage.setMessageCrc(messagecrc);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.StarterConsistency = obj.StarterConsistency;
            cpObj.TimeStamp = obj.TimeStamp;
            cpObj.EnderConsistency = obj.EnderConsistency;
            cpObj.Counter = obj.Counter;
            cpObj.CheckSum = obj.CheckSum;
            cpObj.ItcInfo = obj.ItcInfo;
            cpObj.HardwareFail = obj.HardwareFail;
            cpObj.SguFail = obj.SguFail;
            cpObj.HorizontalMisalign = obj.HorizontalMisalign;
            cpObj.AbsorbBlind = obj.AbsorbBlind;
            cpObj.DistortBlind = obj.DistortBlind;
            cpObj.MessageCounter = obj.MessageCounter;
            cpObj.MessageCrc = obj.MessageCrc;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.StarterConsistency = strObj.StarterConsistency;
            obj.TimeStamp = strObj.TimeStamp;
            obj.EnderConsistency = strObj.EnderConsistency;
            obj.Counter = strObj.Counter;
            obj.CheckSum = strObj.CheckSum;
            obj.ItcInfo = strObj.ItcInfo;
            obj.HardwareFail = strObj.HardwareFail;
            obj.SguFail = strObj.SguFail;
            obj.HorizontalMisalign = strObj.HorizontalMisalign;
            obj.AbsorbBlind = strObj.AbsorbBlind;
            obj.DistortBlind = strObj.DistortBlind;
            obj.MessageCounter = strObj.MessageCounter;
            obj.MessageCrc = strObj.MessageCrc;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.StarterConsistency = obj.StarterConsistency;
            strObj.TimeStamp = obj.TimeStamp;
            strObj.EnderConsistency = obj.EnderConsistency;
            strObj.Counter = obj.Counter;
            strObj.CheckSum = obj.CheckSum;
            strObj.ItcInfo = obj.ItcInfo;
            strObj.HardwareFail = obj.HardwareFail;
            strObj.SguFail = obj.SguFail;
            strObj.HorizontalMisalign = obj.HorizontalMisalign;
            strObj.AbsorbBlind = obj.AbsorbBlind;
            strObj.DistortBlind = obj.DistortBlind;
            strObj.MessageCounter = obj.MessageCounter;
            strObj.MessageCrc = obj.MessageCrc;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.sensor_diagnostic_check.sensor_diagnostic_data_msg.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.sensor_diagnostic_check.sensor_diagnostic_data_msg;
            obj.reload(strObj);
        end
    end
end
