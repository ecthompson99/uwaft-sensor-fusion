classdef sudo_driver_input_msg < ros.Message
    %sudo_driver_input_msg MATLAB implementation of ecmc/sudo_driver_input_msg
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'ecmc/sudo_driver_input_msg' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'bb648d601d267eb9e53d78de0106647b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        TargetAccel
        WheelAngle
        AebOverride
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AebOverride', 'Header', 'TargetAccel', 'WheelAngle'} % List of non-constant message properties
        ROSPropertyList = {'aeb_override', 'header', 'target_accel', 'wheel_angle'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = sudo_driver_input_msg(msg)
            %sudo_driver_input_msg Construct the message object sudo_driver_input_msg
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'sudo_driver_input_msg', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function targetaccel = get.TargetAccel(obj)
            %get.TargetAccel Get the value for property TargetAccel
            targetaccel = double(obj.JavaMessage.getTargetAccel);
        end
        
        function set.TargetAccel(obj, targetaccel)
            %set.TargetAccel Set the value for property TargetAccel
            validateattributes(targetaccel, {'numeric'}, {'nonempty', 'scalar'}, 'sudo_driver_input_msg', 'TargetAccel');
            
            obj.JavaMessage.setTargetAccel(targetaccel);
        end
        
        function wheelangle = get.WheelAngle(obj)
            %get.WheelAngle Get the value for property WheelAngle
            wheelangle = double(obj.JavaMessage.getWheelAngle);
        end
        
        function set.WheelAngle(obj, wheelangle)
            %set.WheelAngle Set the value for property WheelAngle
            validateattributes(wheelangle, {'numeric'}, {'nonempty', 'scalar'}, 'sudo_driver_input_msg', 'WheelAngle');
            
            obj.JavaMessage.setWheelAngle(wheelangle);
        end
        
        function aeboverride = get.AebOverride(obj)
            %get.AebOverride Get the value for property AebOverride
            aeboverride = logical(obj.JavaMessage.getAebOverride);
        end
        
        function set.AebOverride(obj, aeboverride)
            %set.AebOverride Set the value for property AebOverride
            validateattributes(aeboverride, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'sudo_driver_input_msg', 'AebOverride');
            
            obj.JavaMessage.setAebOverride(aeboverride);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TargetAccel = obj.TargetAccel;
            cpObj.WheelAngle = obj.WheelAngle;
            cpObj.AebOverride = obj.AebOverride;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TargetAccel = strObj.TargetAccel;
            obj.WheelAngle = strObj.WheelAngle;
            obj.AebOverride = strObj.AebOverride;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TargetAccel = obj.TargetAccel;
            strObj.WheelAngle = obj.WheelAngle;
            strObj.AebOverride = obj.AebOverride;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.ecmc.sudo_driver_input_msg.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.ecmc.sudo_driver_input_msg;
            obj.reload(strObj);
        end
    end
end
