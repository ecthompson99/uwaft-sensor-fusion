classdef filtered_object_msg < ros.Message
    %filtered_object_msg MATLAB implementation of kalman_filter/filtered_object_msg
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'kalman_filter/filtered_object_msg' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f35196dc124b3c49416ec1b32d7f6fa6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        ObjId
        ObjDx
        ObjLane
        ObjVx
        ObjDy
        ObjAx
        ObjPath
        ObjVy
        ObjTimestamp
        ObjCount
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ObjAx', 'ObjCount', 'ObjDx', 'ObjDy', 'ObjId', 'ObjLane', 'ObjPath', 'ObjTimestamp', 'ObjVx', 'ObjVy'} % List of non-constant message properties
        ROSPropertyList = {'obj_ax', 'obj_count', 'obj_dx', 'obj_dy', 'obj_id', 'obj_lane', 'obj_path', 'obj_timestamp', 'obj_vx', 'obj_vy'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = filtered_object_msg(msg)
            %filtered_object_msg Construct the message object filtered_object_msg
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function objid = get.ObjId(obj)
            %get.ObjId Get the value for property ObjId
            objid = typecast(int64(obj.JavaMessage.getObjId), 'uint64');
        end
        
        function set.ObjId(obj, objid)
            %set.ObjId Set the value for property ObjId
            validateattributes(objid, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjId');
            
            obj.JavaMessage.setObjId(objid);
        end
        
        function objdx = get.ObjDx(obj)
            %get.ObjDx Get the value for property ObjDx
            objdx = double(obj.JavaMessage.getObjDx);
        end
        
        function set.ObjDx(obj, objdx)
            %set.ObjDx Set the value for property ObjDx
            validateattributes(objdx, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjDx');
            
            obj.JavaMessage.setObjDx(objdx);
        end
        
        function objlane = get.ObjLane(obj)
            %get.ObjLane Get the value for property ObjLane
            objlane = typecast(int8(obj.JavaMessage.getObjLane), 'uint8');
        end
        
        function set.ObjLane(obj, objlane)
            %set.ObjLane Set the value for property ObjLane
            validateattributes(objlane, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjLane');
            
            obj.JavaMessage.setObjLane(objlane);
        end
        
        function objvx = get.ObjVx(obj)
            %get.ObjVx Get the value for property ObjVx
            objvx = double(obj.JavaMessage.getObjVx);
        end
        
        function set.ObjVx(obj, objvx)
            %set.ObjVx Set the value for property ObjVx
            validateattributes(objvx, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjVx');
            
            obj.JavaMessage.setObjVx(objvx);
        end
        
        function objdy = get.ObjDy(obj)
            %get.ObjDy Get the value for property ObjDy
            objdy = double(obj.JavaMessage.getObjDy);
        end
        
        function set.ObjDy(obj, objdy)
            %set.ObjDy Set the value for property ObjDy
            validateattributes(objdy, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjDy');
            
            obj.JavaMessage.setObjDy(objdy);
        end
        
        function objax = get.ObjAx(obj)
            %get.ObjAx Get the value for property ObjAx
            objax = double(obj.JavaMessage.getObjAx);
        end
        
        function set.ObjAx(obj, objax)
            %set.ObjAx Set the value for property ObjAx
            validateattributes(objax, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjAx');
            
            obj.JavaMessage.setObjAx(objax);
        end
        
        function objpath = get.ObjPath(obj)
            %get.ObjPath Get the value for property ObjPath
            objpath = logical(obj.JavaMessage.getObjPath);
        end
        
        function set.ObjPath(obj, objpath)
            %set.ObjPath Set the value for property ObjPath
            validateattributes(objpath, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjPath');
            
            obj.JavaMessage.setObjPath(objpath);
        end
        
        function objvy = get.ObjVy(obj)
            %get.ObjVy Get the value for property ObjVy
            objvy = double(obj.JavaMessage.getObjVy);
        end
        
        function set.ObjVy(obj, objvy)
            %set.ObjVy Set the value for property ObjVy
            validateattributes(objvy, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjVy');
            
            obj.JavaMessage.setObjVy(objvy);
        end
        
        function objtimestamp = get.ObjTimestamp(obj)
            %get.ObjTimestamp Get the value for property ObjTimestamp
            objtimestamp = double(obj.JavaMessage.getObjTimestamp);
        end
        
        function set.ObjTimestamp(obj, objtimestamp)
            %set.ObjTimestamp Set the value for property ObjTimestamp
            validateattributes(objtimestamp, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjTimestamp');
            
            obj.JavaMessage.setObjTimestamp(objtimestamp);
        end
        
        function objcount = get.ObjCount(obj)
            %get.ObjCount Get the value for property ObjCount
            objcount = typecast(int8(obj.JavaMessage.getObjCount), 'uint8');
        end
        
        function set.ObjCount(obj, objcount)
            %set.ObjCount Set the value for property ObjCount
            validateattributes(objcount, {'numeric'}, {'nonempty', 'scalar'}, 'filtered_object_msg', 'ObjCount');
            
            obj.JavaMessage.setObjCount(objcount);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ObjId = obj.ObjId;
            cpObj.ObjDx = obj.ObjDx;
            cpObj.ObjLane = obj.ObjLane;
            cpObj.ObjVx = obj.ObjVx;
            cpObj.ObjDy = obj.ObjDy;
            cpObj.ObjAx = obj.ObjAx;
            cpObj.ObjPath = obj.ObjPath;
            cpObj.ObjVy = obj.ObjVy;
            cpObj.ObjTimestamp = obj.ObjTimestamp;
            cpObj.ObjCount = obj.ObjCount;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ObjId = strObj.ObjId;
            obj.ObjDx = strObj.ObjDx;
            obj.ObjLane = strObj.ObjLane;
            obj.ObjVx = strObj.ObjVx;
            obj.ObjDy = strObj.ObjDy;
            obj.ObjAx = strObj.ObjAx;
            obj.ObjPath = strObj.ObjPath;
            obj.ObjVy = strObj.ObjVy;
            obj.ObjTimestamp = strObj.ObjTimestamp;
            obj.ObjCount = strObj.ObjCount;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ObjId = obj.ObjId;
            strObj.ObjDx = obj.ObjDx;
            strObj.ObjLane = obj.ObjLane;
            strObj.ObjVx = obj.ObjVx;
            strObj.ObjDy = obj.ObjDy;
            strObj.ObjAx = obj.ObjAx;
            strObj.ObjPath = obj.ObjPath;
            strObj.ObjVy = obj.ObjVy;
            strObj.ObjTimestamp = obj.ObjTimestamp;
            strObj.ObjCount = obj.ObjCount;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.kalman_filter.filtered_object_msg.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.kalman_filter.filtered_object_msg;
            obj.reload(strObj);
        end
    end
end
