classdef radar_object_data_from_matlab < ros.Message
    %radar_object_data_from_matlab MATLAB implementation of sensor_fusion_testing/radar_object_data_from_matlab
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'sensor_fusion_testing/radar_object_data_from_matlab' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '4da7abcd6760b6ce010af2f7c47d29e9' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        RadarDx
        RadarDy
        RadarVx
        RadarVy
        RadarTimestamp
    end
    
    properties (Constant, Hidden)
        PropertyList = {'RadarDx', 'RadarDy', 'RadarTimestamp', 'RadarVx', 'RadarVy'} % List of non-constant message properties
        ROSPropertyList = {'RadarDx', 'RadarDy', 'RadarTimestamp', 'RadarVx', 'RadarVy'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = radar_object_data_from_matlab(msg)
            %radar_object_data_from_matlab Construct the message object radar_object_data_from_matlab
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function radardx = get.RadarDx(obj)
            %get.RadarDx Get the value for property RadarDx
            radardx = double(obj.JavaMessage.getRadarDx);
        end
        
        function set.RadarDx(obj, radardx)
            %set.RadarDx Set the value for property RadarDx
            validateattributes(radardx, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data_from_matlab', 'RadarDx');
            
            obj.JavaMessage.setRadarDx(radardx);
        end
        
        function radardy = get.RadarDy(obj)
            %get.RadarDy Get the value for property RadarDy
            radardy = double(obj.JavaMessage.getRadarDy);
        end
        
        function set.RadarDy(obj, radardy)
            %set.RadarDy Set the value for property RadarDy
            validateattributes(radardy, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data_from_matlab', 'RadarDy');
            
            obj.JavaMessage.setRadarDy(radardy);
        end
        
        function radarvx = get.RadarVx(obj)
            %get.RadarVx Get the value for property RadarVx
            radarvx = double(obj.JavaMessage.getRadarVx);
        end
        
        function set.RadarVx(obj, radarvx)
            %set.RadarVx Set the value for property RadarVx
            validateattributes(radarvx, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data_from_matlab', 'RadarVx');
            
            obj.JavaMessage.setRadarVx(radarvx);
        end
        
        function radarvy = get.RadarVy(obj)
            %get.RadarVy Get the value for property RadarVy
            radarvy = double(obj.JavaMessage.getRadarVy);
        end
        
        function set.RadarVy(obj, radarvy)
            %set.RadarVy Set the value for property RadarVy
            validateattributes(radarvy, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data_from_matlab', 'RadarVy');
            
            obj.JavaMessage.setRadarVy(radarvy);
        end
        
        function radartimestamp = get.RadarTimestamp(obj)
            %get.RadarTimestamp Get the value for property RadarTimestamp
            radartimestamp = double(obj.JavaMessage.getRadarTimestamp);
        end
        
        function set.RadarTimestamp(obj, radartimestamp)
            %set.RadarTimestamp Set the value for property RadarTimestamp
            validateattributes(radartimestamp, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data_from_matlab', 'RadarTimestamp');
            
            obj.JavaMessage.setRadarTimestamp(radartimestamp);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.RadarDx = obj.RadarDx;
            cpObj.RadarDy = obj.RadarDy;
            cpObj.RadarVx = obj.RadarVx;
            cpObj.RadarVy = obj.RadarVy;
            cpObj.RadarTimestamp = obj.RadarTimestamp;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.RadarDx = strObj.RadarDx;
            obj.RadarDy = strObj.RadarDy;
            obj.RadarVx = strObj.RadarVx;
            obj.RadarVy = strObj.RadarVy;
            obj.RadarTimestamp = strObj.RadarTimestamp;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.RadarDx = obj.RadarDx;
            strObj.RadarDy = obj.RadarDy;
            strObj.RadarVx = obj.RadarVx;
            strObj.RadarVy = obj.RadarVy;
            strObj.RadarTimestamp = obj.RadarTimestamp;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.sensor_fusion_testing.radar_object_data_from_matlab.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.sensor_fusion_testing.radar_object_data_from_matlab;
            obj.reload(strObj);
        end
    end
end
