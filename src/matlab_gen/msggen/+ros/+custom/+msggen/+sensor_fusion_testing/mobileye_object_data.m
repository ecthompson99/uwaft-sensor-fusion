classdef mobileye_object_data < ros.Message
    %mobileye_object_data MATLAB implementation of sensor_fusion_testing/mobileye_object_data
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'sensor_fusion_testing/mobileye_object_data' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'af9e922c56ccfb44a36214f01e53653c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        MeDx
        MeDy
        MeVx
        MeAx
        MeObjectId
        MeObjectLane
        MeTimestamp
    end
    
    properties (Constant, Hidden)
        PropertyList = {'MeAx', 'MeDx', 'MeDy', 'MeObjectId', 'MeObjectLane', 'MeTimestamp', 'MeVx'} % List of non-constant message properties
        ROSPropertyList = {'me_ax', 'me_dx', 'me_dy', 'me_object_id', 'me_object_lane', 'me_timestamp', 'me_vx'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = mobileye_object_data(msg)
            %mobileye_object_data Construct the message object mobileye_object_data
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function medx = get.MeDx(obj)
            %get.MeDx Get the value for property MeDx
            medx = double(obj.JavaMessage.getMeDx);
        end
        
        function set.MeDx(obj, medx)
            %set.MeDx Set the value for property MeDx
            validateattributes(medx, {'numeric'}, {'nonempty', 'scalar'}, 'mobileye_object_data', 'MeDx');
            
            obj.JavaMessage.setMeDx(medx);
        end
        
        function medy = get.MeDy(obj)
            %get.MeDy Get the value for property MeDy
            medy = double(obj.JavaMessage.getMeDy);
        end
        
        function set.MeDy(obj, medy)
            %set.MeDy Set the value for property MeDy
            validateattributes(medy, {'numeric'}, {'nonempty', 'scalar'}, 'mobileye_object_data', 'MeDy');
            
            obj.JavaMessage.setMeDy(medy);
        end
        
        function mevx = get.MeVx(obj)
            %get.MeVx Get the value for property MeVx
            mevx = double(obj.JavaMessage.getMeVx);
        end
        
        function set.MeVx(obj, mevx)
            %set.MeVx Set the value for property MeVx
            validateattributes(mevx, {'numeric'}, {'nonempty', 'scalar'}, 'mobileye_object_data', 'MeVx');
            
            obj.JavaMessage.setMeVx(mevx);
        end
        
        function meax = get.MeAx(obj)
            %get.MeAx Get the value for property MeAx
            meax = double(obj.JavaMessage.getMeAx);
        end
        
        function set.MeAx(obj, meax)
            %set.MeAx Set the value for property MeAx
            validateattributes(meax, {'numeric'}, {'nonempty', 'scalar'}, 'mobileye_object_data', 'MeAx');
            
            obj.JavaMessage.setMeAx(meax);
        end
        
        function meobjectid = get.MeObjectId(obj)
            %get.MeObjectId Get the value for property MeObjectId
            meobjectid = typecast(int8(obj.JavaMessage.getMeObjectId), 'uint8');
        end
        
        function set.MeObjectId(obj, meobjectid)
            %set.MeObjectId Set the value for property MeObjectId
            validateattributes(meobjectid, {'numeric'}, {'nonempty', 'scalar'}, 'mobileye_object_data', 'MeObjectId');
            
            obj.JavaMessage.setMeObjectId(meobjectid);
        end
        
        function meobjectlane = get.MeObjectLane(obj)
            %get.MeObjectLane Get the value for property MeObjectLane
            meobjectlane = typecast(int8(obj.JavaMessage.getMeObjectLane), 'uint8');
        end
        
        function set.MeObjectLane(obj, meobjectlane)
            %set.MeObjectLane Set the value for property MeObjectLane
            validateattributes(meobjectlane, {'numeric'}, {'nonempty', 'scalar'}, 'mobileye_object_data', 'MeObjectLane');
            
            obj.JavaMessage.setMeObjectLane(meobjectlane);
        end
        
        function metimestamp = get.MeTimestamp(obj)
            %get.MeTimestamp Get the value for property MeTimestamp
            metimestamp = double(obj.JavaMessage.getMeTimestamp);
        end
        
        function set.MeTimestamp(obj, metimestamp)
            %set.MeTimestamp Set the value for property MeTimestamp
            validateattributes(metimestamp, {'numeric'}, {'nonempty', 'scalar'}, 'mobileye_object_data', 'MeTimestamp');
            
            obj.JavaMessage.setMeTimestamp(metimestamp);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MeDx = obj.MeDx;
            cpObj.MeDy = obj.MeDy;
            cpObj.MeVx = obj.MeVx;
            cpObj.MeAx = obj.MeAx;
            cpObj.MeObjectId = obj.MeObjectId;
            cpObj.MeObjectLane = obj.MeObjectLane;
            cpObj.MeTimestamp = obj.MeTimestamp;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MeDx = strObj.MeDx;
            obj.MeDy = strObj.MeDy;
            obj.MeVx = strObj.MeVx;
            obj.MeAx = strObj.MeAx;
            obj.MeObjectId = strObj.MeObjectId;
            obj.MeObjectLane = strObj.MeObjectLane;
            obj.MeTimestamp = strObj.MeTimestamp;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MeDx = obj.MeDx;
            strObj.MeDy = obj.MeDy;
            strObj.MeVx = obj.MeVx;
            strObj.MeAx = obj.MeAx;
            strObj.MeObjectId = obj.MeObjectId;
            strObj.MeObjectLane = obj.MeObjectLane;
            strObj.MeTimestamp = obj.MeTimestamp;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.sensor_fusion_testing.mobileye_object_data.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.sensor_fusion_testing.mobileye_object_data;
            obj.reload(strObj);
        end
    end
end
