classdef radar_object_data < ros.Message
    %radar_object_data MATLAB implementation of sensor_fusion_testing/radar_object_data
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'sensor_fusion_testing/radar_object_data' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'a5e49affa721cdb57d5456f22b2499c3' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        RadarDx
        RadarDy
        RadarVx
        RadarVy
        RadarAx
        RadarTargetNum
        RadarTimestamp
        RadarDxSigma
        RadarDySigma
        RadarVxSigma
        RadarAxSigma
    end
    
    properties (Constant, Hidden)
        PropertyList = {'RadarAx', 'RadarAxSigma', 'RadarDx', 'RadarDxSigma', 'RadarDy', 'RadarDySigma', 'RadarTargetNum', 'RadarTimestamp', 'RadarVx', 'RadarVxSigma', 'RadarVy'} % List of non-constant message properties
        ROSPropertyList = {'radar_ax', 'radar_ax_sigma', 'radar_dx', 'radar_dx_sigma', 'radar_dy', 'radar_dy_sigma', 'radar_target_num', 'radar_timestamp', 'radar_vx', 'radar_vx_sigma', 'radar_vy'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = radar_object_data(msg)
            %radar_object_data Construct the message object radar_object_data
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function radardx = get.RadarDx(obj)
            %get.RadarDx Get the value for property RadarDx
            radardx = double(obj.JavaMessage.getRadarDx);
        end
        
        function set.RadarDx(obj, radardx)
            %set.RadarDx Set the value for property RadarDx
            validateattributes(radardx, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarDx');
            
            obj.JavaMessage.setRadarDx(radardx);
        end
        
        function radardy = get.RadarDy(obj)
            %get.RadarDy Get the value for property RadarDy
            radardy = double(obj.JavaMessage.getRadarDy);
        end
        
        function set.RadarDy(obj, radardy)
            %set.RadarDy Set the value for property RadarDy
            validateattributes(radardy, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarDy');
            
            obj.JavaMessage.setRadarDy(radardy);
        end
        
        function radarvx = get.RadarVx(obj)
            %get.RadarVx Get the value for property RadarVx
            radarvx = double(obj.JavaMessage.getRadarVx);
        end
        
        function set.RadarVx(obj, radarvx)
            %set.RadarVx Set the value for property RadarVx
            validateattributes(radarvx, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarVx');
            
            obj.JavaMessage.setRadarVx(radarvx);
        end
        
        function radarvy = get.RadarVy(obj)
            %get.RadarVy Get the value for property RadarVy
            radarvy = double(obj.JavaMessage.getRadarVy);
        end
        
        function set.RadarVy(obj, radarvy)
            %set.RadarVy Set the value for property RadarVy
            validateattributes(radarvy, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarVy');
            
            obj.JavaMessage.setRadarVy(radarvy);
        end
        
        function radarax = get.RadarAx(obj)
            %get.RadarAx Get the value for property RadarAx
            radarax = double(obj.JavaMessage.getRadarAx);
        end
        
        function set.RadarAx(obj, radarax)
            %set.RadarAx Set the value for property RadarAx
            validateattributes(radarax, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarAx');
            
            obj.JavaMessage.setRadarAx(radarax);
        end
        
        function radartargetnum = get.RadarTargetNum(obj)
            %get.RadarTargetNum Get the value for property RadarTargetNum
            radartargetnum = typecast(int8(obj.JavaMessage.getRadarTargetNum), 'uint8');
        end
        
        function set.RadarTargetNum(obj, radartargetnum)
            %set.RadarTargetNum Set the value for property RadarTargetNum
            validateattributes(radartargetnum, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarTargetNum');
            
            obj.JavaMessage.setRadarTargetNum(radartargetnum);
        end
        
        function radartimestamp = get.RadarTimestamp(obj)
            %get.RadarTimestamp Get the value for property RadarTimestamp
            radartimestamp = double(obj.JavaMessage.getRadarTimestamp);
        end
        
        function set.RadarTimestamp(obj, radartimestamp)
            %set.RadarTimestamp Set the value for property RadarTimestamp
            validateattributes(radartimestamp, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarTimestamp');
            
            obj.JavaMessage.setRadarTimestamp(radartimestamp);
        end
        
        function radardxsigma = get.RadarDxSigma(obj)
            %get.RadarDxSigma Get the value for property RadarDxSigma
            radardxsigma = double(obj.JavaMessage.getRadarDxSigma);
        end
        
        function set.RadarDxSigma(obj, radardxsigma)
            %set.RadarDxSigma Set the value for property RadarDxSigma
            validateattributes(radardxsigma, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarDxSigma');
            
            obj.JavaMessage.setRadarDxSigma(radardxsigma);
        end
        
        function radardysigma = get.RadarDySigma(obj)
            %get.RadarDySigma Get the value for property RadarDySigma
            radardysigma = double(obj.JavaMessage.getRadarDySigma);
        end
        
        function set.RadarDySigma(obj, radardysigma)
            %set.RadarDySigma Set the value for property RadarDySigma
            validateattributes(radardysigma, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarDySigma');
            
            obj.JavaMessage.setRadarDySigma(radardysigma);
        end
        
        function radarvxsigma = get.RadarVxSigma(obj)
            %get.RadarVxSigma Get the value for property RadarVxSigma
            radarvxsigma = double(obj.JavaMessage.getRadarVxSigma);
        end
        
        function set.RadarVxSigma(obj, radarvxsigma)
            %set.RadarVxSigma Set the value for property RadarVxSigma
            validateattributes(radarvxsigma, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarVxSigma');
            
            obj.JavaMessage.setRadarVxSigma(radarvxsigma);
        end
        
        function radaraxsigma = get.RadarAxSigma(obj)
            %get.RadarAxSigma Get the value for property RadarAxSigma
            radaraxsigma = double(obj.JavaMessage.getRadarAxSigma);
        end
        
        function set.RadarAxSigma(obj, radaraxsigma)
            %set.RadarAxSigma Set the value for property RadarAxSigma
            validateattributes(radaraxsigma, {'numeric'}, {'nonempty', 'scalar'}, 'radar_object_data', 'RadarAxSigma');
            
            obj.JavaMessage.setRadarAxSigma(radaraxsigma);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.RadarDx = obj.RadarDx;
            cpObj.RadarDy = obj.RadarDy;
            cpObj.RadarVx = obj.RadarVx;
            cpObj.RadarVy = obj.RadarVy;
            cpObj.RadarAx = obj.RadarAx;
            cpObj.RadarTargetNum = obj.RadarTargetNum;
            cpObj.RadarTimestamp = obj.RadarTimestamp;
            cpObj.RadarDxSigma = obj.RadarDxSigma;
            cpObj.RadarDySigma = obj.RadarDySigma;
            cpObj.RadarVxSigma = obj.RadarVxSigma;
            cpObj.RadarAxSigma = obj.RadarAxSigma;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.RadarDx = strObj.RadarDx;
            obj.RadarDy = strObj.RadarDy;
            obj.RadarVx = strObj.RadarVx;
            obj.RadarVy = strObj.RadarVy;
            obj.RadarAx = strObj.RadarAx;
            obj.RadarTargetNum = strObj.RadarTargetNum;
            obj.RadarTimestamp = strObj.RadarTimestamp;
            obj.RadarDxSigma = strObj.RadarDxSigma;
            obj.RadarDySigma = strObj.RadarDySigma;
            obj.RadarVxSigma = strObj.RadarVxSigma;
            obj.RadarAxSigma = strObj.RadarAxSigma;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.RadarDx = obj.RadarDx;
            strObj.RadarDy = obj.RadarDy;
            strObj.RadarVx = obj.RadarVx;
            strObj.RadarVy = obj.RadarVy;
            strObj.RadarAx = obj.RadarAx;
            strObj.RadarTargetNum = obj.RadarTargetNum;
            strObj.RadarTimestamp = obj.RadarTimestamp;
            strObj.RadarDxSigma = obj.RadarDxSigma;
            strObj.RadarDySigma = obj.RadarDySigma;
            strObj.RadarVxSigma = obj.RadarVxSigma;
            strObj.RadarAxSigma = obj.RadarAxSigma;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.sensor_fusion_testing.radar_object_data.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.sensor_fusion_testing.radar_object_data;
            obj.reload(strObj);
        end
    end
end
