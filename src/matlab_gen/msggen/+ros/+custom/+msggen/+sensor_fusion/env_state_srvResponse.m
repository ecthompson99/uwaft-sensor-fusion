classdef env_state_srvResponse < ros.Message
    %env_state_srvResponse MATLAB implementation of sensor_fusion/env_state_srvResponse
    %   This class was automatically generated by
    %   ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2020 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'sensor_fusion/env_state_srvResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'fd34d01bd0727dcbaea28a8ccb263e2a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Id
        Dx
        Dy
        Timestamp
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Dx', 'Dy', 'Id', 'Timestamp'} % List of non-constant message properties
        ROSPropertyList = {'dx', 'dy', 'id', 'timestamp'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = env_state_srvResponse(msg)
            %env_state_srvResponse Construct the message object env_state_srvResponse
            import com.mathworks.toolbox.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('ros:mlros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('ros:mlros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('ros:mlros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            javaArray = obj.JavaMessage.getId;
            array = obj.readJavaArray(javaArray, 'uint64');
            id = uint64(array);
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            if ~isvector(id) && isempty(id)
                % Allow empty [] input
                id = uint64.empty(0,1);
            end
            
            validateattributes(id, {'numeric'}, {'vector'}, 'env_state_srvResponse', 'Id');
            
            javaArray = obj.JavaMessage.getId;
            array = obj.writeJavaArray(id, javaArray, 'uint64');
            obj.JavaMessage.setId(array);
        end
        
        function dx = get.Dx(obj)
            %get.Dx Get the value for property Dx
            javaArray = obj.JavaMessage.getDx;
            array = obj.readJavaArray(javaArray, 'double');
            dx = double(array);
        end
        
        function set.Dx(obj, dx)
            %set.Dx Set the value for property Dx
            if ~isvector(dx) && isempty(dx)
                % Allow empty [] input
                dx = double.empty(0,1);
            end
            
            validateattributes(dx, {'numeric'}, {'vector'}, 'env_state_srvResponse', 'Dx');
            
            javaArray = obj.JavaMessage.getDx;
            array = obj.writeJavaArray(dx, javaArray, 'double');
            obj.JavaMessage.setDx(array);
        end
        
        function dy = get.Dy(obj)
            %get.Dy Get the value for property Dy
            javaArray = obj.JavaMessage.getDy;
            array = obj.readJavaArray(javaArray, 'double');
            dy = double(array);
        end
        
        function set.Dy(obj, dy)
            %set.Dy Set the value for property Dy
            if ~isvector(dy) && isempty(dy)
                % Allow empty [] input
                dy = double.empty(0,1);
            end
            
            validateattributes(dy, {'numeric'}, {'vector'}, 'env_state_srvResponse', 'Dy');
            
            javaArray = obj.JavaMessage.getDy;
            array = obj.writeJavaArray(dy, javaArray, 'double');
            obj.JavaMessage.setDy(array);
        end
        
        function timestamp = get.Timestamp(obj)
            %get.Timestamp Get the value for property Timestamp
            javaArray = obj.JavaMessage.getTimestamp;
            array = obj.readJavaArray(javaArray, 'double');
            timestamp = double(array);
        end
        
        function set.Timestamp(obj, timestamp)
            %set.Timestamp Set the value for property Timestamp
            if ~isvector(timestamp) && isempty(timestamp)
                % Allow empty [] input
                timestamp = double.empty(0,1);
            end
            
            validateattributes(timestamp, {'numeric'}, {'vector'}, 'env_state_srvResponse', 'Timestamp');
            
            javaArray = obj.JavaMessage.getTimestamp;
            array = obj.writeJavaArray(timestamp, javaArray, 'double');
            obj.JavaMessage.setTimestamp(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Id = obj.Id;
            cpObj.Dx = obj.Dx;
            cpObj.Dy = obj.Dy;
            cpObj.Timestamp = obj.Timestamp;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Id = strObj.Id;
            obj.Dx = strObj.Dx;
            obj.Dy = strObj.Dy;
            obj.Timestamp = strObj.Timestamp;
        end
    end
    
    methods (Access = ?ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Id = obj.Id;
            strObj.Dx = obj.Dx;
            strObj.Dy = obj.Dy;
            strObj.Timestamp = obj.Timestamp;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.custom.msggen.sensor_fusion.env_state_srvResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = ros.custom.msggen.sensor_fusion.env_state_srvResponse;
            obj.reload(strObj);
        end
    end
end
